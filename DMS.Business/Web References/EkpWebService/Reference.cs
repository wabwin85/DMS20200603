//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace DMS.Business.EkpWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IntegratedWebServiceServiceSoapBinding", Namespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/")]
    public partial class IntegratedWebServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetTasksInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuditOptionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetApprovedListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnApprovingListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFlowTemplateListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormFieldListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApproveProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetApprovedListsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldAuthInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOperationParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetApproverListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormFieldValueListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnApprovingListsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOperationListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFlowLogListOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsExistProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentNodesInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CanApprovalProcessOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public IntegratedWebServiceService() {
            this.Url = global::DMS.Business.Properties.Settings.Default.DMS_Business_EkpWebService_IntegratedWebServiceService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetTasksInfoCompletedEventHandler GetTasksInfoCompleted;
        
        /// <remarks/>
        public event GetAuditOptionListCompletedEventHandler GetAuditOptionListCompleted;
        
        /// <remarks/>
        public event GetApprovedListCompletedEventHandler GetApprovedListCompleted;
        
        /// <remarks/>
        public event GetUnApprovingListCompletedEventHandler GetUnApprovingListCompleted;
        
        /// <remarks/>
        public event GetFlowTemplateListCompletedEventHandler GetFlowTemplateListCompleted;
        
        /// <remarks/>
        public event GetFormFieldListCompletedEventHandler GetFormFieldListCompleted;
        
        /// <remarks/>
        public event ApproveProcessCompletedEventHandler ApproveProcessCompleted;
        
        /// <remarks/>
        public event GetApprovedListsCompletedEventHandler GetApprovedListsCompleted;
        
        /// <remarks/>
        public event DeleteProcessCompletedEventHandler DeleteProcessCompleted;
        
        /// <remarks/>
        public event ValidateProcessCompletedEventHandler ValidateProcessCompleted;
        
        /// <remarks/>
        public event CreateProcessCompletedEventHandler CreateProcessCompleted;
        
        /// <remarks/>
        public event GetFieldAuthInfoCompletedEventHandler GetFieldAuthInfoCompleted;
        
        /// <remarks/>
        public event GetOperationParamCompletedEventHandler GetOperationParamCompleted;
        
        /// <remarks/>
        public event GetApproverListCompletedEventHandler GetApproverListCompleted;
        
        /// <remarks/>
        public event GetFormFieldValueListCompletedEventHandler GetFormFieldValueListCompleted;
        
        /// <remarks/>
        public event GetUnApprovingListsCompletedEventHandler GetUnApprovingListsCompleted;
        
        /// <remarks/>
        public event GetOperationListCompletedEventHandler GetOperationListCompleted;
        
        /// <remarks/>
        public event GetFlowLogListCompletedEventHandler GetFlowLogListCompleted;
        
        /// <remarks/>
        public event IsExistProcessCompletedEventHandler IsExistProcessCompleted;
        
        /// <remarks/>
        public event GetCurrentNodesInfoCompletedEventHandler GetCurrentNodesInfoCompleted;
        
        /// <remarks/>
        public event CanApprovalProcessCompletedEventHandler CanApprovalProcessCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetTasksInfo([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string processId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string handler, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("GetTasksInfo", new object[] {
                        formId,
                        processId,
                        handler,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTasksInfoAsync(string formId, string processId, string handler, string language) {
            this.GetTasksInfoAsync(formId, processId, handler, language, null);
        }
        
        /// <remarks/>
        public void GetTasksInfoAsync(string formId, string processId, string handler, string language, object userState) {
            if ((this.GetTasksInfoOperationCompleted == null)) {
                this.GetTasksInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTasksInfoOperationCompleted);
            }
            this.InvokeAsync("GetTasksInfo", new object[] {
                        formId,
                        processId,
                        handler,
                        language}, this.GetTasksInfoOperationCompleted, userState);
        }
        
        private void OnGetTasksInfoOperationCompleted(object arg) {
            if ((this.GetTasksInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTasksInfoCompleted(this, new GetTasksInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetAuditOptionList([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string processId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string actionUid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string pageNo, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string pageSize, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("GetAuditOptionList", new object[] {
                        formId,
                        processId,
                        actionUid,
                        pageNo,
                        pageSize,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuditOptionListAsync(string formId, string processId, string actionUid, string pageNo, string pageSize, string language) {
            this.GetAuditOptionListAsync(formId, processId, actionUid, pageNo, pageSize, language, null);
        }
        
        /// <remarks/>
        public void GetAuditOptionListAsync(string formId, string processId, string actionUid, string pageNo, string pageSize, string language, object userState) {
            if ((this.GetAuditOptionListOperationCompleted == null)) {
                this.GetAuditOptionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuditOptionListOperationCompleted);
            }
            this.InvokeAsync("GetAuditOptionList", new object[] {
                        formId,
                        processId,
                        actionUid,
                        pageNo,
                        pageSize,
                        language}, this.GetAuditOptionListOperationCompleted, userState);
        }
        
        private void OnGetAuditOptionListOperationCompleted(object arg) {
            if ((this.GetAuditOptionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuditOptionListCompleted(this, new GetAuditOptionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetApprovedList([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string actionUid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string docSubject, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string status, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string pageNo, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string pageSize, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("GetApprovedList", new object[] {
                        actionUid,
                        docSubject,
                        status,
                        pageNo,
                        pageSize,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetApprovedListAsync(string actionUid, string docSubject, string status, string pageNo, string pageSize, string language) {
            this.GetApprovedListAsync(actionUid, docSubject, status, pageNo, pageSize, language, null);
        }
        
        /// <remarks/>
        public void GetApprovedListAsync(string actionUid, string docSubject, string status, string pageNo, string pageSize, string language, object userState) {
            if ((this.GetApprovedListOperationCompleted == null)) {
                this.GetApprovedListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApprovedListOperationCompleted);
            }
            this.InvokeAsync("GetApprovedList", new object[] {
                        actionUid,
                        docSubject,
                        status,
                        pageNo,
                        pageSize,
                        language}, this.GetApprovedListOperationCompleted, userState);
        }
        
        private void OnGetApprovedListOperationCompleted(object arg) {
            if ((this.GetApprovedListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApprovedListCompleted(this, new GetApprovedListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetUnApprovingList([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string actionUid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string docSubject, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string status, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string pageNo, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string pageSize, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("GetUnApprovingList", new object[] {
                        actionUid,
                        docSubject,
                        status,
                        pageNo,
                        pageSize,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUnApprovingListAsync(string actionUid, string docSubject, string status, string pageNo, string pageSize, string language) {
            this.GetUnApprovingListAsync(actionUid, docSubject, status, pageNo, pageSize, language, null);
        }
        
        /// <remarks/>
        public void GetUnApprovingListAsync(string actionUid, string docSubject, string status, string pageNo, string pageSize, string language, object userState) {
            if ((this.GetUnApprovingListOperationCompleted == null)) {
                this.GetUnApprovingListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnApprovingListOperationCompleted);
            }
            this.InvokeAsync("GetUnApprovingList", new object[] {
                        actionUid,
                        docSubject,
                        status,
                        pageNo,
                        pageSize,
                        language}, this.GetUnApprovingListOperationCompleted, userState);
        }
        
        private void OnGetUnApprovingListOperationCompleted(object arg) {
            if ((this.GetUnApprovingListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnApprovingListCompleted(this, new GetUnApprovingListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetFlowTemplateList([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string actionUid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string categoryId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("GetFlowTemplateList", new object[] {
                        actionUid,
                        formId,
                        categoryId,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFlowTemplateListAsync(string actionUid, string formId, string categoryId, string language) {
            this.GetFlowTemplateListAsync(actionUid, formId, categoryId, language, null);
        }
        
        /// <remarks/>
        public void GetFlowTemplateListAsync(string actionUid, string formId, string categoryId, string language, object userState) {
            if ((this.GetFlowTemplateListOperationCompleted == null)) {
                this.GetFlowTemplateListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFlowTemplateListOperationCompleted);
            }
            this.InvokeAsync("GetFlowTemplateList", new object[] {
                        actionUid,
                        formId,
                        categoryId,
                        language}, this.GetFlowTemplateListOperationCompleted, userState);
        }
        
        private void OnGetFlowTemplateListOperationCompleted(object arg) {
            if ((this.GetFlowTemplateListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFlowTemplateListCompleted(this, new GetFlowTemplateListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetFormFieldList([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string processId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("GetFormFieldList", new object[] {
                        formId,
                        processId,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFormFieldListAsync(string formId, string processId, string language) {
            this.GetFormFieldListAsync(formId, processId, language, null);
        }
        
        /// <remarks/>
        public void GetFormFieldListAsync(string formId, string processId, string language, object userState) {
            if ((this.GetFormFieldListOperationCompleted == null)) {
                this.GetFormFieldListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormFieldListOperationCompleted);
            }
            this.InvokeAsync("GetFormFieldList", new object[] {
                        formId,
                        processId,
                        language}, this.GetFormFieldListOperationCompleted, userState);
        }
        
        private void OnGetFormFieldListOperationCompleted(object arg) {
            if ((this.GetFormFieldListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormFieldListCompleted(this, new GetFormFieldListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ApproveProcess([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string processId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string handler, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formData, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string processParam, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("ApproveProcess", new object[] {
                        formId,
                        processId,
                        handler,
                        formData,
                        processParam,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ApproveProcessAsync(string formId, string processId, string handler, string formData, string processParam, string language) {
            this.ApproveProcessAsync(formId, processId, handler, formData, processParam, language, null);
        }
        
        /// <remarks/>
        public void ApproveProcessAsync(string formId, string processId, string handler, string formData, string processParam, string language, object userState) {
            if ((this.ApproveProcessOperationCompleted == null)) {
                this.ApproveProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApproveProcessOperationCompleted);
            }
            this.InvokeAsync("ApproveProcess", new object[] {
                        formId,
                        processId,
                        handler,
                        formData,
                        processParam,
                        language}, this.ApproveProcessOperationCompleted, userState);
        }
        
        private void OnApproveProcessOperationCompleted(object arg) {
            if ((this.ApproveProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApproveProcessCompleted(this, new ApproveProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetApprovedLists([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string actionUid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string conditions, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string pageNo, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string pageSize, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("GetApprovedLists", new object[] {
                        actionUid,
                        conditions,
                        pageNo,
                        pageSize,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetApprovedListsAsync(string actionUid, string conditions, string pageNo, string pageSize, string language) {
            this.GetApprovedListsAsync(actionUid, conditions, pageNo, pageSize, language, null);
        }
        
        /// <remarks/>
        public void GetApprovedListsAsync(string actionUid, string conditions, string pageNo, string pageSize, string language, object userState) {
            if ((this.GetApprovedListsOperationCompleted == null)) {
                this.GetApprovedListsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApprovedListsOperationCompleted);
            }
            this.InvokeAsync("GetApprovedLists", new object[] {
                        actionUid,
                        conditions,
                        pageNo,
                        pageSize,
                        language}, this.GetApprovedListsOperationCompleted, userState);
        }
        
        private void OnGetApprovedListsOperationCompleted(object arg) {
            if ((this.GetApprovedListsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApprovedListsCompleted(this, new GetApprovedListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DeleteProcess([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("DeleteProcess", new object[] {
                        formId,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteProcessAsync(string formId, string language) {
            this.DeleteProcessAsync(formId, language, null);
        }
        
        /// <remarks/>
        public void DeleteProcessAsync(string formId, string language, object userState) {
            if ((this.DeleteProcessOperationCompleted == null)) {
                this.DeleteProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteProcessOperationCompleted);
            }
            this.InvokeAsync("DeleteProcess", new object[] {
                        formId,
                        language}, this.DeleteProcessOperationCompleted, userState);
        }
        
        private void OnDeleteProcessOperationCompleted(object arg) {
            if ((this.DeleteProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteProcessCompleted(this, new DeleteProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ValidateProcess([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string processId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string actionUid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string processParam, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("ValidateProcess", new object[] {
                        formId,
                        processId,
                        actionUid,
                        processParam,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateProcessAsync(string formId, string processId, string actionUid, string processParam, string language) {
            this.ValidateProcessAsync(formId, processId, actionUid, processParam, language, null);
        }
        
        /// <remarks/>
        public void ValidateProcessAsync(string formId, string processId, string actionUid, string processParam, string language, object userState) {
            if ((this.ValidateProcessOperationCompleted == null)) {
                this.ValidateProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateProcessOperationCompleted);
            }
            this.InvokeAsync("ValidateProcess", new object[] {
                        formId,
                        processId,
                        actionUid,
                        processParam,
                        language}, this.ValidateProcessOperationCompleted, userState);
        }
        
        private void OnValidateProcessOperationCompleted(object arg) {
            if ((this.ValidateProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateProcessCompleted(this, new ValidateProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CreateProcess([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string flowTemplateId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string creator, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string exParam, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("CreateProcess", new object[] {
                        flowTemplateId,
                        formId,
                        creator,
                        exParam,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateProcessAsync(string flowTemplateId, string formId, string creator, string exParam, string language) {
            this.CreateProcessAsync(flowTemplateId, formId, creator, exParam, language, null);
        }
        
        /// <remarks/>
        public void CreateProcessAsync(string flowTemplateId, string formId, string creator, string exParam, string language, object userState) {
            if ((this.CreateProcessOperationCompleted == null)) {
                this.CreateProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateProcessOperationCompleted);
            }
            this.InvokeAsync("CreateProcess", new object[] {
                        flowTemplateId,
                        formId,
                        creator,
                        exParam,
                        language}, this.CreateProcessOperationCompleted, userState);
        }
        
        private void OnCreateProcessOperationCompleted(object arg) {
            if ((this.CreateProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateProcessCompleted(this, new CreateProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetFieldAuthInfo([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string processId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string nodeFactIds, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("GetFieldAuthInfo", new object[] {
                        formId,
                        processId,
                        nodeFactIds,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldAuthInfoAsync(string formId, string processId, string nodeFactIds, string language) {
            this.GetFieldAuthInfoAsync(formId, processId, nodeFactIds, language, null);
        }
        
        /// <remarks/>
        public void GetFieldAuthInfoAsync(string formId, string processId, string nodeFactIds, string language, object userState) {
            if ((this.GetFieldAuthInfoOperationCompleted == null)) {
                this.GetFieldAuthInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldAuthInfoOperationCompleted);
            }
            this.InvokeAsync("GetFieldAuthInfo", new object[] {
                        formId,
                        processId,
                        nodeFactIds,
                        language}, this.GetFieldAuthInfoOperationCompleted, userState);
        }
        
        private void OnGetFieldAuthInfoOperationCompleted(object arg) {
            if ((this.GetFieldAuthInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldAuthInfoCompleted(this, new GetFieldAuthInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetOperationParam([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string processId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string actionUid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string operationTypes, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string taskInfo, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("GetOperationParam", new object[] {
                        formId,
                        processId,
                        actionUid,
                        operationTypes,
                        taskInfo,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOperationParamAsync(string formId, string processId, string actionUid, string operationTypes, string taskInfo, string language) {
            this.GetOperationParamAsync(formId, processId, actionUid, operationTypes, taskInfo, language, null);
        }
        
        /// <remarks/>
        public void GetOperationParamAsync(string formId, string processId, string actionUid, string operationTypes, string taskInfo, string language, object userState) {
            if ((this.GetOperationParamOperationCompleted == null)) {
                this.GetOperationParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOperationParamOperationCompleted);
            }
            this.InvokeAsync("GetOperationParam", new object[] {
                        formId,
                        processId,
                        actionUid,
                        operationTypes,
                        taskInfo,
                        language}, this.GetOperationParamOperationCompleted, userState);
        }
        
        private void OnGetOperationParamOperationCompleted(object arg) {
            if ((this.GetOperationParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOperationParamCompleted(this, new GetOperationParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetApproverList([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string processId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("GetApproverList", new object[] {
                        formId,
                        processId,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetApproverListAsync(string formId, string processId, string language) {
            this.GetApproverListAsync(formId, processId, language, null);
        }
        
        /// <remarks/>
        public void GetApproverListAsync(string formId, string processId, string language, object userState) {
            if ((this.GetApproverListOperationCompleted == null)) {
                this.GetApproverListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApproverListOperationCompleted);
            }
            this.InvokeAsync("GetApproverList", new object[] {
                        formId,
                        processId,
                        language}, this.GetApproverListOperationCompleted, userState);
        }
        
        private void OnGetApproverListOperationCompleted(object arg) {
            if ((this.GetApproverListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApproverListCompleted(this, new GetApproverListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetFormFieldValueList([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string processId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string fieldIds, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("GetFormFieldValueList", new object[] {
                        formId,
                        processId,
                        fieldIds,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFormFieldValueListAsync(string formId, string processId, string fieldIds, string language) {
            this.GetFormFieldValueListAsync(formId, processId, fieldIds, language, null);
        }
        
        /// <remarks/>
        public void GetFormFieldValueListAsync(string formId, string processId, string fieldIds, string language, object userState) {
            if ((this.GetFormFieldValueListOperationCompleted == null)) {
                this.GetFormFieldValueListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormFieldValueListOperationCompleted);
            }
            this.InvokeAsync("GetFormFieldValueList", new object[] {
                        formId,
                        processId,
                        fieldIds,
                        language}, this.GetFormFieldValueListOperationCompleted, userState);
        }
        
        private void OnGetFormFieldValueListOperationCompleted(object arg) {
            if ((this.GetFormFieldValueListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormFieldValueListCompleted(this, new GetFormFieldValueListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetUnApprovingLists([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string actionUid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string conditions, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string pageNo, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string pageSize, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("GetUnApprovingLists", new object[] {
                        actionUid,
                        conditions,
                        pageNo,
                        pageSize,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUnApprovingListsAsync(string actionUid, string conditions, string pageNo, string pageSize, string language) {
            this.GetUnApprovingListsAsync(actionUid, conditions, pageNo, pageSize, language, null);
        }
        
        /// <remarks/>
        public void GetUnApprovingListsAsync(string actionUid, string conditions, string pageNo, string pageSize, string language, object userState) {
            if ((this.GetUnApprovingListsOperationCompleted == null)) {
                this.GetUnApprovingListsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnApprovingListsOperationCompleted);
            }
            this.InvokeAsync("GetUnApprovingLists", new object[] {
                        actionUid,
                        conditions,
                        pageNo,
                        pageSize,
                        language}, this.GetUnApprovingListsOperationCompleted, userState);
        }
        
        private void OnGetUnApprovingListsOperationCompleted(object arg) {
            if ((this.GetUnApprovingListsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnApprovingListsCompleted(this, new GetUnApprovingListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetOperationList([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string processId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string actionUid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("GetOperationList", new object[] {
                        formId,
                        processId,
                        actionUid,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOperationListAsync(string formId, string processId, string actionUid, string language) {
            this.GetOperationListAsync(formId, processId, actionUid, language, null);
        }
        
        /// <remarks/>
        public void GetOperationListAsync(string formId, string processId, string actionUid, string language, object userState) {
            if ((this.GetOperationListOperationCompleted == null)) {
                this.GetOperationListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOperationListOperationCompleted);
            }
            this.InvokeAsync("GetOperationList", new object[] {
                        formId,
                        processId,
                        actionUid,
                        language}, this.GetOperationListOperationCompleted, userState);
        }
        
        private void OnGetOperationListOperationCompleted(object arg) {
            if ((this.GetOperationListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOperationListCompleted(this, new GetOperationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetFlowLogList([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string processId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string pageNo, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string pageSize, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("GetFlowLogList", new object[] {
                        formId,
                        processId,
                        pageNo,
                        pageSize,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFlowLogListAsync(string formId, string processId, string pageNo, string pageSize, string language) {
            this.GetFlowLogListAsync(formId, processId, pageNo, pageSize, language, null);
        }
        
        /// <remarks/>
        public void GetFlowLogListAsync(string formId, string processId, string pageNo, string pageSize, string language, object userState) {
            if ((this.GetFlowLogListOperationCompleted == null)) {
                this.GetFlowLogListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFlowLogListOperationCompleted);
            }
            this.InvokeAsync("GetFlowLogList", new object[] {
                        formId,
                        processId,
                        pageNo,
                        pageSize,
                        language}, this.GetFlowLogListOperationCompleted, userState);
        }
        
        private void OnGetFlowLogListOperationCompleted(object arg) {
            if ((this.GetFlowLogListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFlowLogListCompleted(this, new GetFlowLogListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string IsExistProcess([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("IsExistProcess", new object[] {
                        formId,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsExistProcessAsync(string formId, string language) {
            this.IsExistProcessAsync(formId, language, null);
        }
        
        /// <remarks/>
        public void IsExistProcessAsync(string formId, string language, object userState) {
            if ((this.IsExistProcessOperationCompleted == null)) {
                this.IsExistProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsExistProcessOperationCompleted);
            }
            this.InvokeAsync("IsExistProcess", new object[] {
                        formId,
                        language}, this.IsExistProcessOperationCompleted, userState);
        }
        
        private void OnIsExistProcessOperationCompleted(object arg) {
            if ((this.IsExistProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsExistProcessCompleted(this, new IsExistProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetCurrentNodesInfo([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string processId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("GetCurrentNodesInfo", new object[] {
                        formId,
                        processId,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentNodesInfoAsync(string formId, string processId, string language) {
            this.GetCurrentNodesInfoAsync(formId, processId, language, null);
        }
        
        /// <remarks/>
        public void GetCurrentNodesInfoAsync(string formId, string processId, string language, object userState) {
            if ((this.GetCurrentNodesInfoOperationCompleted == null)) {
                this.GetCurrentNodesInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentNodesInfoOperationCompleted);
            }
            this.InvokeAsync("GetCurrentNodesInfo", new object[] {
                        formId,
                        processId,
                        language}, this.GetCurrentNodesInfoOperationCompleted, userState);
        }
        
        private void OnGetCurrentNodesInfoOperationCompleted(object arg) {
            if ((this.GetCurrentNodesInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentNodesInfoCompleted(this, new GetCurrentNodesInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", ResponseNamespace="http://interfaces.lbpmdocking.sys.kmss.landray.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CanApprovalProcess([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string formId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string actionUid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string language) {
            object[] results = this.Invoke("CanApprovalProcess", new object[] {
                        formId,
                        actionUid,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CanApprovalProcessAsync(string formId, string actionUid, string language) {
            this.CanApprovalProcessAsync(formId, actionUid, language, null);
        }
        
        /// <remarks/>
        public void CanApprovalProcessAsync(string formId, string actionUid, string language, object userState) {
            if ((this.CanApprovalProcessOperationCompleted == null)) {
                this.CanApprovalProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCanApprovalProcessOperationCompleted);
            }
            this.InvokeAsync("CanApprovalProcess", new object[] {
                        formId,
                        actionUid,
                        language}, this.CanApprovalProcessOperationCompleted, userState);
        }
        
        private void OnCanApprovalProcessOperationCompleted(object arg) {
            if ((this.CanApprovalProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CanApprovalProcessCompleted(this, new CanApprovalProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetTasksInfoCompletedEventHandler(object sender, GetTasksInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTasksInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTasksInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAuditOptionListCompletedEventHandler(object sender, GetAuditOptionListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuditOptionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuditOptionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetApprovedListCompletedEventHandler(object sender, GetApprovedListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApprovedListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetApprovedListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUnApprovingListCompletedEventHandler(object sender, GetUnApprovingListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnApprovingListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnApprovingListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFlowTemplateListCompletedEventHandler(object sender, GetFlowTemplateListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFlowTemplateListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFlowTemplateListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFormFieldListCompletedEventHandler(object sender, GetFormFieldListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormFieldListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormFieldListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ApproveProcessCompletedEventHandler(object sender, ApproveProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApproveProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApproveProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetApprovedListsCompletedEventHandler(object sender, GetApprovedListsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApprovedListsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetApprovedListsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DeleteProcessCompletedEventHandler(object sender, DeleteProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ValidateProcessCompletedEventHandler(object sender, ValidateProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CreateProcessCompletedEventHandler(object sender, CreateProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFieldAuthInfoCompletedEventHandler(object sender, GetFieldAuthInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldAuthInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldAuthInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetOperationParamCompletedEventHandler(object sender, GetOperationParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOperationParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOperationParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetApproverListCompletedEventHandler(object sender, GetApproverListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApproverListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetApproverListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFormFieldValueListCompletedEventHandler(object sender, GetFormFieldValueListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormFieldValueListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormFieldValueListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUnApprovingListsCompletedEventHandler(object sender, GetUnApprovingListsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnApprovingListsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnApprovingListsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetOperationListCompletedEventHandler(object sender, GetOperationListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOperationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOperationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFlowLogListCompletedEventHandler(object sender, GetFlowLogListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFlowLogListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFlowLogListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IsExistProcessCompletedEventHandler(object sender, IsExistProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsExistProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsExistProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetCurrentNodesInfoCompletedEventHandler(object sender, GetCurrentNodesInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentNodesInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentNodesInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CanApprovalProcessCompletedEventHandler(object sender, CanApprovalProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CanApprovalProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CanApprovalProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591