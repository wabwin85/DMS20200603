/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : TransferLot
 * Created Time: 2015/12/30 16:05:45
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
    /// <summary>
    ///	TransferLot
    /// </summary>
    [Serializable]
    public class TransferLot : BaseModel
    {
        #region Private Members 6

        private Guid _trl_id;
        private Guid _lot_id;
        private Guid _id;
        private double _transferlotqty;
        private Guid? _qrlot_id;
        private string _qrlotnumber;
        private decimal? _unitprice;
        private string _ltm_qrcode;
        private string _ltm_lot;
        private string _tlt_dom;
        private DateTime? _tlt_expireddate;
        private Guid? _tlt_whmid;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public TransferLot()
        {
            _trl_id = Guid.Empty;
            _lot_id = Guid.Empty;
            _id = Guid.Empty;
            _transferlotqty = 0;
            _qrlot_id = null;
            _qrlotnumber = null;
            _unitprice = 0;
            _ltm_qrcode = null;
            _ltm_lot = null;
            _tlt_dom = null;
            _tlt_expireddate = null;
            _tlt_whmid = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties
        public DateTime? ExpiredDate
        {
            get { return _tlt_expireddate; }
            set { _tlt_expireddate = value; }
        }
        public string DOM
        {
            get { return _tlt_dom; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for QrLotNumber", value, value.ToString());

                _tlt_dom = value;
            }
        }
        /// <summary>
        /// 移库单行
        /// </summary>		
        public Guid TrlId
        {
            get { return _trl_id; }
            set { _trl_id = value; }
        }
        public Guid? WhmId
        {
            get { return _tlt_whmid; }
            set { _tlt_whmid = value; }
        }

        /// <summary>
        /// 移动的批次

        /// </summary>		
        public Guid LotId
        {
            get { return _lot_id; }
            set { _lot_id = value; }
        }

        /// <summary>
        /// 移库批次
        /// </summary>		
        public Guid Id
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 批次数量
        /// </summary>		
        public double TransferLotQty
        {
            get { return _transferlotqty; }
            set { _transferlotqty = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? QrlotId
        {
            get { return _qrlot_id; }
            set { _qrlot_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string QrLotNumber
        {
            get { return _qrlotnumber; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for QrLotNumber", value, value.ToString());

                _qrlotnumber = value;
            }
        }

        /// <summary>
        /// 批次号
        /// </summary>	

        public string LTMLot
        {
            get { return _ltm_lot; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for LTMLot", value, value.ToString());

                _ltm_lot = value;
            }
        }
        /// <summary>
        /// 二维码
        /// </summary>	
        public string LTMQRCode
        {
            get { return _ltm_qrcode; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for LTMQRCode", value, value.ToString());

                _ltm_qrcode = value;
            }
        }

        public decimal? UnitPrice
        {
            get { return _unitprice; }
            set { _unitprice = value; }
        }

        #endregion





    }
}
