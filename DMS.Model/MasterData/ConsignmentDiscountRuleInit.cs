/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : ConsignmentDiscountRuleInit
 * Created Time: 2017/3/27 14:03:51
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
    /// <summary>
    ///	ConsignmentDiscountRuleInit
    /// </summary>
    [Serializable]
    public class ConsignmentDiscountRuleInit : BaseModel
    {
        #region Private Members 17

        private Guid _id;
        private string _bu;
        private string _dealersap;
        private string _pctlevel;
        private string _pctlevelcode;
        private string _upn;
        private string _lot;
        private string _qrcode;
        private string _pctnamegroup;
        private string _leftvalue;
        private string _rightvalue;
        private string _discountvalue;
        private string _begindate;
        private string _enddate;
        private string _errmassage;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public ConsignmentDiscountRuleInit()
        {
            _id = Guid.Empty;
            _bu = null;
            _dealersap = null;
            _pctlevel = null;
            _pctlevelcode = null;
            _upn = null;
            _lot = null;
            _qrcode = null;
            _pctnamegroup = null;
            _leftvalue = null;
            _rightvalue = null;
            _discountvalue = null;
            _begindate = null;
            _enddate = null;
            _errmassage = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 
        /// </summary>		
        public Guid Id
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Bu
        {
            get { return _bu; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Bu", value, value.ToString());

                _bu = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Dealersap
        {
            get { return _dealersap; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Dealersap", value, value.ToString());

                _dealersap = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string PctLevel
        {
            get { return _pctlevel; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for PctLevel", value, value.ToString());

                _pctlevel = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string PctLevelCode
        {
            get { return _pctlevelcode; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for PctLevelCode", value, value.ToString());

                _pctlevelcode = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Upn
        {
            get { return _upn; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Upn", value, value.ToString());

                _upn = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Lot
        {
            get { return _lot; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Lot", value, value.ToString());

                _lot = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string QrCode
        {
            get { return _qrcode; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for QrCode", value, value.ToString());

                _qrcode = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string PctNameGroup
        {
            get { return _pctnamegroup; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for PctNameGroup", value, value.ToString());

                _pctnamegroup = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string LeftValue
        {
            get { return _leftvalue; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for LeftValue", value, value.ToString());

                _leftvalue = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string RightValue
        {
            get { return _rightvalue; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for RightValue", value, value.ToString());

                _rightvalue = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string DiscountValue
        {
            get { return _discountvalue; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for DiscountValue", value, value.ToString());

                _discountvalue = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string BeginDate
        {
            get { return _begindate; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for BeginDate", value, value.ToString());

                _begindate = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string EndDate
        {
            get { return _enddate; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for EndDate", value, value.ToString());

                _enddate = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string ErrMassage
        {
            get { return _errmassage; }
            set
            {
                if (value != null && value.Length > 1073741823)
                    throw new ArgumentOutOfRangeException("Invalid value for ErrMassage", value, value.ToString());

                _errmassage = value;
            }
        }




        #endregion





    }
}
