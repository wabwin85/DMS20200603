//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace DMS.Business.EwfService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WfActionSoap", Namespace="http://ns.kayang.com.cn/")]
    public partial class WfAction : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback StartInstanceLocalOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartInstanceXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback WithdrawInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback BackupFormDataOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WfAction() {
            this.Url = global::DMS.Business.Properties.Settings.Default.DMS_Business_EwfService_WfAction;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event StartInstanceLocalCompletedEventHandler StartInstanceLocalCompleted;
        
        /// <remarks/>
        public event StartBatchCompletedEventHandler StartBatchCompleted;
        
        /// <remarks/>
        public event StartInstanceCompletedEventHandler StartInstanceCompleted;
        
        /// <remarks/>
        public event StartInstanceXmlCompletedEventHandler StartInstanceXmlCompleted;
        
        /// <remarks/>
        public event WithdrawInstanceCompletedEventHandler WithdrawInstanceCompleted;
        
        /// <remarks/>
        public event ModifyDataCompletedEventHandler ModifyDataCompleted;
        
        /// <remarks/>
        public event BackupFormDataCompletedEventHandler BackupFormDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ns.kayang.com.cn/StartInstanceLocal", RequestNamespace="http://ns.kayang.com.cn/", ResponseNamespace="http://ns.kayang.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartInstanceLocal(string hrid, string objName, string pkeys, string flowid, string applicantEid, string pwd) {
            object[] results = this.Invoke("StartInstanceLocal", new object[] {
                        hrid,
                        objName,
                        pkeys,
                        flowid,
                        applicantEid,
                        pwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartInstanceLocalAsync(string hrid, string objName, string pkeys, string flowid, string applicantEid, string pwd) {
            this.StartInstanceLocalAsync(hrid, objName, pkeys, flowid, applicantEid, pwd, null);
        }
        
        /// <remarks/>
        public void StartInstanceLocalAsync(string hrid, string objName, string pkeys, string flowid, string applicantEid, string pwd, object userState) {
            if ((this.StartInstanceLocalOperationCompleted == null)) {
                this.StartInstanceLocalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartInstanceLocalOperationCompleted);
            }
            this.InvokeAsync("StartInstanceLocal", new object[] {
                        hrid,
                        objName,
                        pkeys,
                        flowid,
                        applicantEid,
                        pwd}, this.StartInstanceLocalOperationCompleted, userState);
        }
        
        private void OnStartInstanceLocalOperationCompleted(object arg) {
            if ((this.StartInstanceLocalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartInstanceLocalCompleted(this, new StartInstanceLocalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ns.kayang.com.cn/StartBatch", RequestNamespace="http://ns.kayang.com.cn/", ResponseNamespace="http://ns.kayang.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int StartBatch(string HRID, string flowId, string applicantEid, string sp) {
            object[] results = this.Invoke("StartBatch", new object[] {
                        HRID,
                        flowId,
                        applicantEid,
                        sp});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void StartBatchAsync(string HRID, string flowId, string applicantEid, string sp) {
            this.StartBatchAsync(HRID, flowId, applicantEid, sp, null);
        }
        
        /// <remarks/>
        public void StartBatchAsync(string HRID, string flowId, string applicantEid, string sp, object userState) {
            if ((this.StartBatchOperationCompleted == null)) {
                this.StartBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartBatchOperationCompleted);
            }
            this.InvokeAsync("StartBatch", new object[] {
                        HRID,
                        flowId,
                        applicantEid,
                        sp}, this.StartBatchOperationCompleted, userState);
        }
        
        private void OnStartBatchOperationCompleted(object arg) {
            if ((this.StartBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartBatchCompleted(this, new StartBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ns.kayang.com.cn/StartInstance", RequestNamespace="http://ns.kayang.com.cn/", ResponseNamespace="http://ns.kayang.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartInstance(string dataXml, string ignoreAlarm, string pwd) {
            object[] results = this.Invoke("StartInstance", new object[] {
                        dataXml,
                        ignoreAlarm,
                        pwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartInstanceAsync(string dataXml, string ignoreAlarm, string pwd) {
            this.StartInstanceAsync(dataXml, ignoreAlarm, pwd, null);
        }
        
        /// <remarks/>
        public void StartInstanceAsync(string dataXml, string ignoreAlarm, string pwd, object userState) {
            if ((this.StartInstanceOperationCompleted == null)) {
                this.StartInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartInstanceOperationCompleted);
            }
            this.InvokeAsync("StartInstance", new object[] {
                        dataXml,
                        ignoreAlarm,
                        pwd}, this.StartInstanceOperationCompleted, userState);
        }
        
        private void OnStartInstanceOperationCompleted(object arg) {
            if ((this.StartInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartInstanceCompleted(this, new StartInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ns.kayang.com.cn/StartInstanceXml", RequestNamespace="http://ns.kayang.com.cn/", ResponseNamespace="http://ns.kayang.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartInstanceXml(string dataXml, string pwd) {
            object[] results = this.Invoke("StartInstanceXml", new object[] {
                        dataXml,
                        pwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartInstanceXmlAsync(string dataXml, string pwd) {
            this.StartInstanceXmlAsync(dataXml, pwd, null);
        }
        
        /// <remarks/>
        public void StartInstanceXmlAsync(string dataXml, string pwd, object userState) {
            if ((this.StartInstanceXmlOperationCompleted == null)) {
                this.StartInstanceXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartInstanceXmlOperationCompleted);
            }
            this.InvokeAsync("StartInstanceXml", new object[] {
                        dataXml,
                        pwd}, this.StartInstanceXmlOperationCompleted, userState);
        }
        
        private void OnStartInstanceXmlOperationCompleted(object arg) {
            if ((this.StartInstanceXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartInstanceXmlCompleted(this, new StartInstanceXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ns.kayang.com.cn/WithdrawInstance", RequestNamespace="http://ns.kayang.com.cn/", ResponseNamespace="http://ns.kayang.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WithdrawInstance(int flowID, string instanceID, string userEid, string pwd) {
            object[] results = this.Invoke("WithdrawInstance", new object[] {
                        flowID,
                        instanceID,
                        userEid,
                        pwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WithdrawInstanceAsync(int flowID, string instanceID, string userEid, string pwd) {
            this.WithdrawInstanceAsync(flowID, instanceID, userEid, pwd, null);
        }
        
        /// <remarks/>
        public void WithdrawInstanceAsync(int flowID, string instanceID, string userEid, string pwd, object userState) {
            if ((this.WithdrawInstanceOperationCompleted == null)) {
                this.WithdrawInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWithdrawInstanceOperationCompleted);
            }
            this.InvokeAsync("WithdrawInstance", new object[] {
                        flowID,
                        instanceID,
                        userEid,
                        pwd}, this.WithdrawInstanceOperationCompleted, userState);
        }
        
        private void OnWithdrawInstanceOperationCompleted(object arg) {
            if ((this.WithdrawInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WithdrawInstanceCompleted(this, new WithdrawInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ns.kayang.com.cn/ModifyData", RequestNamespace="http://ns.kayang.com.cn/", ResponseNamespace="http://ns.kayang.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ModifyData(string dataXml, string ignoreAlarm, string pwd) {
            object[] results = this.Invoke("ModifyData", new object[] {
                        dataXml,
                        ignoreAlarm,
                        pwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyDataAsync(string dataXml, string ignoreAlarm, string pwd) {
            this.ModifyDataAsync(dataXml, ignoreAlarm, pwd, null);
        }
        
        /// <remarks/>
        public void ModifyDataAsync(string dataXml, string ignoreAlarm, string pwd, object userState) {
            if ((this.ModifyDataOperationCompleted == null)) {
                this.ModifyDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyDataOperationCompleted);
            }
            this.InvokeAsync("ModifyData", new object[] {
                        dataXml,
                        ignoreAlarm,
                        pwd}, this.ModifyDataOperationCompleted, userState);
        }
        
        private void OnModifyDataOperationCompleted(object arg) {
            if ((this.ModifyDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyDataCompleted(this, new ModifyDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ns.kayang.com.cn/BackupFormData", RequestNamespace="http://ns.kayang.com.cn/", ResponseNamespace="http://ns.kayang.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BackupFormData(int flowId, string instanceID, string userEid, string pwd) {
            object[] results = this.Invoke("BackupFormData", new object[] {
                        flowId,
                        instanceID,
                        userEid,
                        pwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BackupFormDataAsync(int flowId, string instanceID, string userEid, string pwd) {
            this.BackupFormDataAsync(flowId, instanceID, userEid, pwd, null);
        }
        
        /// <remarks/>
        public void BackupFormDataAsync(int flowId, string instanceID, string userEid, string pwd, object userState) {
            if ((this.BackupFormDataOperationCompleted == null)) {
                this.BackupFormDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackupFormDataOperationCompleted);
            }
            this.InvokeAsync("BackupFormData", new object[] {
                        flowId,
                        instanceID,
                        userEid,
                        pwd}, this.BackupFormDataOperationCompleted, userState);
        }
        
        private void OnBackupFormDataOperationCompleted(object arg) {
            if ((this.BackupFormDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BackupFormDataCompleted(this, new BackupFormDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void StartInstanceLocalCompletedEventHandler(object sender, StartInstanceLocalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartInstanceLocalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartInstanceLocalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void StartBatchCompletedEventHandler(object sender, StartBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void StartInstanceCompletedEventHandler(object sender, StartInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void StartInstanceXmlCompletedEventHandler(object sender, StartInstanceXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartInstanceXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartInstanceXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void WithdrawInstanceCompletedEventHandler(object sender, WithdrawInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WithdrawInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WithdrawInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ModifyDataCompletedEventHandler(object sender, ModifyDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void BackupFormDataCompletedEventHandler(object sender, BackupFormDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BackupFormDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BackupFormDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591