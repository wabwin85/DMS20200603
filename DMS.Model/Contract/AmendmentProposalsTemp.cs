/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : AmendmentProposalsTemp
 * Created Time: 2018/3/25 14:16:34
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	AmendmentProposalsTemp
	/// </summary>
	[Serializable]
	public class AmendmentProposalsTemp : BaseModel
	{
		#region Private Members 11
		
		private Guid _tempid; 
		private Guid _contractid; 
		private string _payment; 
		private string _creditterm; 
		private int? _creditlimit; 
		private string _payterm; 
		private int? _isdeposit; 
		private int? _deposit; 
		private string _inform; 
		private string _informother; 
		private string _comment;
        private string _attachment;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public AmendmentProposalsTemp()
		{
			_tempid = Guid.Empty; 
			_contractid = Guid.Empty; 
			_payment = null; 
			_creditterm = null; 
			_creditlimit = null;
			_payterm = null; 
			_isdeposit = null;
			_deposit = null;
			_inform = null; 
			_informother = null; 
			_comment = null;
            _attachment = null;

        }
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid TempId
		{
			get { return _tempid; }
			set { _tempid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid ContractId
		{
			get { return _contractid; }
			set { _contractid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Payment
		{
			get { return _payment; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Payment", value, value.ToString());
				
				_payment = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CreditTerm
		{
			get { return _creditterm; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for CreditTerm", value, value.ToString());
				
				_creditterm = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? CreditLimit
		{
			get { return _creditlimit; }
			set { _creditlimit = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string PayTerm
		{
			get { return _payterm; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for PayTerm", value, value.ToString());
				
				_payterm = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? IsDeposit
		{
			get { return _isdeposit; }
			set { _isdeposit = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? Deposit
		{
			get { return _deposit; }
			set { _deposit = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Inform
		{
			get { return _inform; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Inform", value, value.ToString());
				
				_inform = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string InformOther
		{
			get { return _informother; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for InformOther", value, value.ToString());
				
				_informother = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Comment
		{
			get { return _comment; }
			set	
			{
				if( value!= null && value.Length > 300)
					throw new ArgumentOutOfRangeException("Invalid value for Comment", value, value.ToString());
				
				_comment = value;
			}
		}

        /// <summary>
        /// ºÏÍ¬¸½¼Ó
        /// </summary>
        public string Attachment
        {
            get { return _attachment; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Attachment", value, value.ToString());

                _attachment = value;
            }
        }

        #endregion





    }
}
