/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : DpStatementHeader
 * Created Time: 2015/12/7 10:32:28
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	DpStatementHeader
	/// </summary>
	[Serializable]
	public class DpStatementHeader : BaseModel
	{
		#region Private Members 10
		
		private Guid _id; 
		private Guid _dma_id; 
		private string _year; 
		private string _month; 
		private string _status; 
		private string _currency; 
		private Guid? _updateuser; 
		private DateTime? _updatedate; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public DpStatementHeader()
		{
			_id = Guid.Empty; 
			_dma_id = Guid.Empty; 
			_year = null; 
			_month = null; 
			_status = null; 
			_currency = null; 
			_updateuser = null;
			_updatedate = null;
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid DmaId
		{
			get { return _dma_id; }
			set { _dma_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Year
		{
			get { return _year; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Year", value, value.ToString());
				
				_year = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Month
		{
			get { return _month; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Month", value, value.ToString());
				
				_month = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_status = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Currency
		{
			get { return _currency; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Currency", value, value.ToString());
				
				_currency = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? UpdateUser
		{
			get { return _updateuser; }
			set { _updateuser = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? UpdateDate
		{
			get { return _updatedate; }
			set { _updatedate = value; }
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
