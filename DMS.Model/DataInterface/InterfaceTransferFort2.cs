/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : InterfaceTransferFort2
 * Created Time: 2016/12/10 10:54:57
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	InterfaceTransferFort2
	/// </summary>
	[Serializable]
	public class InterfaceTransferFort2 
	{
		#region Private Members 14
		
		private Guid _id; 
		private string _dealer_sapcode; 
		private string _remark; 
		private string _transferfrom; 
		private string _transferto; 
		private string _articlenumber; 
		private string _lotnumber; 
		private decimal? _lottransferqty; 
		private string _qrcode; 
		private int _linenbr; 
		private string _filename; 
		private DateTime _importdate; 
		private string _clientid; 
		private string _batchnbr; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public InterfaceTransferFort2()
		{
			_id = Guid.Empty; 
			_dealer_sapcode = null; 
			_remark = null; 
			_transferfrom = null; 
			_transferto = null; 
			_articlenumber = null; 
			_lotnumber = null; 
			_lottransferqty = null;
			_qrcode = null; 
			_linenbr = 0; 
			_filename = null; 
			_importdate = new DateTime(); 
			_clientid = null; 
			_batchnbr = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string DealerSapCode
		{
			get { return _dealer_sapcode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for DealerSapCode", value, value.ToString());
				
				_dealer_sapcode = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_remark = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string TransferFrom
		{
			get { return _transferfrom; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for TransferFrom", value, value.ToString());
				
				_transferfrom = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string TransferTo
		{
			get { return _transferto; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for TransferTo", value, value.ToString());
				
				_transferto = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ArticleNumber
		{
			get { return _articlenumber; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ArticleNumber", value, value.ToString());
				
				_articlenumber = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string LotNumber
		{
			get { return _lotnumber; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for LotNumber", value, value.ToString());
				
				_lotnumber = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public decimal? LotTransferQty
		{
			get { return _lottransferqty; }
			set { _lottransferqty = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string QrCode
		{
			get { return _qrcode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for QrCode", value, value.ToString());
				
				_qrcode = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int LineNbr
		{
			get { return _linenbr; }
			set { _linenbr = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string FileName
		{
			get { return _filename; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for FileName", value, value.ToString());
				
				_filename = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime ImportDate
		{
			get { return _importdate; }
			set { _importdate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Clientid
		{
			get { return _clientid; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Clientid", value, value.ToString());
				
				_clientid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string BatchNbr
		{
			get { return _batchnbr; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for BatchNbr", value, value.ToString());
				
				_batchnbr = value;
			}
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
