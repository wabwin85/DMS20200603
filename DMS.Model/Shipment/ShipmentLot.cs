/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : ShipmentLot
 * Created Time: 2016/1/4 15:12:31
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
    /// <summary>
    ///	ShipmentLot
    /// </summary>
    [Serializable]
    public class ShipmentLot : BaseModel
    {
        #region Private Members 15

        private Guid _spl_id;
        private double _lotshippedqty;
        private Guid _lot_id;
        private Guid _id;
        private Guid _whm_id;
        private decimal? _unitprice;
        private string _adjtype;
        private string _adjreason;
        private string _adjaction;
        private DateTime? _inputtime;
        private DateTime? _shipmentdate;
        private string _remark;
        private Guid? _cah_id;
        private Guid? _qrlot_id;
        private string _qrlotnumber;
        private string _lot;
        private string _qrcode;
        private DateTime? _expireddate;
        private string _dom;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public ShipmentLot()
        {
            _spl_id = Guid.Empty;
            _lotshippedqty = 0;
            _lot_id = Guid.Empty;
            _id = Guid.Empty;
            _whm_id = Guid.Empty;
            _unitprice = null;
            _adjtype = null;
            _adjreason = null;
            _adjaction = null;
            _inputtime = null;
            _shipmentdate = null;
            _remark = null;
            _cah_id = null;
            _qrlot_id = null;
            _qrlotnumber = null;
            _lot = null;
            _qrcode = null;
            _expireddate = null;
            _dom = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 发货单行
        /// </summary>		
        public Guid SplId
        {
            get { return _spl_id; }
            set { _spl_id = value; }
        }

        /// <summary>
        /// 数量
        /// </summary>		
        public double LotShippedQty
        {
            get { return _lotshippedqty; }
            set { _lotshippedqty = value; }
        }

        /// <summary>
        /// 批次
        /// </summary>		
        public Guid LotId
        {
            get { return _lot_id; }
            set { _lot_id = value; }
        }

        /// <summary>
        /// 批次
        /// </summary>		
        public Guid Id
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 仓库
        /// </summary>		
        public Guid WhmId
        {
            get { return _whm_id; }
            set { _whm_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public decimal? UnitPrice
        {
            get { return _unitprice; }
            set { _unitprice = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string AdjType
        {
            get { return _adjtype; }
            set
            {
                if (value != null && value.Length > 1000)
                    throw new ArgumentOutOfRangeException("Invalid value for AdjType", value, value.ToString());

                _adjtype = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string AdjReason
        {
            get { return _adjreason; }
            set
            {
                if (value != null && value.Length > 1000)
                    throw new ArgumentOutOfRangeException("Invalid value for AdjReason", value, value.ToString());

                _adjreason = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string AdjAction
        {
            get { return _adjaction; }
            set
            {
                if (value != null && value.Length > 1000)
                    throw new ArgumentOutOfRangeException("Invalid value for AdjAction", value, value.ToString());

                _adjaction = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime? InputTime
        {
            get { return _inputtime; }
            set { _inputtime = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime? ShipmentDate
        {
            get { return _shipmentdate; }
            set { _shipmentdate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());

                _remark = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? CahId
        {
            get { return _cah_id; }
            set { _cah_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? QrlotId
        {
            get { return _qrlot_id; }
            set { _qrlot_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string QrLotNumber
        {
            get { return _qrlotnumber; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for QrLotNumber", value, value.ToString());

                _qrlotnumber = value;
            }
        }

        public string Lot
        {
            get { return _lot; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Lot", value, value.ToString());

                _lot = value;
            }
        }

        public string QRCode
        {
            get { return _qrcode; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for QRCode", value, value.ToString());

                _qrcode = value;
            }
        }

        public DateTime? ExpiredDate
        {
            get { return _expireddate; }
            set { _expireddate = value; }
        }

        public string DOM
        {
            get { return _dom; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for DOM", value, value.ToString());

                _dom = value;
            }
        }
        #endregion





    }
}
