/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : ProPolicyFactorUi
 * Created Time: 2015/11/19 15:08:02
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	ProPolicyFactorUi
	/// </summary>
	[Serializable]
	public class ProPolicyFactorUi : BaseModel
	{
		#region Private Members 13
		
		private int? _policyfactorid; 
		private int? _policyid; 
		private int? _factid; 
		private string _factdesc; 
		private string _datatype; 
		private string _facttype; 
		private string _factvalue; 
		private string _createby; 
		private DateTime? _createtime; 
		private string _modifyby; 
		private DateTime? _modifydate; 
		private string _remark1; 
		private string _curruser; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public ProPolicyFactorUi()
		{
			_policyfactorid = null; 
			_policyid = null;
			_factid = null;
			_factdesc = null; 
			_datatype = null; 
			_facttype = null; 
			_factvalue = null; 
			_createby = null; 
			_createtime = null;
			_modifyby = null; 
			_modifydate = null;
			_remark1 = null; 
			_curruser = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public int? PolicyFactorId
		{
			get { return _policyfactorid; }
			set { _policyfactorid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? PolicyId
		{
			get { return _policyid; }
			set { _policyid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? FactId
		{
			get { return _factid; }
			set { _factid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string FactDesc
		{
			get { return _factdesc; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for FactDesc", value, value.ToString());
				
				_factdesc = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string DataType
		{
			get { return _datatype; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for DataType", value, value.ToString());
				
				_datatype = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string FactType
		{
			get { return _facttype; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for FactType", value, value.ToString());
				
				_facttype = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string FactValue
		{
			get { return _factvalue; }
			set	
			{
				if( value!= null && value.Length > 1073741823)
					throw new ArgumentOutOfRangeException("Invalid value for FactValue", value, value.ToString());
				
				_factvalue = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CreateBy
		{
			get { return _createby; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for CreateBy", value, value.ToString());
				
				_createby = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateTime
		{
			get { return _createtime; }
			set { _createtime = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ModifyBy
		{
			get { return _modifyby; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ModifyBy", value, value.ToString());
				
				_modifyby = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? ModifyDate
		{
			get { return _modifydate; }
			set { _modifydate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Remark1
		{
			get { return _remark1; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Remark1", value, value.ToString());
				
				_remark1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CurrUser
		{
			get { return _curruser; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for CurrUser", value, value.ToString());
				
				_curruser = value;
			}
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
