/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : ContractTermination
 * Created Time: 2013/12/16 12:59:25
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	ContractTermination
	/// </summary>
	[Serializable]
	public class ContractTermination
	{
        #region Private Members 76

        private Guid _cte_id;
        private Guid _cte_cm_id;
        private Guid _cte_dma_id;
        private string _cte_division;
        private int? _cte_markettype;
        private string _cte_dealer_name;
        private DateTime? _cte_agreement_expirationdate;
        private DateTime? _cte_termination_effectivedate;
        private string _cte_terminationstatus;
        private string _cte_terminationsreasons;
        private string _cte_terminationsreasonsremark;
        private bool? _cte_pendtender;
        private string _cte_pendtenderremark;
        private string _cte_rebate;
        private decimal? _cte_rebateamount;
        private string _cte_promotion;
        private decimal? _cte_promotionamount;
        private string _cte_complaint;
        private decimal? _cte_complaintamount;
        private string _cte_termretn;
        private decimal? _cte_termretnamount;
        private string _cte_termretnremark;
        private string _cte_scarletletter;
        private string _cte_scarletletterremark;
        private bool? _cte_disputemoney;
        private decimal? _cte_disputemoneyamount;
        private string _cte_disputemoneyremark;
        private decimal? _cte_currentar;
        private string _cte_currentarremark;
        private bool? _cte_cashdeposit;
        private decimal? _cte_cashdepositamount;
        private string _cte_bguarantee;
        private decimal? _cte_bguaranteeamount;
        private string _cte_cguarantee;
        private decimal? _cte_cguaranteeamount;
        private bool? _cte_inventory;
        private decimal? _cte_inventoryamount;
        private decimal? _cte_estimatedar;
        private decimal? _cte_estimatedarwirte;
        private string _cte_paymentplan;
        private string _cte_takeover;
        private string _cte_takeovertype;
        private bool? _cte_takeovernew;
        private bool? _cte_timeline_hasnotified;
        private string _cte_timeline_whennotify;
        private string _cte_timeline_whensettlement;
        private string _cte_timeline_whenhandover;
        private bool? _cte_hascommunications;
        private bool? _cte_hassettlementproposals;
        private bool? _cte_hasbusinesshandover;
        private string _cte_businesshandover_specify;
        private bool? _cte_hasiafpreparations;
        private string _cte_rsm_printname;
        private DateTime? _cte_rsm_date;
        private string _cte_ncm_printname;
        private DateTime? _cte_ncm_date;
        private string _cte_nsm_printname;
        private DateTime? _cte_nsm_date;
        private string _cte_ncmforpart2_printname;
        private DateTime? _cte_ncmforpart2_date;
        private string _cte_drm_printname;
        private DateTime? _cte_drm_date;
        private string _cte_fc_printname;
        private DateTime? _cte_fc_date;
        private string _cte_cd_printname;
        private DateTime? _cte_cd_date;
        private string _cte_vpf_printname;
        private DateTime? _cte_vpf_date;
        private string _cte_vpap_printname;
        private DateTime? _cte_vpap_date;
        private string _cte_status;
        private string _cte_type;
        private DateTime? _cte_create_date;
        private Guid? _cte_create_user;
        private Guid? _cte_update_user;
        private DateTime? _cte_update_date;
        private string _cte_subdepid;
        private string _cte_subdepname;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public ContractTermination()
        {
            _cte_id = Guid.Empty;
            _cte_cm_id = Guid.Empty;
            _cte_dma_id = Guid.Empty;
            _cte_division = null;
            _cte_markettype = null;
            _cte_dealer_name = null;
            _cte_agreement_expirationdate = null;
            _cte_termination_effectivedate = null;
            _cte_terminationstatus = null;
            _cte_terminationsreasons = null;
            _cte_terminationsreasonsremark = null;
            _cte_pendtender = null;
            _cte_pendtenderremark = null;
            _cte_rebate = null;
            _cte_rebateamount = null;
            _cte_promotion = null;
            _cte_promotionamount = null;
            _cte_complaint = null;
            _cte_complaintamount = null;
            _cte_termretn = null;
            _cte_termretnamount = null;
            _cte_termretnremark = null;
            _cte_scarletletter = null;
            _cte_scarletletterremark = null;
            _cte_disputemoney = null;
            _cte_disputemoneyamount = null;
            _cte_disputemoneyremark = null;
            _cte_currentar = null;
            _cte_currentarremark = null;
            _cte_cashdeposit = null;
            _cte_cashdepositamount = null;
            _cte_bguarantee = null;
            _cte_bguaranteeamount = null;
            _cte_cguarantee = null;
            _cte_cguaranteeamount = null;
            _cte_inventory = null;
            _cte_inventoryamount = null;
            _cte_estimatedar = null;
            _cte_estimatedarwirte = null;
            _cte_paymentplan = null;
            _cte_takeover = null;
            _cte_takeovertype = null;
            _cte_takeovernew = null;
            _cte_timeline_hasnotified = null;
            _cte_timeline_whennotify = null;
            _cte_timeline_whensettlement = null;
            _cte_timeline_whenhandover = null;
            _cte_hascommunications = null;
            _cte_hassettlementproposals = null;
            _cte_hasbusinesshandover = null;
            _cte_businesshandover_specify = null;
            _cte_hasiafpreparations = null;
            _cte_rsm_printname = null;
            _cte_rsm_date = null;
            _cte_ncm_printname = null;
            _cte_ncm_date = null;
            _cte_nsm_printname = null;
            _cte_nsm_date = null;
            _cte_ncmforpart2_printname = null;
            _cte_ncmforpart2_date = null;
            _cte_drm_printname = null;
            _cte_drm_date = null;
            _cte_fc_printname = null;
            _cte_fc_date = null;
            _cte_cd_printname = null;
            _cte_cd_date = null;
            _cte_vpf_printname = null;
            _cte_vpf_date = null;
            _cte_vpap_printname = null;
            _cte_vpap_date = null;
            _cte_status = null;
            _cte_type = null;
            _cte_create_date = null;
            _cte_create_user = null;
            _cte_update_user = null;
            _cte_update_date = null;
            _cte_subdepid = null;
            _cte_subdepname = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// CTE_ID
        /// </summary>		
        public Guid CteId
        {
            get { return _cte_id; }
            set { _cte_id = value; }
        }

        /// <summary>
        /// CTE_CM_ID
        /// </summary>		
        public Guid CteCmId
        {
            get { return _cte_cm_id; }
            set { _cte_cm_id = value; }
        }

        /// <summary>
        /// CTE_DMA_ID
        /// </summary>		
        public Guid CteDmaId
        {
            get { return _cte_dma_id; }
            set { _cte_dma_id = value; }
        }

        /// <summary>
        /// CTE_Division
        /// </summary>		
        public string CteDivision
        {
            get { return _cte_division; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteDivision", value, value.ToString());

                _cte_division = value;
            }
        }

        /// <summary>
        /// CTE_MarketType
        /// </summary>		
        public int? CteMarketType
        {
            get { return _cte_markettype; }
            set { _cte_markettype = value; }
        }

        /// <summary>
        /// CTE_Dealer_Name
        /// </summary>		
        public string CteDealerName
        {
            get { return _cte_dealer_name; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for CteDealerName", value, value.ToString());

                _cte_dealer_name = value;
            }
        }

        /// <summary>
        /// CTE_Agreement_ExpirationDate
        /// </summary>		
        public DateTime? CteAgreementExpirationDate
        {
            get { return _cte_agreement_expirationdate; }
            set { _cte_agreement_expirationdate = value; }
        }

        /// <summary>
        /// CTE_Termination_EffectiveDate
        /// </summary>		
        public DateTime? CteTerminationEffectiveDate
        {
            get { return _cte_termination_effectivedate; }
            set { _cte_termination_effectivedate = value; }
        }

        /// <summary>
        /// 协议终止状态
        /// </summary>		
        public string CteTerminationStatus
        {
            get { return _cte_terminationstatus; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteTerminationStatus", value, value.ToString());

                _cte_terminationstatus = value;
            }
        }

        /// <summary>
        /// CTE_TerminationsReasons
        /// </summary>		
        public string CteTerminationsReasons
        {
            get { return _cte_terminationsreasons; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for CteTerminationsReasons", value, value.ToString());

                _cte_terminationsreasons = value;
            }
        }

        /// <summary>
        /// CTE_TerminationsReasonsRemark
        /// </summary>		
        public string CteTerminationsReasonsRemark
        {
            get { return _cte_terminationsreasonsremark; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for CteTerminationsReasonsRemark", value, value.ToString());

                _cte_terminationsreasonsremark = value;
            }
        }

        /// <summary>
        /// 1:是；0:否
        /// </summary>		
        public bool? CtePendTender
        {
            get { return _cte_pendtender; }
            set { _cte_pendtender = value; }
        }

        /// <summary>
        /// CTE_PendTenderRemark
        /// </summary>		
        public string CtePendTenderRemark
        {
            get { return _cte_pendtenderremark; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for CtePendTenderRemark", value, value.ToString());

                _cte_pendtenderremark = value;
            }
        }

        /// <summary>
        /// 返利
        /// </summary>		
        public string CteRebate
        {
            get { return _cte_rebate; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteRebate", value, value.ToString());

                _cte_rebate = value;
            }
        }

        /// <summary>
        /// 返利金额
        /// </summary>		
        public decimal? CteRebateAmount
        {
            get { return _cte_rebateamount; }
            set { _cte_rebateamount = value; }
        }

        /// <summary>
        /// 促销
        /// </summary>		
        public string CtePromotion
        {
            get { return _cte_promotion; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CtePromotion", value, value.ToString());

                _cte_promotion = value;
            }
        }

        /// <summary>
        /// 促销金额
        /// </summary>		
        public decimal? CtePromotionAmount
        {
            get { return _cte_promotionamount; }
            set { _cte_promotionamount = value; }
        }

        /// <summary>
        /// 投诉退货
        /// </summary>		
        public string CteComplaint
        {
            get { return _cte_complaint; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteComplaint", value, value.ToString());

                _cte_complaint = value;
            }
        }

        /// <summary>
        /// 投诉退货金额
        /// </summary>		
        public decimal? CteComplaintAmount
        {
            get { return _cte_complaintamount; }
            set { _cte_complaintamount = value; }
        }

        /// <summary>
        /// 终止是否有退货
        /// </summary>		
        public string CteTermRetn
        {
            get { return _cte_termretn; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteTermRetn", value, value.ToString());

                _cte_termretn = value;
            }
        }

        /// <summary>
        /// 退货金额
        /// </summary>		
        public decimal? CteTermRetnAmount
        {
            get { return _cte_termretnamount; }
            set { _cte_termretnamount = value; }
        }

        /// <summary>
        /// 退货原因
        /// </summary>		
        public string CteTermRetnRemark
        {
            get { return _cte_termretnremark; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for CteTermRetnRemark", value, value.ToString());

                _cte_termretnremark = value;
            }
        }

        /// <summary>
        /// 红字通知单
        /// </summary>		
        public string CteScarletLetter
        {
            get { return _cte_scarletletter; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteScarletLetter", value, value.ToString());

                _cte_scarletletter = value;
            }
        }

        /// <summary>
        /// 原因
        /// </summary>		
        public string CteScarletLetterRemark
        {
            get { return _cte_scarletletterremark; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for CteScarletLetterRemark", value, value.ToString());

                _cte_scarletletterremark = value;
            }
        }

        /// <summary>
        /// 是否存在争议款项
        /// </summary>		
        public bool? CteDisputeMoney
        {
            get { return _cte_disputemoney; }
            set { _cte_disputemoney = value; }
        }

        /// <summary>
        /// 争议款项金额
        /// </summary>		
        public decimal? CteDisputeMoneyAmount
        {
            get { return _cte_disputemoneyamount; }
            set { _cte_disputemoneyamount = value; }
        }

        /// <summary>
        /// 争议原因
        /// </summary>		
        public string CteDisputeMoneyRemark
        {
            get { return _cte_disputemoneyremark; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for CteDisputeMoneyRemark", value, value.ToString());

                _cte_disputemoneyremark = value;
            }
        }

        /// <summary>
        ///  Current A/R balance of the dealer 
        /// </summary>		
        public decimal? CteCurrentar
        {
            get { return _cte_currentar; }
            set { _cte_currentar = value; }
        }

        /// <summary>
        /// CTE_CurrentARRemark
        /// </summary>		
        public string CteCurrentarRemark
        {
            get { return _cte_currentarremark; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for CteCurrentarRemark", value, value.ToString());

                _cte_currentarremark = value;
            }
        }

        /// <summary>
        /// CTE_CashDeposit
        /// </summary>		
        public bool? CteCashDeposit
        {
            get { return _cte_cashdeposit; }
            set { _cte_cashdeposit = value; }
        }

        /// <summary>
        /// CTE_CashDepositAmount
        /// </summary>		
        public decimal? CteCashDepositAmount
        {
            get { return _cte_cashdepositamount; }
            set { _cte_cashdepositamount = value; }
        }

        /// <summary>
        /// CTE_BGuarantee
        /// </summary>		
        public string CteBGuarantee
        {
            get { return _cte_bguarantee; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteBGuarantee", value, value.ToString());

                _cte_bguarantee = value;
            }
        }

        /// <summary>
        /// CTE_BGuaranteeAmount
        /// </summary>		
        public decimal? CteBGuaranteeAmount
        {
            get { return _cte_bguaranteeamount; }
            set { _cte_bguaranteeamount = value; }
        }

        /// <summary>
        /// CTE_CGuarantee
        /// </summary>		
        public string CteCGuarantee
        {
            get { return _cte_cguarantee; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteCGuarantee", value, value.ToString());

                _cte_cguarantee = value;
            }
        }

        /// <summary>
        /// CTE_CGuaranteeAmount
        /// </summary>		
        public decimal? CteCGuaranteeAmount
        {
            get { return _cte_cguaranteeamount; }
            set { _cte_cguaranteeamount = value; }
        }

        /// <summary>
        /// 缺货
        /// </summary>		
        public bool? CteInventory
        {
            get { return _cte_inventory; }
            set { _cte_inventory = value; }
        }

        /// <summary>
        /// 缺货金额
        /// </summary>		
        public decimal? CteInventoryAmount
        {
            get { return _cte_inventoryamount; }
            set { _cte_inventoryamount = value; }
        }

        /// <summary>
        /// Estimated A/R balance after settlement 
        /// </summary>		
        public decimal? CteEstimatedar
        {
            get { return _cte_estimatedar; }
            set { _cte_estimatedar = value; }
        }

        /// <summary>
        /// CTE_EstimatedARWirte
        /// </summary>		
        public decimal? CteEstimatedarWirte
        {
            get { return _cte_estimatedarwirte; }
            set { _cte_estimatedarwirte = value; }
        }

        /// <summary>
        /// CTE_PaymentPlan
        /// </summary>		
        public string CtePaymentPlan
        {
            get { return _cte_paymentplan; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for CtePaymentPlan", value, value.ToString());

                _cte_paymentplan = value;
            }
        }

        /// <summary>
        /// CTE_TakeOver
        /// </summary>		
        public string CteTakeOver
        {
            get { return _cte_takeover; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for CteTakeOver", value, value.ToString());

                _cte_takeover = value;
            }
        }

        /// <summary>
        /// CTE_TakeOverType
        /// </summary>		
        public string CteTakeOverType
        {
            get { return _cte_takeovertype; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for CteTakeOverType", value, value.ToString());

                _cte_takeovertype = value;
            }
        }

        /// <summary>
        /// CTE_TakeOverNew
        /// </summary>		
        public bool? CteTakeOverNew
        {
            get { return _cte_takeovernew; }
            set { _cte_takeovernew = value; }
        }

        /// <summary>
        /// CTE_Timeline_HasNotified
        /// </summary>		
        public bool? CteTimelineHasNotified
        {
            get { return _cte_timeline_hasnotified; }
            set { _cte_timeline_hasnotified = value; }
        }

        /// <summary>
        /// CTE_Timeline_WhenNotify
        /// </summary>		
        public string CteTimelineWhenNotify
        {
            get { return _cte_timeline_whennotify; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteTimelineWhenNotify", value, value.ToString());

                _cte_timeline_whennotify = value;
            }
        }

        /// <summary>
        /// CTE_Timeline_WhenSettlement
        /// </summary>		
        public string CteTimelineWhenSettlement
        {
            get { return _cte_timeline_whensettlement; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteTimelineWhenSettlement", value, value.ToString());

                _cte_timeline_whensettlement = value;
            }
        }

        /// <summary>
        /// CTE_Timeline_WhenHandover
        /// </summary>		
        public string CteTimelineWhenHandover
        {
            get { return _cte_timeline_whenhandover; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteTimelineWhenHandover", value, value.ToString());

                _cte_timeline_whenhandover = value;
            }
        }

        /// <summary>
        /// CTE_Communications
        /// </summary>		
        public bool? CteHasCommunications
        {
            get { return _cte_hascommunications; }
            set { _cte_hascommunications = value; }
        }

        /// <summary>
        /// CTE_SettlementProposals
        /// </summary>		
        public bool? CteHasSettlementProposals
        {
            get { return _cte_hassettlementproposals; }
            set { _cte_hassettlementproposals = value; }
        }

        /// <summary>
        /// CTE_BusinessHandover
        /// </summary>		
        public bool? CteHasBusinessHandover
        {
            get { return _cte_hasbusinesshandover; }
            set { _cte_hasbusinesshandover = value; }
        }

        /// <summary>
        /// CTE_BusinessHandover_Specify
        /// </summary>		
        public string CteBusinessHandoverSpecify
        {
            get { return _cte_businesshandover_specify; }
            set
            {
                if (value != null && value.Length > 1000)
                    throw new ArgumentOutOfRangeException("Invalid value for CteBusinessHandoverSpecify", value, value.ToString());

                _cte_businesshandover_specify = value;
            }
        }

        /// <summary>
        /// CTE_IAFPreparations
        /// </summary>		
        public bool? CteHasiafPreparations
        {
            get { return _cte_hasiafpreparations; }
            set { _cte_hasiafpreparations = value; }
        }

        /// <summary>
        /// CTE_RSM_PrintName
        /// </summary>		
        public string CteRsmPrintName
        {
            get { return _cte_rsm_printname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteRsmPrintName", value, value.ToString());

                _cte_rsm_printname = value;
            }
        }

        /// <summary>
        /// CTE_RSM_Date
        /// </summary>		
        public DateTime? CteRsmDate
        {
            get { return _cte_rsm_date; }
            set { _cte_rsm_date = value; }
        }

        /// <summary>
        /// CTE_NCM_PrintName
        /// </summary>		
        public string CteNcmPrintName
        {
            get { return _cte_ncm_printname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteNcmPrintName", value, value.ToString());

                _cte_ncm_printname = value;
            }
        }

        /// <summary>
        /// CTE_NCM_Date
        /// </summary>		
        public DateTime? CteNcmDate
        {
            get { return _cte_ncm_date; }
            set { _cte_ncm_date = value; }
        }

        /// <summary>
        /// CTE_NSM_PrintName
        /// </summary>		
        public string CteNsmPrintName
        {
            get { return _cte_nsm_printname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteNsmPrintName", value, value.ToString());

                _cte_nsm_printname = value;
            }
        }

        /// <summary>
        /// CTE_NSM_Date
        /// </summary>		
        public DateTime? CteNsmDate
        {
            get { return _cte_nsm_date; }
            set { _cte_nsm_date = value; }
        }

        /// <summary>
        /// CTE_NCMForPart2_PrintName
        /// </summary>		
        public string CteNcmForPart2PrintName
        {
            get { return _cte_ncmforpart2_printname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteNcmForPart2PrintName", value, value.ToString());

                _cte_ncmforpart2_printname = value;
            }
        }

        /// <summary>
        /// CTE_NCMForPart2_Date
        /// </summary>		
        public DateTime? CteNcmForPart2Date
        {
            get { return _cte_ncmforpart2_date; }
            set { _cte_ncmforpart2_date = value; }
        }

        /// <summary>
        /// CTE_DRM_PrintName
        /// </summary>		
        public string CteDrmPrintName
        {
            get { return _cte_drm_printname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteDrmPrintName", value, value.ToString());

                _cte_drm_printname = value;
            }
        }

        /// <summary>
        /// CTE_DRM_Date
        /// </summary>		
        public DateTime? CteDrmDate
        {
            get { return _cte_drm_date; }
            set { _cte_drm_date = value; }
        }

        /// <summary>
        /// CTE_FC_PrintName
        /// </summary>		
        public string CteFcPrintName
        {
            get { return _cte_fc_printname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteFcPrintName", value, value.ToString());

                _cte_fc_printname = value;
            }
        }

        /// <summary>
        /// CTE_FC_Date
        /// </summary>		
        public DateTime? CteFcDate
        {
            get { return _cte_fc_date; }
            set { _cte_fc_date = value; }
        }

        /// <summary>
        /// CTE_CD_PrintName
        /// </summary>		
        public string CteCdPrintName
        {
            get { return _cte_cd_printname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteCdPrintName", value, value.ToString());

                _cte_cd_printname = value;
            }
        }

        /// <summary>
        /// CTE_CD_Date
        /// </summary>		
        public DateTime? CteCdDate
        {
            get { return _cte_cd_date; }
            set { _cte_cd_date = value; }
        }

        /// <summary>
        /// CTE_VPF_PrintName
        /// </summary>		
        public string CteVpfPrintName
        {
            get { return _cte_vpf_printname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteVpfPrintName", value, value.ToString());

                _cte_vpf_printname = value;
            }
        }

        /// <summary>
        /// CTE_VPF_Date
        /// </summary>		
        public DateTime? CteVpfDate
        {
            get { return _cte_vpf_date; }
            set { _cte_vpf_date = value; }
        }

        /// <summary>
        /// CTE_VPAP_PrintName
        /// </summary>		
        public string CteVpapPrintName
        {
            get { return _cte_vpap_printname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteVpapPrintName", value, value.ToString());

                _cte_vpap_printname = value;
            }
        }

        /// <summary>
        /// CTE_VPAP_Date
        /// </summary>		
        public DateTime? CteVpapDate
        {
            get { return _cte_vpap_date; }
            set { _cte_vpap_date = value; }
        }

        /// <summary>
        /// 状态
        /// </summary>		
        public string CteStatus
        {
            get { return _cte_status; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for CteStatus", value, value.ToString());

                _cte_status = value;
            }
        }

        /// <summary>
        /// 合同类型
        /// </summary>		
        public string CteType
        {
            get { return _cte_type; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for CteType", value, value.ToString());

                _cte_type = value;
            }
        }

        /// <summary>
        /// 创建日期
        /// </summary>		
        public DateTime? CteCreateDate
        {
            get { return _cte_create_date; }
            set { _cte_create_date = value; }
        }

        /// <summary>
        /// 创建人
        /// </summary>		
        public Guid? CteCreateUser
        {
            get { return _cte_create_user; }
            set { _cte_create_user = value; }
        }

        /// <summary>
        /// 更新人
        /// </summary>		
        public Guid? CteUpdateUser
        {
            get { return _cte_update_user; }
            set { _cte_update_user = value; }
        }

        /// <summary>
        /// 更新日期
        /// </summary>		
        public DateTime? CteUpdateDate
        {
            get { return _cte_update_date; }
            set { _cte_update_date = value; }
        }



        public string CteSubDepid
        {
            get { return _cte_subdepid; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CteSubDepid", value, value.ToString());

                _cte_subdepid = value;
            }
        }

        public string CteSubdepName
        {
            get { return _cte_subdepname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for CteSubdepName", value, value.ToString());

                _cte_subdepname = value;
            }
        }
        #endregion 
		
		
		
		
	}
}
