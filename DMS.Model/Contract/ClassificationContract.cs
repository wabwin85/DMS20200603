/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : ClassificationContract
 * Created Time: 2014/11/20 17:36:29
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	ClassificationContract
	/// </summary>
	[Serializable]
	public class ClassificationContract : BaseModel
	{
		#region Private Members 11
		
		private Guid _id; 
		private string _division; 
		private string _code; 
		private string _namecn; 
		private string _nameen; 
		private bool? _distinguishrb; 
		private int? _year; 
		private string _rv1; 
		private string _rv2; 
		private string _rv3; 
		private string _rv4; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public ClassificationContract()
		{
			_id = Guid.Empty; 
			_division = null; 
			_code = null; 
			_namecn = null; 
			_nameen = null; 
			_distinguishrb = null;
			_year = null;
			_rv1 = null; 
			_rv2 = null; 
			_rv3 = null; 
			_rv4 = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Division
		{
			get { return _division; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Division", value, value.ToString());
				
				_division = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Code
		{
			get { return _code; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Code", value, value.ToString());
				
				_code = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Namecn
		{
			get { return _namecn; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Namecn", value, value.ToString());
				
				_namecn = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Nameen
		{
			get { return _nameen; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Nameen", value, value.ToString());
				
				_nameen = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public bool? Distinguishrb
		{
			get { return _distinguishrb; }
			set { _distinguishrb = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? Year
		{
			get { return _year; }
			set { _year = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Rv1
		{
			get { return _rv1; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Rv1", value, value.ToString());
				
				_rv1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Rv2
		{
			get { return _rv2; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Rv2", value, value.ToString());
				
				_rv2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Rv3
		{
			get { return _rv3; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Rv3", value, value.ToString());
				
				_rv3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Rv4
		{
			get { return _rv4; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Rv4", value, value.ToString());
				
				_rv4 = value;
			}
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
