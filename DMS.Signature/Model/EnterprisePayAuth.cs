/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : EnterprisePayAuth
 * Created Time: 2018/1/5 16:52:08
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Signature.Model
{
	/// <summary>
	///	EnterprisePayAuth
	/// </summary>
	[Serializable]
	public class EnterprisePayAuth
	{
		#region Private Members 31
		
		private Guid _id; 
		private Guid? _ea_id; 
		private Guid? _dma_id; 
		private Guid? _parent_dma_id; 
		private string _dealername; 
		private string _accountuid; 
		private string _name; 
		private string _cardno; 
		private string _subbranch; 
		private string _bank; 
		private string _provice; 
		private string _city; 
		private string _notify; 
		private string _serviceid; 
		private string _prcptcd; 
		private string _pizid; 
		private int? _isactive; 
		private string _status; 
		private int? _payauthcount; 
		private string _payresult; 
		private DateTime? _paydate; 
		private decimal? _paymoney;
        private Guid? _createuser;
        private string _createusername;
        private DateTime? _createdate;
        private Guid? _updateuser;
        private string _updateusername;
        private DateTime? _updatedate;
        private string _remark1; 
		private string _remark2; 
		private string _remark3; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public EnterprisePayAuth()
		{
			_id = Guid.Empty; 
			_ea_id = null;
			_dma_id = null;
			_parent_dma_id = null;
			_dealername = null; 
			_accountuid = null; 
			_name = null; 
			_cardno = null; 
			_subbranch = null; 
			_bank = null; 
			_provice = null; 
			_city = null; 
			_notify = null; 
			_serviceid = null; 
			_prcptcd = null; 
			_pizid = null; 
			_isactive = null;
			_status = null; 
			_payauthcount = null;
			_payresult = null; 
			_paydate = null;
			_paymoney = null;
            _createuser = null;
            _createusername = null;
            _createdate = null;
            _updateuser = null;
            _updateusername = null;
            _updatedate = null;
            _remark1 = null; 
			_remark2 = null; 
			_remark3 = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? EaId
		{
			get { return _ea_id; }
			set { _ea_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? DmaId
		{
			get { return _dma_id; }
			set { _dma_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? ParentDmaId
		{
			get { return _parent_dma_id; }
			set { _parent_dma_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string DealerName
		{
			get { return _dealername; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for DealerName", value, value.ToString());
				
				_dealername = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string AccountUid
		{
			get { return _accountuid; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for AccountUid", value, value.ToString());
				
				_accountuid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Name
		{
			get { return _name; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				
				_name = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CardNo
		{
			get { return _cardno; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for CardNo", value, value.ToString());
				
				_cardno = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string SubBranch
		{
			get { return _subbranch; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for SubBranch", value, value.ToString());
				
				_subbranch = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Bank
		{
			get { return _bank; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Bank", value, value.ToString());
				
				_bank = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Provice
		{
			get { return _provice; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Provice", value, value.ToString());
				
				_provice = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string City
		{
			get { return _city; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for City", value, value.ToString());
				
				_city = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Notify
		{
			get { return _notify; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for Notify", value, value.ToString());
				
				_notify = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ServiceId
		{
			get { return _serviceid; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ServiceId", value, value.ToString());
				
				_serviceid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Prcptcd
		{
			get { return _prcptcd; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Prcptcd", value, value.ToString());
				
				_prcptcd = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string PizId
		{
			get { return _pizid; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for PizId", value, value.ToString());
				
				_pizid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? IsActive
		{
			get { return _isactive; }
			set { _isactive = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_status = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? PayAuthCount
		{
			get { return _payauthcount; }
			set { _payauthcount = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string PayResult
		{
			get { return _payresult; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for PayResult", value, value.ToString());
				
				_payresult = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? PayDate
		{
			get { return _paydate; }
			set { _paydate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public decimal? PayMoney
		{
			get { return _paymoney; }
			set { _paymoney = value; }
		}

        /// <summary>
        /// 
        /// </summary>		
        public Guid? CreateUser
        {
            get { return _createuser; }
            set { _createuser = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CreateUserName
        {
            get { return _createusername; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for CreateUserName", value, value.ToString());

                _createusername = value;
            }
        }

        /// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateDate
        {
            get { return _createdate; }
            set { _createdate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? UpdateUser
        {
            get { return _updateuser; }
            set { _updateuser = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string UpdateUserName
        {
            get { return _updateusername; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for UpdateUserName", value, value.ToString());

                _updateusername = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime? UpdateDate
        {
            get { return _updatedate; }
            set { _updatedate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Remark1
		{
			get { return _remark1; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for Remark1", value, value.ToString());
				
				_remark1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Remark2
		{
			get { return _remark2; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for Remark2", value, value.ToString());
				
				_remark2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Remark3
		{
			get { return _remark3; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for Remark3", value, value.ToString());
				
				_remark3 = value;
			}
		}




        #endregion

        public String AuthServiceId
        {
            get;
            set;
        }
        
    }
}
