/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : AuthorizationTenderMain
 * Created Time: 2017/5/5 12:02:37
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
    /// <summary>
    ///	AuthorizationTenderMain
    /// </summary>
    [Serializable]
    public class AuthorizationTenderMain
    {
        #region Private Members 16

        private Guid _id;
        private string _no;
        private string _dealername;
        private Guid? _productline_id;
        private DateTime? _begindate;
        private DateTime? _enddate;
        private string _states;
        private string _dealertype;
        private bool? _licencetype;
        private string _dealeraddress;
        private string _remark1;
        private string _remark2;
        private string _remark3;
        private string _createuser;
        private DateTime? _createdate;
        private string _applicType;
        private Guid? _superiorDealer;
        private string _cbwdsubbu;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public AuthorizationTenderMain()
        {

            _applicType = null;
            _id = Guid.Empty;
            _no = null;
            _dealername = null;
            _productline_id = null;
            _begindate = null;
            _enddate = null;
            _states = null;
            _dealertype = null;
            _licencetype = null;
            _dealeraddress = null;
            _remark1 = null;
            _remark2 = null;
            _remark3 = null;
            _createuser = null;
            _superiorDealer = null;
            _cbwdsubbu = null;
        }
        #endregion 

        #region Public Properties

        /// <summary>
        /// 
        /// </summary>		
        public Guid Id
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string No
        {
            get { return _no; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for No", value, value.ToString());

                _no = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string DealerName
        {
            get { return _dealername; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for DealerName", value, value.ToString());

                _dealername = value;
            }
        }

        /// <summary>
        /// 授权类型
        /// </summary>	
        ///        
        public string ApplicType
        {
            get { return _applicType; }
            set
            {
                if (value != null && value.Length > 300)
                    throw new ArgumentOutOfRangeException("Invalid value for ApplicType", value, value.ToString());

                _applicType = value;
            }
        }
        //subbu
        public string SubBU
        {
            get { return _cbwdsubbu; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for SubBU", value, value.ToString());
                _cbwdsubbu = value;
            }
        }
        //上级
        public Guid? SupDealer
        {
            get { return _superiorDealer; }
            set { _superiorDealer = value; }
        }
        public Guid? ProductLineId
        {
            get { return _productline_id; }
            set { _productline_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime? BeginDate
        {
            get { return _begindate; }
            set { _begindate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime? EndDate
        {
            get { return _enddate; }
            set { _enddate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string States
        {
            get { return _states; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for States", value, value.ToString());

                _states = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public bool? LicenceType
        {
            get { return _licencetype; }
            set { _licencetype = value; }
        }


        public string DealerType
        {
            get { return _dealertype; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for DealerType", value, value.ToString());

                _dealertype = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>		
        public string DealerAddress
        {
            get { return _dealeraddress; }
            set
            {
                if (value != null && value.Length > 1000)
                    throw new ArgumentOutOfRangeException("Invalid value for DealerAddress", value, value.ToString());

                _dealeraddress = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Remark1
        {
            get { return _remark1; }
            set
            {
                if (value != null && value.Length > 1000)
                    throw new ArgumentOutOfRangeException("Invalid value for Remark1", value, value.ToString());

                _remark1 = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Remark2
        {
            get { return _remark2; }
            set
            {
                if (value != null && value.Length > 1000)
                    throw new ArgumentOutOfRangeException("Invalid value for Remark2", value, value.ToString());

                _remark2 = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Remark3
        {
            get { return _remark3; }
            set
            {
                if (value != null && value.Length > 1000)
                    throw new ArgumentOutOfRangeException("Invalid value for Remark3", value, value.ToString());

                _remark3 = value;
            }
        }


        public string CreateUser
        {
            get { return _createuser; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for CreateUser", value, value.ToString());

                _createuser = value;
            }
        }

        public DateTime? CreateDate
        {
            get { return _createdate; }
            set { _createdate = value; }
        }

        #endregion





    }
}
