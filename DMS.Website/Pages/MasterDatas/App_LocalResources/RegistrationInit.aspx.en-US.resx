<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GridPanel3.ColumnModel3.Barcode1.Header" xml:space="preserve">
    <value>Barcode1</value>
  </data>
  <data name="GridPanel3.ColumnModel3.Barcode2.Header" xml:space="preserve">
    <value>Barcode2</value>
  </data>
  <data name="GridPanel3.ColumnModel3.Barcode3.Header" xml:space="preserve">
    <value>Barcode3</value>
  </data>
  <data name="GridPanel3.ColumnModel3.Barcode4.Header" xml:space="preserve">
    <value>Barcode4</value>
  </data>
  <data name="GridPanel3.ColumnModel3.ChineseName.Header" xml:space="preserve">
    <value>Product Chinese Name</value>
  </data>
  <data name="GridPanel3.ColumnModel3.EnglishName.Header" xml:space="preserve">
    <value>Product English Name</value>
  </data>
  <data name="GridPanel3.ColumnModel3.ErrorDesc.Header" xml:space="preserve">
    <value>Problem Description</value>
  </data>
  <data name="GridPanel3.ColumnModel3.ExpirationDate.Header" xml:space="preserve">
    <value>License Expiration Date</value>
  </data>
  <data name="GridPanel3.ColumnModel3.GuaranteePeriod.Header" xml:space="preserve">
    <value>Expiration Date(day)</value>
  </data>
  <data name="GridPanel3.ColumnModel3.Implant.Header" xml:space="preserve">
    <value>Implant or not?</value>
  </data>
  <data name="GridPanel3.ColumnModel3.Import.Header" xml:space="preserve">
    <value>Import or not?</value>
  </data>
  <data name="GridPanel3.ColumnModel3.LineNbr.Header" xml:space="preserve">
    <value>Row Number</value>
  </data>
  <data name="GridPanel3.ColumnModel3.Lot.Header" xml:space="preserve">
    <value>By lot number or not?</value>
  </data>
  <data name="GridPanel3.ColumnModel3.ManufactoryAddress.Header" xml:space="preserve">
    <value>Produce Site Address</value>
  </data>
  <data name="GridPanel3.ColumnModel3.ManufacturerAddress.Header" xml:space="preserve">
    <value>Producer Address</value>
  </data>
  <data name="GridPanel3.ColumnModel3.ManufacturerId.Header" xml:space="preserve">
    <value>Producer ID</value>
  </data>
  <data name="GridPanel3.ColumnModel3.ManufacturerName.Header" xml:space="preserve">
    <value>Producer Name</value>
  </data>
  <data name="GridPanel3.ColumnModel3.MinUnit.Header" xml:space="preserve">
    <value>Minimum Charge Unit</value>
  </data>
  <data name="GridPanel3.ColumnModel3.OpeningDate.Header" xml:space="preserve">
    <value>License Issue Date</value>
  </data>
  <data name="GridPanel3.ColumnModel3.Pacemaker.Header" xml:space="preserve">
    <value>Is it pumper</value>
  </data>
  <data name="GridPanel3.ColumnModel3.RegisteredAgent.Header" xml:space="preserve">
    <value>Register Agent</value>
  </data>
  <data name="GridPanel3.ColumnModel3.RegistrationNbrcn.Header" xml:space="preserve">
    <value>Chinese License Number</value>
  </data>
  <data name="GridPanel3.ColumnModel3.RegistrationNbren.Header" xml:space="preserve">
    <value>English License Number</value>
  </data>
  <data name="GridPanel3.ColumnModel3.RegistrationProductName.Header" xml:space="preserve">
    <value>License Product Name</value>
  </data>
  <data name="GridPanel3.ColumnModel3.Scope.Header" xml:space="preserve">
    <value>Product Application Scope</value>
  </data>
  <data name="GridPanel3.ColumnModel3.Service.Header" xml:space="preserve">
    <value>Post-Sales Service Provider</value>
  </data>
  <data name="GridPanel3.ColumnModel3.Sn.Header" xml:space="preserve">
    <value>By serial number or not?</value>
  </data>
  <data name="GridPanel3.ColumnModel3.Specification.Header" xml:space="preserve">
    <value>Article Number</value>
  </data>
  <data name="GridPanel3.LoadMask.Msg" xml:space="preserve">
    <value>Processing...</value>
  </data>
  <data name="GridPanel3.PagingToolBar1.EmptyMsg" xml:space="preserve">
    <value>No data to display</value>
  </data>
  <data name="GridPanel3.Title" xml:space="preserve">
    <value>Error message</value>
  </data>
  <data name="ImportClick.Alert.Body" xml:space="preserve">
    <value>Data import exception!</value>
  </data>
  <data name="ImportClick.Alert.Body1" xml:space="preserve">
    <value>Error during data importing!</value>
  </data>
  <data name="ImportClick.Alert.Body2" xml:space="preserve">
    <value>Excel data format error!</value>
  </data>
  <data name="ImportClick.Alert.Body3" xml:space="preserve">
    <value>No data to import!</value>
  </data>
  <data name="ImportClick.Alert.Title" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="ImportClick.Alert.Title1" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ImportClick.Alert.Title2" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ImportClick.Alert.Title3" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ImportClick.IsValid.Alert.Body" xml:space="preserve">
    <value>Data include error!</value>
  </data>
  <data name="ImportClick.IsValid.Alert.Title" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="ImportClick.IsValid.Error.Alert.Body" xml:space="preserve">
    <value>Data import success!</value>
  </data>
  <data name="ImportClick.IsValid.Error.Alert.Title" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="ImportClick.IsValid.Success.Alert.Body" xml:space="preserve">
    <value>Please use the corrent template file</value>
  </data>
  <data name="ImportClick.IsValid.Success.Alert.Title" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="UploadClick.HasFile.Msg.Show.Message" xml:space="preserve">
    <value>Please use the corrent template file, the template file is an excel file!</value>
  </data>
  <data name="UploadClick.HasFile.Msg.Show.Message1" xml:space="preserve">
    <value>File is uploaded successfully</value>
  </data>
  <data name="UploadClick.HasFile.Msg.Show.Title" xml:space="preserve">
    <value>File error</value>
  </data>
  <data name="UploadClick.HasFile.Msg.Show.Title1" xml:space="preserve">
    <value>Upload success</value>
  </data>
  <data name="UploadClick.Msg.Show.Message" xml:space="preserve">
    <value>File isn't uploaded successfully</value>
  </data>
  <data name="UploadClick.Msg.Show.Title" xml:space="preserve">
    <value>upload failed</value>
  </data>
  <data name="ViewPort1.BasicForm.Title" xml:space="preserve">
    <value>License Import</value>
  </data>
  <data name="ViewPort1.DownloadButton.Text" xml:space="preserve">
    <value>Download template</value>
  </data>
  <data name="ViewPort1.FileUploadField1.EmptyText" xml:space="preserve">
    <value>Please select license import file(Excel)</value>
  </data>
  <data name="ViewPort1.FileUploadField1.FieldLabel" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="ViewPort1.ImportButton.Msg.Wait.Message" xml:space="preserve">
    <value>Initialize license</value>
  </data>
  <data name="ViewPort1.ImportButton.Msg.Wait.Title" xml:space="preserve">
    <value>Processing data...</value>
  </data>
  <data name="ViewPort1.ImportButton.Text" xml:space="preserve">
    <value>Import into database</value>
  </data>
  <data name="ViewPort1.ResetButton.Text" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="ViewPort1.SaveButton.Msg.Show.Message" xml:space="preserve">
    <value>Error during upload</value>
  </data>
  <data name="ViewPort1.SaveButton.Msg.Show.Title" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ViewPort1.SaveButton.Msg.Wait.Message" xml:space="preserve">
    <value>File upload</value>
  </data>
  <data name="ViewPort1.SaveButton.Msg.Wait.Title" xml:space="preserve">
    <value>File uploading</value>
  </data>
  <data name="ViewPort1.SaveButton.Text" xml:space="preserve">
    <value>Upload file</value>
  </data>
</root>