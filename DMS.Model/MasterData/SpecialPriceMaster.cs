/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : SpecialPriceMaster
 * Created Time: 2013/7/24 11:21:17
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
    /// <summary>
    ///	SpecialPriceMaster
    /// </summary>
    [Serializable]
    public class SpecialPriceMaster : BaseModel
    {
        #region Private Members 7

        private Guid _id;
        private Guid _dma_id;
        private string _code;
        private string _name;
        private string _description;
        private bool _isactive;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public SpecialPriceMaster()
        {
            _id = Guid.Empty;
            _dma_id = Guid.Empty;
            _code = null;
            _name = null;
            _description = null;
            _isactive = false;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 主键
        /// </summary>		
        public Guid Id
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 经销商主键
        /// </summary>		
        public Guid DmaId
        {
            get { return _dma_id; }
            set { _dma_id = value; }
        }

        /// <summary>
        /// 规则编号
        /// </summary>		
        public string Code
        {
            get { return _code; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Code", value, value.ToString());

                _code = value;
            }
        }

        /// <summary>
        /// 规则名称
        /// </summary>		
        public string Name
        {
            get { return _name; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());

                _name = value;
            }
        }

        /// <summary>
        /// 规则描述
        /// </summary>		
        public string Description
        {
            get { return _description; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Description", value, value.ToString());

                _description = value;
            }
        }

        /// <summary>
        /// 是否有效
        /// </summary>		
        public bool IsActive
        {
            get { return _isactive; }
            set { _isactive = value; }
        }




        #endregion





    }
}
