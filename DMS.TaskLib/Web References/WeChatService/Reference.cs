//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace DMS.TaskLib.WeChatService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="zzcscSoap", Namespace="http://tempuri.org/")]
    public partial class zzcsc : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAllHospitalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback P_GetCRMDealerOperationCompleted;
        
        private System.Threading.SendOrPostCallback P_GetDealerProductionPriceOperationCompleted;
        
        private System.Threading.SendOrPostCallback P_GetCRMDealerHospitalOperationCompleted;
        
        private System.Threading.SendOrPostCallback P_GetAllCRMProductionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInHospitalSalesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadHospitalSalesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCFNListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLotMasterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDealerAchievingRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUploadTimelyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductInforOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLPInventoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWechatUserOpenIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFQAListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFQAAnnexListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQuestionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllIntegralExchangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllApprovedIntegralExchangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertIntegralExchangeToDmsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateQuestionDmsToWcOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertQuestionWcToDmsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDealerNewsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDealerNewsAnnexOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDealerNewsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDealerNewsAnnexOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertFunctionSuggestOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAllWechatOperatLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertWechatLogOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public zzcsc() {
            this.Url = global::DMS.TaskLib.Properties.Settings.Default.DMS_TaskLib_WeChatService_zzcsc;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAllHospitalsCompletedEventHandler GetAllHospitalsCompleted;
        
        /// <remarks/>
        public event P_GetCRMDealerCompletedEventHandler P_GetCRMDealerCompleted;
        
        /// <remarks/>
        public event P_GetDealerProductionPriceCompletedEventHandler P_GetDealerProductionPriceCompleted;
        
        /// <remarks/>
        public event P_GetCRMDealerHospitalCompletedEventHandler P_GetCRMDealerHospitalCompleted;
        
        /// <remarks/>
        public event P_GetAllCRMProductionCompletedEventHandler P_GetAllCRMProductionCompleted;
        
        /// <remarks/>
        public event GetInHospitalSalesCompletedEventHandler GetInHospitalSalesCompleted;
        
        /// <remarks/>
        public event UploadHospitalSalesCompletedEventHandler UploadHospitalSalesCompleted;
        
        /// <remarks/>
        public event GetCFNListCompletedEventHandler GetCFNListCompleted;
        
        /// <remarks/>
        public event GetProductListCompletedEventHandler GetProductListCompleted;
        
        /// <remarks/>
        public event GetLotMasterCompletedEventHandler GetLotMasterCompleted;
        
        /// <remarks/>
        public event GetDealerAchievingRateCompletedEventHandler GetDealerAchievingRateCompleted;
        
        /// <remarks/>
        public event GetUploadTimelyCompletedEventHandler GetUploadTimelyCompleted;
        
        /// <remarks/>
        public event GetProductInforCompletedEventHandler GetProductInforCompleted;
        
        /// <remarks/>
        public event GetLPInventoryCompletedEventHandler GetLPInventoryCompleted;
        
        /// <remarks/>
        public event GetUserInformationCompletedEventHandler GetUserInformationCompleted;
        
        /// <remarks/>
        public event UpdateWechatUserOpenIdCompletedEventHandler UpdateWechatUserOpenIdCompleted;
        
        /// <remarks/>
        public event GetUserProductCompletedEventHandler GetUserProductCompleted;
        
        /// <remarks/>
        public event GetUserPermissionsCompletedEventHandler GetUserPermissionsCompleted;
        
        /// <remarks/>
        public event GetFQAListCompletedEventHandler GetFQAListCompleted;
        
        /// <remarks/>
        public event GetFQAAnnexListCompletedEventHandler GetFQAAnnexListCompleted;
        
        /// <remarks/>
        public event GetQuestionListCompletedEventHandler GetQuestionListCompleted;
        
        /// <remarks/>
        public event GetAllIntegralExchangeCompletedEventHandler GetAllIntegralExchangeCompleted;
        
        /// <remarks/>
        public event GetAllApprovedIntegralExchangeCompletedEventHandler GetAllApprovedIntegralExchangeCompleted;
        
        /// <remarks/>
        public event InsertIntegralExchangeToDmsCompletedEventHandler InsertIntegralExchangeToDmsCompleted;
        
        /// <remarks/>
        public event UpdateQuestionDmsToWcCompletedEventHandler UpdateQuestionDmsToWcCompleted;
        
        /// <remarks/>
        public event InsertQuestionWcToDmsCompletedEventHandler InsertQuestionWcToDmsCompleted;
        
        /// <remarks/>
        public event DeleteDealerNewsCompletedEventHandler DeleteDealerNewsCompleted;
        
        /// <remarks/>
        public event DeleteDealerNewsAnnexCompletedEventHandler DeleteDealerNewsAnnexCompleted;
        
        /// <remarks/>
        public event InsertDealerNewsCompletedEventHandler InsertDealerNewsCompleted;
        
        /// <remarks/>
        public event InsertDealerNewsAnnexCompletedEventHandler InsertDealerNewsAnnexCompleted;
        
        /// <remarks/>
        public event InsertFunctionSuggestCompletedEventHandler InsertFunctionSuggestCompleted;
        
        /// <remarks/>
        public event DeleteAllWechatOperatLogCompletedEventHandler DeleteAllWechatOperatLogCompleted;
        
        /// <remarks/>
        public event InsertWechatLogCompletedEventHandler InsertWechatLogCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllHospitals", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllHospitals(string Uid, string Pwd) {
            object[] results = this.Invoke("GetAllHospitals", new object[] {
                        Uid,
                        Pwd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllHospitalsAsync(string Uid, string Pwd) {
            this.GetAllHospitalsAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void GetAllHospitalsAsync(string Uid, string Pwd, object userState) {
            if ((this.GetAllHospitalsOperationCompleted == null)) {
                this.GetAllHospitalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllHospitalsOperationCompleted);
            }
            this.InvokeAsync("GetAllHospitals", new object[] {
                        Uid,
                        Pwd}, this.GetAllHospitalsOperationCompleted, userState);
        }
        
        private void OnGetAllHospitalsOperationCompleted(object arg) {
            if ((this.GetAllHospitalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllHospitalsCompleted(this, new GetAllHospitalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/P_GetCRMDealer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet P_GetCRMDealer(string Uid, string Pwd) {
            object[] results = this.Invoke("P_GetCRMDealer", new object[] {
                        Uid,
                        Pwd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void P_GetCRMDealerAsync(string Uid, string Pwd) {
            this.P_GetCRMDealerAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void P_GetCRMDealerAsync(string Uid, string Pwd, object userState) {
            if ((this.P_GetCRMDealerOperationCompleted == null)) {
                this.P_GetCRMDealerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnP_GetCRMDealerOperationCompleted);
            }
            this.InvokeAsync("P_GetCRMDealer", new object[] {
                        Uid,
                        Pwd}, this.P_GetCRMDealerOperationCompleted, userState);
        }
        
        private void OnP_GetCRMDealerOperationCompleted(object arg) {
            if ((this.P_GetCRMDealerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.P_GetCRMDealerCompleted(this, new P_GetCRMDealerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/P_GetDealerProductionPrice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet P_GetDealerProductionPrice(string Uid, string Pwd, string CustomerID) {
            object[] results = this.Invoke("P_GetDealerProductionPrice", new object[] {
                        Uid,
                        Pwd,
                        CustomerID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void P_GetDealerProductionPriceAsync(string Uid, string Pwd, string CustomerID) {
            this.P_GetDealerProductionPriceAsync(Uid, Pwd, CustomerID, null);
        }
        
        /// <remarks/>
        public void P_GetDealerProductionPriceAsync(string Uid, string Pwd, string CustomerID, object userState) {
            if ((this.P_GetDealerProductionPriceOperationCompleted == null)) {
                this.P_GetDealerProductionPriceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnP_GetDealerProductionPriceOperationCompleted);
            }
            this.InvokeAsync("P_GetDealerProductionPrice", new object[] {
                        Uid,
                        Pwd,
                        CustomerID}, this.P_GetDealerProductionPriceOperationCompleted, userState);
        }
        
        private void OnP_GetDealerProductionPriceOperationCompleted(object arg) {
            if ((this.P_GetDealerProductionPriceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.P_GetDealerProductionPriceCompleted(this, new P_GetDealerProductionPriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/P_GetCRMDealerHospital", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet P_GetCRMDealerHospital(string Uid, string Pwd) {
            object[] results = this.Invoke("P_GetCRMDealerHospital", new object[] {
                        Uid,
                        Pwd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void P_GetCRMDealerHospitalAsync(string Uid, string Pwd) {
            this.P_GetCRMDealerHospitalAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void P_GetCRMDealerHospitalAsync(string Uid, string Pwd, object userState) {
            if ((this.P_GetCRMDealerHospitalOperationCompleted == null)) {
                this.P_GetCRMDealerHospitalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnP_GetCRMDealerHospitalOperationCompleted);
            }
            this.InvokeAsync("P_GetCRMDealerHospital", new object[] {
                        Uid,
                        Pwd}, this.P_GetCRMDealerHospitalOperationCompleted, userState);
        }
        
        private void OnP_GetCRMDealerHospitalOperationCompleted(object arg) {
            if ((this.P_GetCRMDealerHospitalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.P_GetCRMDealerHospitalCompleted(this, new P_GetCRMDealerHospitalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/P_GetAllCRMProduction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet P_GetAllCRMProduction(string Uid, string Pwd) {
            object[] results = this.Invoke("P_GetAllCRMProduction", new object[] {
                        Uid,
                        Pwd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void P_GetAllCRMProductionAsync(string Uid, string Pwd) {
            this.P_GetAllCRMProductionAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void P_GetAllCRMProductionAsync(string Uid, string Pwd, object userState) {
            if ((this.P_GetAllCRMProductionOperationCompleted == null)) {
                this.P_GetAllCRMProductionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnP_GetAllCRMProductionOperationCompleted);
            }
            this.InvokeAsync("P_GetAllCRMProduction", new object[] {
                        Uid,
                        Pwd}, this.P_GetAllCRMProductionOperationCompleted, userState);
        }
        
        private void OnP_GetAllCRMProductionOperationCompleted(object arg) {
            if ((this.P_GetAllCRMProductionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.P_GetAllCRMProductionCompleted(this, new P_GetAllCRMProductionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInHospitalSales", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetInHospitalSales(string Uid, string Pwd, int Year, int Month, int DivisionID) {
            object[] results = this.Invoke("GetInHospitalSales", new object[] {
                        Uid,
                        Pwd,
                        Year,
                        Month,
                        DivisionID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetInHospitalSalesAsync(string Uid, string Pwd, int Year, int Month, int DivisionID) {
            this.GetInHospitalSalesAsync(Uid, Pwd, Year, Month, DivisionID, null);
        }
        
        /// <remarks/>
        public void GetInHospitalSalesAsync(string Uid, string Pwd, int Year, int Month, int DivisionID, object userState) {
            if ((this.GetInHospitalSalesOperationCompleted == null)) {
                this.GetInHospitalSalesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInHospitalSalesOperationCompleted);
            }
            this.InvokeAsync("GetInHospitalSales", new object[] {
                        Uid,
                        Pwd,
                        Year,
                        Month,
                        DivisionID}, this.GetInHospitalSalesOperationCompleted, userState);
        }
        
        private void OnGetInHospitalSalesOperationCompleted(object arg) {
            if ((this.GetInHospitalSalesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInHospitalSalesCompleted(this, new GetInHospitalSalesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadHospitalSales", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadHospitalSales(string Uid, string Pwd, string Upn, string Lot, string HosId, string SubUser, string Rv1, string Rv2, string Rv3) {
            object[] results = this.Invoke("UploadHospitalSales", new object[] {
                        Uid,
                        Pwd,
                        Upn,
                        Lot,
                        HosId,
                        SubUser,
                        Rv1,
                        Rv2,
                        Rv3});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadHospitalSalesAsync(string Uid, string Pwd, string Upn, string Lot, string HosId, string SubUser, string Rv1, string Rv2, string Rv3) {
            this.UploadHospitalSalesAsync(Uid, Pwd, Upn, Lot, HosId, SubUser, Rv1, Rv2, Rv3, null);
        }
        
        /// <remarks/>
        public void UploadHospitalSalesAsync(string Uid, string Pwd, string Upn, string Lot, string HosId, string SubUser, string Rv1, string Rv2, string Rv3, object userState) {
            if ((this.UploadHospitalSalesOperationCompleted == null)) {
                this.UploadHospitalSalesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadHospitalSalesOperationCompleted);
            }
            this.InvokeAsync("UploadHospitalSales", new object[] {
                        Uid,
                        Pwd,
                        Upn,
                        Lot,
                        HosId,
                        SubUser,
                        Rv1,
                        Rv2,
                        Rv3}, this.UploadHospitalSalesOperationCompleted, userState);
        }
        
        private void OnUploadHospitalSalesOperationCompleted(object arg) {
            if ((this.UploadHospitalSalesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadHospitalSalesCompleted(this, new UploadHospitalSalesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCFNList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCFNList(string Uid, string Pwd) {
            object[] results = this.Invoke("GetCFNList", new object[] {
                        Uid,
                        Pwd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCFNListAsync(string Uid, string Pwd) {
            this.GetCFNListAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void GetCFNListAsync(string Uid, string Pwd, object userState) {
            if ((this.GetCFNListOperationCompleted == null)) {
                this.GetCFNListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCFNListOperationCompleted);
            }
            this.InvokeAsync("GetCFNList", new object[] {
                        Uid,
                        Pwd}, this.GetCFNListOperationCompleted, userState);
        }
        
        private void OnGetCFNListOperationCompleted(object arg) {
            if ((this.GetCFNListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCFNListCompleted(this, new GetCFNListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProductList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetProductList(string Uid, string Pwd) {
            object[] results = this.Invoke("GetProductList", new object[] {
                        Uid,
                        Pwd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductListAsync(string Uid, string Pwd) {
            this.GetProductListAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void GetProductListAsync(string Uid, string Pwd, object userState) {
            if ((this.GetProductListOperationCompleted == null)) {
                this.GetProductListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductListOperationCompleted);
            }
            this.InvokeAsync("GetProductList", new object[] {
                        Uid,
                        Pwd}, this.GetProductListOperationCompleted, userState);
        }
        
        private void OnGetProductListOperationCompleted(object arg) {
            if ((this.GetProductListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductListCompleted(this, new GetProductListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLotMaster", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetLotMaster(string Uid, string Pwd) {
            object[] results = this.Invoke("GetLotMaster", new object[] {
                        Uid,
                        Pwd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetLotMasterAsync(string Uid, string Pwd) {
            this.GetLotMasterAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void GetLotMasterAsync(string Uid, string Pwd, object userState) {
            if ((this.GetLotMasterOperationCompleted == null)) {
                this.GetLotMasterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLotMasterOperationCompleted);
            }
            this.InvokeAsync("GetLotMaster", new object[] {
                        Uid,
                        Pwd}, this.GetLotMasterOperationCompleted, userState);
        }
        
        private void OnGetLotMasterOperationCompleted(object arg) {
            if ((this.GetLotMasterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLotMasterCompleted(this, new GetLotMasterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDealerAchievingRate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDealerAchievingRate(string Uid, string Pwd, string DealerName) {
            object[] results = this.Invoke("GetDealerAchievingRate", new object[] {
                        Uid,
                        Pwd,
                        DealerName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDealerAchievingRateAsync(string Uid, string Pwd, string DealerName) {
            this.GetDealerAchievingRateAsync(Uid, Pwd, DealerName, null);
        }
        
        /// <remarks/>
        public void GetDealerAchievingRateAsync(string Uid, string Pwd, string DealerName, object userState) {
            if ((this.GetDealerAchievingRateOperationCompleted == null)) {
                this.GetDealerAchievingRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDealerAchievingRateOperationCompleted);
            }
            this.InvokeAsync("GetDealerAchievingRate", new object[] {
                        Uid,
                        Pwd,
                        DealerName}, this.GetDealerAchievingRateOperationCompleted, userState);
        }
        
        private void OnGetDealerAchievingRateOperationCompleted(object arg) {
            if ((this.GetDealerAchievingRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDealerAchievingRateCompleted(this, new GetDealerAchievingRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUploadTimely", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetUploadTimely(string Uid, string Pwd, string DealerId) {
            object[] results = this.Invoke("GetUploadTimely", new object[] {
                        Uid,
                        Pwd,
                        DealerId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetUploadTimelyAsync(string Uid, string Pwd, string DealerId) {
            this.GetUploadTimelyAsync(Uid, Pwd, DealerId, null);
        }
        
        /// <remarks/>
        public void GetUploadTimelyAsync(string Uid, string Pwd, string DealerId, object userState) {
            if ((this.GetUploadTimelyOperationCompleted == null)) {
                this.GetUploadTimelyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUploadTimelyOperationCompleted);
            }
            this.InvokeAsync("GetUploadTimely", new object[] {
                        Uid,
                        Pwd,
                        DealerId}, this.GetUploadTimelyOperationCompleted, userState);
        }
        
        private void OnGetUploadTimelyOperationCompleted(object arg) {
            if ((this.GetUploadTimelyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUploadTimelyCompleted(this, new GetUploadTimelyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProductInfor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetProductInfor(string Uid, string Pwd, string UPN) {
            object[] results = this.Invoke("GetProductInfor", new object[] {
                        Uid,
                        Pwd,
                        UPN});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductInforAsync(string Uid, string Pwd, string UPN) {
            this.GetProductInforAsync(Uid, Pwd, UPN, null);
        }
        
        /// <remarks/>
        public void GetProductInforAsync(string Uid, string Pwd, string UPN, object userState) {
            if ((this.GetProductInforOperationCompleted == null)) {
                this.GetProductInforOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductInforOperationCompleted);
            }
            this.InvokeAsync("GetProductInfor", new object[] {
                        Uid,
                        Pwd,
                        UPN}, this.GetProductInforOperationCompleted, userState);
        }
        
        private void OnGetProductInforOperationCompleted(object arg) {
            if ((this.GetProductInforCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductInforCompleted(this, new GetProductInforCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLPInventory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetLPInventory(string Uid, string Pwd, string DealerId, string UPN) {
            object[] results = this.Invoke("GetLPInventory", new object[] {
                        Uid,
                        Pwd,
                        DealerId,
                        UPN});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetLPInventoryAsync(string Uid, string Pwd, string DealerId, string UPN) {
            this.GetLPInventoryAsync(Uid, Pwd, DealerId, UPN, null);
        }
        
        /// <remarks/>
        public void GetLPInventoryAsync(string Uid, string Pwd, string DealerId, string UPN, object userState) {
            if ((this.GetLPInventoryOperationCompleted == null)) {
                this.GetLPInventoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLPInventoryOperationCompleted);
            }
            this.InvokeAsync("GetLPInventory", new object[] {
                        Uid,
                        Pwd,
                        DealerId,
                        UPN}, this.GetLPInventoryOperationCompleted, userState);
        }
        
        private void OnGetLPInventoryOperationCompleted(object arg) {
            if ((this.GetLPInventoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLPInventoryCompleted(this, new GetLPInventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserInformation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetUserInformation(string Uid, string Pwd) {
            object[] results = this.Invoke("GetUserInformation", new object[] {
                        Uid,
                        Pwd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserInformationAsync(string Uid, string Pwd) {
            this.GetUserInformationAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void GetUserInformationAsync(string Uid, string Pwd, object userState) {
            if ((this.GetUserInformationOperationCompleted == null)) {
                this.GetUserInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInformationOperationCompleted);
            }
            this.InvokeAsync("GetUserInformation", new object[] {
                        Uid,
                        Pwd}, this.GetUserInformationOperationCompleted, userState);
        }
        
        private void OnGetUserInformationOperationCompleted(object arg) {
            if ((this.GetUserInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserInformationCompleted(this, new GetUserInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWechatUserOpenId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateWechatUserOpenId(string Uid, string Pwd, string UserId, string OpenId, string BindDate, string NickName) {
            object[] results = this.Invoke("UpdateWechatUserOpenId", new object[] {
                        Uid,
                        Pwd,
                        UserId,
                        OpenId,
                        BindDate,
                        NickName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateWechatUserOpenIdAsync(string Uid, string Pwd, string UserId, string OpenId, string BindDate, string NickName) {
            this.UpdateWechatUserOpenIdAsync(Uid, Pwd, UserId, OpenId, BindDate, NickName, null);
        }
        
        /// <remarks/>
        public void UpdateWechatUserOpenIdAsync(string Uid, string Pwd, string UserId, string OpenId, string BindDate, string NickName, object userState) {
            if ((this.UpdateWechatUserOpenIdOperationCompleted == null)) {
                this.UpdateWechatUserOpenIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWechatUserOpenIdOperationCompleted);
            }
            this.InvokeAsync("UpdateWechatUserOpenId", new object[] {
                        Uid,
                        Pwd,
                        UserId,
                        OpenId,
                        BindDate,
                        NickName}, this.UpdateWechatUserOpenIdOperationCompleted, userState);
        }
        
        private void OnUpdateWechatUserOpenIdOperationCompleted(object arg) {
            if ((this.UpdateWechatUserOpenIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWechatUserOpenIdCompleted(this, new UpdateWechatUserOpenIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserProduct", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetUserProduct(string Uid, string Pwd) {
            object[] results = this.Invoke("GetUserProduct", new object[] {
                        Uid,
                        Pwd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserProductAsync(string Uid, string Pwd) {
            this.GetUserProductAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void GetUserProductAsync(string Uid, string Pwd, object userState) {
            if ((this.GetUserProductOperationCompleted == null)) {
                this.GetUserProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserProductOperationCompleted);
            }
            this.InvokeAsync("GetUserProduct", new object[] {
                        Uid,
                        Pwd}, this.GetUserProductOperationCompleted, userState);
        }
        
        private void OnGetUserProductOperationCompleted(object arg) {
            if ((this.GetUserProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserProductCompleted(this, new GetUserProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserPermissions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetUserPermissions(string Uid, string Pwd) {
            object[] results = this.Invoke("GetUserPermissions", new object[] {
                        Uid,
                        Pwd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserPermissionsAsync(string Uid, string Pwd) {
            this.GetUserPermissionsAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void GetUserPermissionsAsync(string Uid, string Pwd, object userState) {
            if ((this.GetUserPermissionsOperationCompleted == null)) {
                this.GetUserPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserPermissionsOperationCompleted);
            }
            this.InvokeAsync("GetUserPermissions", new object[] {
                        Uid,
                        Pwd}, this.GetUserPermissionsOperationCompleted, userState);
        }
        
        private void OnGetUserPermissionsOperationCompleted(object arg) {
            if ((this.GetUserPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserPermissionsCompleted(this, new GetUserPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFQAList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetFQAList(string Uid, string Pwd) {
            object[] results = this.Invoke("GetFQAList", new object[] {
                        Uid,
                        Pwd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetFQAListAsync(string Uid, string Pwd) {
            this.GetFQAListAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void GetFQAListAsync(string Uid, string Pwd, object userState) {
            if ((this.GetFQAListOperationCompleted == null)) {
                this.GetFQAListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFQAListOperationCompleted);
            }
            this.InvokeAsync("GetFQAList", new object[] {
                        Uid,
                        Pwd}, this.GetFQAListOperationCompleted, userState);
        }
        
        private void OnGetFQAListOperationCompleted(object arg) {
            if ((this.GetFQAListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFQAListCompleted(this, new GetFQAListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFQAAnnexList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetFQAAnnexList(string Uid, string Pwd) {
            object[] results = this.Invoke("GetFQAAnnexList", new object[] {
                        Uid,
                        Pwd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetFQAAnnexListAsync(string Uid, string Pwd) {
            this.GetFQAAnnexListAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void GetFQAAnnexListAsync(string Uid, string Pwd, object userState) {
            if ((this.GetFQAAnnexListOperationCompleted == null)) {
                this.GetFQAAnnexListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFQAAnnexListOperationCompleted);
            }
            this.InvokeAsync("GetFQAAnnexList", new object[] {
                        Uid,
                        Pwd}, this.GetFQAAnnexListOperationCompleted, userState);
        }
        
        private void OnGetFQAAnnexListOperationCompleted(object arg) {
            if ((this.GetFQAAnnexListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFQAAnnexListCompleted(this, new GetFQAAnnexListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQuestionList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetQuestionList(string Uid, string Pwd) {
            object[] results = this.Invoke("GetQuestionList", new object[] {
                        Uid,
                        Pwd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetQuestionListAsync(string Uid, string Pwd) {
            this.GetQuestionListAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void GetQuestionListAsync(string Uid, string Pwd, object userState) {
            if ((this.GetQuestionListOperationCompleted == null)) {
                this.GetQuestionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQuestionListOperationCompleted);
            }
            this.InvokeAsync("GetQuestionList", new object[] {
                        Uid,
                        Pwd}, this.GetQuestionListOperationCompleted, userState);
        }
        
        private void OnGetQuestionListOperationCompleted(object arg) {
            if ((this.GetQuestionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQuestionListCompleted(this, new GetQuestionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllIntegralExchange", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllIntegralExchange(string Uid, string Pwd) {
            object[] results = this.Invoke("GetAllIntegralExchange", new object[] {
                        Uid,
                        Pwd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllIntegralExchangeAsync(string Uid, string Pwd) {
            this.GetAllIntegralExchangeAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void GetAllIntegralExchangeAsync(string Uid, string Pwd, object userState) {
            if ((this.GetAllIntegralExchangeOperationCompleted == null)) {
                this.GetAllIntegralExchangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllIntegralExchangeOperationCompleted);
            }
            this.InvokeAsync("GetAllIntegralExchange", new object[] {
                        Uid,
                        Pwd}, this.GetAllIntegralExchangeOperationCompleted, userState);
        }
        
        private void OnGetAllIntegralExchangeOperationCompleted(object arg) {
            if ((this.GetAllIntegralExchangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllIntegralExchangeCompleted(this, new GetAllIntegralExchangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllApprovedIntegralExchange", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllApprovedIntegralExchange(string Uid, string Pwd) {
            object[] results = this.Invoke("GetAllApprovedIntegralExchange", new object[] {
                        Uid,
                        Pwd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllApprovedIntegralExchangeAsync(string Uid, string Pwd) {
            this.GetAllApprovedIntegralExchangeAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void GetAllApprovedIntegralExchangeAsync(string Uid, string Pwd, object userState) {
            if ((this.GetAllApprovedIntegralExchangeOperationCompleted == null)) {
                this.GetAllApprovedIntegralExchangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllApprovedIntegralExchangeOperationCompleted);
            }
            this.InvokeAsync("GetAllApprovedIntegralExchange", new object[] {
                        Uid,
                        Pwd}, this.GetAllApprovedIntegralExchangeOperationCompleted, userState);
        }
        
        private void OnGetAllApprovedIntegralExchangeOperationCompleted(object arg) {
            if ((this.GetAllApprovedIntegralExchangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllApprovedIntegralExchangeCompleted(this, new GetAllApprovedIntegralExchangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertIntegralExchangeToDms", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertIntegralExchangeToDms(string Uid, string Pwd, string txtId, string txtUserId, string txtStatus, string txtGiftId, string txtExchangenumber, string txtDocumentnumber, string txtDeliverNumber, string txtReturnIntegral, string txtTypes, string txtData, string txtGiftName) {
            this.Invoke("InsertIntegralExchangeToDms", new object[] {
                        Uid,
                        Pwd,
                        txtId,
                        txtUserId,
                        txtStatus,
                        txtGiftId,
                        txtExchangenumber,
                        txtDocumentnumber,
                        txtDeliverNumber,
                        txtReturnIntegral,
                        txtTypes,
                        txtData,
                        txtGiftName});
        }
        
        /// <remarks/>
        public void InsertIntegralExchangeToDmsAsync(string Uid, string Pwd, string txtId, string txtUserId, string txtStatus, string txtGiftId, string txtExchangenumber, string txtDocumentnumber, string txtDeliverNumber, string txtReturnIntegral, string txtTypes, string txtData, string txtGiftName) {
            this.InsertIntegralExchangeToDmsAsync(Uid, Pwd, txtId, txtUserId, txtStatus, txtGiftId, txtExchangenumber, txtDocumentnumber, txtDeliverNumber, txtReturnIntegral, txtTypes, txtData, txtGiftName, null);
        }
        
        /// <remarks/>
        public void InsertIntegralExchangeToDmsAsync(string Uid, string Pwd, string txtId, string txtUserId, string txtStatus, string txtGiftId, string txtExchangenumber, string txtDocumentnumber, string txtDeliverNumber, string txtReturnIntegral, string txtTypes, string txtData, string txtGiftName, object userState) {
            if ((this.InsertIntegralExchangeToDmsOperationCompleted == null)) {
                this.InsertIntegralExchangeToDmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertIntegralExchangeToDmsOperationCompleted);
            }
            this.InvokeAsync("InsertIntegralExchangeToDms", new object[] {
                        Uid,
                        Pwd,
                        txtId,
                        txtUserId,
                        txtStatus,
                        txtGiftId,
                        txtExchangenumber,
                        txtDocumentnumber,
                        txtDeliverNumber,
                        txtReturnIntegral,
                        txtTypes,
                        txtData,
                        txtGiftName}, this.InsertIntegralExchangeToDmsOperationCompleted, userState);
        }
        
        private void OnInsertIntegralExchangeToDmsOperationCompleted(object arg) {
            if ((this.InsertIntegralExchangeToDmsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertIntegralExchangeToDmsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateQuestionDmsToWc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateQuestionDmsToWc(string Uid, string Pwd) {
            this.Invoke("UpdateQuestionDmsToWc", new object[] {
                        Uid,
                        Pwd});
        }
        
        /// <remarks/>
        public void UpdateQuestionDmsToWcAsync(string Uid, string Pwd) {
            this.UpdateQuestionDmsToWcAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void UpdateQuestionDmsToWcAsync(string Uid, string Pwd, object userState) {
            if ((this.UpdateQuestionDmsToWcOperationCompleted == null)) {
                this.UpdateQuestionDmsToWcOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateQuestionDmsToWcOperationCompleted);
            }
            this.InvokeAsync("UpdateQuestionDmsToWc", new object[] {
                        Uid,
                        Pwd}, this.UpdateQuestionDmsToWcOperationCompleted, userState);
        }
        
        private void OnUpdateQuestionDmsToWcOperationCompleted(object arg) {
            if ((this.UpdateQuestionDmsToWcCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateQuestionDmsToWcCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertQuestionWcToDms", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertQuestionWcToDms(string Uid, string Pwd, string Id, string WdtId, string WupId, string Title, string Body, string CreateDate, string UserID, string Status) {
            object[] results = this.Invoke("InsertQuestionWcToDms", new object[] {
                        Uid,
                        Pwd,
                        Id,
                        WdtId,
                        WupId,
                        Title,
                        Body,
                        CreateDate,
                        UserID,
                        Status});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertQuestionWcToDmsAsync(string Uid, string Pwd, string Id, string WdtId, string WupId, string Title, string Body, string CreateDate, string UserID, string Status) {
            this.InsertQuestionWcToDmsAsync(Uid, Pwd, Id, WdtId, WupId, Title, Body, CreateDate, UserID, Status, null);
        }
        
        /// <remarks/>
        public void InsertQuestionWcToDmsAsync(string Uid, string Pwd, string Id, string WdtId, string WupId, string Title, string Body, string CreateDate, string UserID, string Status, object userState) {
            if ((this.InsertQuestionWcToDmsOperationCompleted == null)) {
                this.InsertQuestionWcToDmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertQuestionWcToDmsOperationCompleted);
            }
            this.InvokeAsync("InsertQuestionWcToDms", new object[] {
                        Uid,
                        Pwd,
                        Id,
                        WdtId,
                        WupId,
                        Title,
                        Body,
                        CreateDate,
                        UserID,
                        Status}, this.InsertQuestionWcToDmsOperationCompleted, userState);
        }
        
        private void OnInsertQuestionWcToDmsOperationCompleted(object arg) {
            if ((this.InsertQuestionWcToDmsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertQuestionWcToDmsCompleted(this, new InsertQuestionWcToDmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDealerNews", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteDealerNews(string Uid, string Pwd) {
            this.Invoke("DeleteDealerNews", new object[] {
                        Uid,
                        Pwd});
        }
        
        /// <remarks/>
        public void DeleteDealerNewsAsync(string Uid, string Pwd) {
            this.DeleteDealerNewsAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void DeleteDealerNewsAsync(string Uid, string Pwd, object userState) {
            if ((this.DeleteDealerNewsOperationCompleted == null)) {
                this.DeleteDealerNewsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDealerNewsOperationCompleted);
            }
            this.InvokeAsync("DeleteDealerNews", new object[] {
                        Uid,
                        Pwd}, this.DeleteDealerNewsOperationCompleted, userState);
        }
        
        private void OnDeleteDealerNewsOperationCompleted(object arg) {
            if ((this.DeleteDealerNewsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDealerNewsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDealerNewsAnnex", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteDealerNewsAnnex(string Uid, string Pwd) {
            this.Invoke("DeleteDealerNewsAnnex", new object[] {
                        Uid,
                        Pwd});
        }
        
        /// <remarks/>
        public void DeleteDealerNewsAnnexAsync(string Uid, string Pwd) {
            this.DeleteDealerNewsAnnexAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void DeleteDealerNewsAnnexAsync(string Uid, string Pwd, object userState) {
            if ((this.DeleteDealerNewsAnnexOperationCompleted == null)) {
                this.DeleteDealerNewsAnnexOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDealerNewsAnnexOperationCompleted);
            }
            this.InvokeAsync("DeleteDealerNewsAnnex", new object[] {
                        Uid,
                        Pwd}, this.DeleteDealerNewsAnnexOperationCompleted, userState);
        }
        
        private void OnDeleteDealerNewsAnnexOperationCompleted(object arg) {
            if ((this.DeleteDealerNewsAnnexCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDealerNewsAnnexCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertDealerNews", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertDealerNews(string Uid, string Pwd, string Id, string ProductLineID, string Tital, string Body, string UserId, string CreateDate) {
            this.Invoke("InsertDealerNews", new object[] {
                        Uid,
                        Pwd,
                        Id,
                        ProductLineID,
                        Tital,
                        Body,
                        UserId,
                        CreateDate});
        }
        
        /// <remarks/>
        public void InsertDealerNewsAsync(string Uid, string Pwd, string Id, string ProductLineID, string Tital, string Body, string UserId, string CreateDate) {
            this.InsertDealerNewsAsync(Uid, Pwd, Id, ProductLineID, Tital, Body, UserId, CreateDate, null);
        }
        
        /// <remarks/>
        public void InsertDealerNewsAsync(string Uid, string Pwd, string Id, string ProductLineID, string Tital, string Body, string UserId, string CreateDate, object userState) {
            if ((this.InsertDealerNewsOperationCompleted == null)) {
                this.InsertDealerNewsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDealerNewsOperationCompleted);
            }
            this.InvokeAsync("InsertDealerNews", new object[] {
                        Uid,
                        Pwd,
                        Id,
                        ProductLineID,
                        Tital,
                        Body,
                        UserId,
                        CreateDate}, this.InsertDealerNewsOperationCompleted, userState);
        }
        
        private void OnInsertDealerNewsOperationCompleted(object arg) {
            if ((this.InsertDealerNewsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDealerNewsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertDealerNewsAnnex", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertDealerNewsAnnex(string Uid, string Pwd, string Id, string MainId, string Name, string Url, string Type, string UploadUser, string UploadDate) {
            this.Invoke("InsertDealerNewsAnnex", new object[] {
                        Uid,
                        Pwd,
                        Id,
                        MainId,
                        Name,
                        Url,
                        Type,
                        UploadUser,
                        UploadDate});
        }
        
        /// <remarks/>
        public void InsertDealerNewsAnnexAsync(string Uid, string Pwd, string Id, string MainId, string Name, string Url, string Type, string UploadUser, string UploadDate) {
            this.InsertDealerNewsAnnexAsync(Uid, Pwd, Id, MainId, Name, Url, Type, UploadUser, UploadDate, null);
        }
        
        /// <remarks/>
        public void InsertDealerNewsAnnexAsync(string Uid, string Pwd, string Id, string MainId, string Name, string Url, string Type, string UploadUser, string UploadDate, object userState) {
            if ((this.InsertDealerNewsAnnexOperationCompleted == null)) {
                this.InsertDealerNewsAnnexOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDealerNewsAnnexOperationCompleted);
            }
            this.InvokeAsync("InsertDealerNewsAnnex", new object[] {
                        Uid,
                        Pwd,
                        Id,
                        MainId,
                        Name,
                        Url,
                        Type,
                        UploadUser,
                        UploadDate}, this.InsertDealerNewsAnnexOperationCompleted, userState);
        }
        
        private void OnInsertDealerNewsAnnexOperationCompleted(object arg) {
            if ((this.InsertDealerNewsAnnexCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDealerNewsAnnexCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertFunctionSuggest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertFunctionSuggest(string Uid, string Pwd, string Id, string Body, string CreateUserId, string CreateDate, string Sny_Status) {
            this.Invoke("InsertFunctionSuggest", new object[] {
                        Uid,
                        Pwd,
                        Id,
                        Body,
                        CreateUserId,
                        CreateDate,
                        Sny_Status});
        }
        
        /// <remarks/>
        public void InsertFunctionSuggestAsync(string Uid, string Pwd, string Id, string Body, string CreateUserId, string CreateDate, string Sny_Status) {
            this.InsertFunctionSuggestAsync(Uid, Pwd, Id, Body, CreateUserId, CreateDate, Sny_Status, null);
        }
        
        /// <remarks/>
        public void InsertFunctionSuggestAsync(string Uid, string Pwd, string Id, string Body, string CreateUserId, string CreateDate, string Sny_Status, object userState) {
            if ((this.InsertFunctionSuggestOperationCompleted == null)) {
                this.InsertFunctionSuggestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertFunctionSuggestOperationCompleted);
            }
            this.InvokeAsync("InsertFunctionSuggest", new object[] {
                        Uid,
                        Pwd,
                        Id,
                        Body,
                        CreateUserId,
                        CreateDate,
                        Sny_Status}, this.InsertFunctionSuggestOperationCompleted, userState);
        }
        
        private void OnInsertFunctionSuggestOperationCompleted(object arg) {
            if ((this.InsertFunctionSuggestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertFunctionSuggestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteAllWechatOperatLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAllWechatOperatLog(string Uid, string Pwd) {
            this.Invoke("DeleteAllWechatOperatLog", new object[] {
                        Uid,
                        Pwd});
        }
        
        /// <remarks/>
        public void DeleteAllWechatOperatLogAsync(string Uid, string Pwd) {
            this.DeleteAllWechatOperatLogAsync(Uid, Pwd, null);
        }
        
        /// <remarks/>
        public void DeleteAllWechatOperatLogAsync(string Uid, string Pwd, object userState) {
            if ((this.DeleteAllWechatOperatLogOperationCompleted == null)) {
                this.DeleteAllWechatOperatLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAllWechatOperatLogOperationCompleted);
            }
            this.InvokeAsync("DeleteAllWechatOperatLog", new object[] {
                        Uid,
                        Pwd}, this.DeleteAllWechatOperatLogOperationCompleted, userState);
        }
        
        private void OnDeleteAllWechatOperatLogOperationCompleted(object arg) {
            if ((this.DeleteAllWechatOperatLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAllWechatOperatLogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertWechatLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertWechatLog(string Uid, string Pwd, string Id, string BwuId, string OperatTime, string OperatMenu, string Rv1) {
            this.Invoke("InsertWechatLog", new object[] {
                        Uid,
                        Pwd,
                        Id,
                        BwuId,
                        OperatTime,
                        OperatMenu,
                        Rv1});
        }
        
        /// <remarks/>
        public void InsertWechatLogAsync(string Uid, string Pwd, string Id, string BwuId, string OperatTime, string OperatMenu, string Rv1) {
            this.InsertWechatLogAsync(Uid, Pwd, Id, BwuId, OperatTime, OperatMenu, Rv1, null);
        }
        
        /// <remarks/>
        public void InsertWechatLogAsync(string Uid, string Pwd, string Id, string BwuId, string OperatTime, string OperatMenu, string Rv1, object userState) {
            if ((this.InsertWechatLogOperationCompleted == null)) {
                this.InsertWechatLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertWechatLogOperationCompleted);
            }
            this.InvokeAsync("InsertWechatLog", new object[] {
                        Uid,
                        Pwd,
                        Id,
                        BwuId,
                        OperatTime,
                        OperatMenu,
                        Rv1}, this.InsertWechatLogOperationCompleted, userState);
        }
        
        private void OnInsertWechatLogOperationCompleted(object arg) {
            if ((this.InsertWechatLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertWechatLogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAllHospitalsCompletedEventHandler(object sender, GetAllHospitalsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllHospitalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllHospitalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void P_GetCRMDealerCompletedEventHandler(object sender, P_GetCRMDealerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class P_GetCRMDealerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal P_GetCRMDealerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void P_GetDealerProductionPriceCompletedEventHandler(object sender, P_GetDealerProductionPriceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class P_GetDealerProductionPriceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal P_GetDealerProductionPriceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void P_GetCRMDealerHospitalCompletedEventHandler(object sender, P_GetCRMDealerHospitalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class P_GetCRMDealerHospitalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal P_GetCRMDealerHospitalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void P_GetAllCRMProductionCompletedEventHandler(object sender, P_GetAllCRMProductionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class P_GetAllCRMProductionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal P_GetAllCRMProductionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetInHospitalSalesCompletedEventHandler(object sender, GetInHospitalSalesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInHospitalSalesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInHospitalSalesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadHospitalSalesCompletedEventHandler(object sender, UploadHospitalSalesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadHospitalSalesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadHospitalSalesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetCFNListCompletedEventHandler(object sender, GetCFNListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCFNListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCFNListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetProductListCompletedEventHandler(object sender, GetProductListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetLotMasterCompletedEventHandler(object sender, GetLotMasterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLotMasterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLotMasterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDealerAchievingRateCompletedEventHandler(object sender, GetDealerAchievingRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDealerAchievingRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDealerAchievingRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetUploadTimelyCompletedEventHandler(object sender, GetUploadTimelyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUploadTimelyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUploadTimelyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetProductInforCompletedEventHandler(object sender, GetProductInforCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductInforCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductInforCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetLPInventoryCompletedEventHandler(object sender, GetLPInventoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLPInventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLPInventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetUserInformationCompletedEventHandler(object sender, GetUserInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateWechatUserOpenIdCompletedEventHandler(object sender, UpdateWechatUserOpenIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateWechatUserOpenIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateWechatUserOpenIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetUserProductCompletedEventHandler(object sender, GetUserProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetUserPermissionsCompletedEventHandler(object sender, GetUserPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFQAListCompletedEventHandler(object sender, GetFQAListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFQAListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFQAListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFQAAnnexListCompletedEventHandler(object sender, GetFQAAnnexListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFQAAnnexListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFQAAnnexListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetQuestionListCompletedEventHandler(object sender, GetQuestionListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQuestionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQuestionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAllIntegralExchangeCompletedEventHandler(object sender, GetAllIntegralExchangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllIntegralExchangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllIntegralExchangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAllApprovedIntegralExchangeCompletedEventHandler(object sender, GetAllApprovedIntegralExchangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllApprovedIntegralExchangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllApprovedIntegralExchangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertIntegralExchangeToDmsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateQuestionDmsToWcCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertQuestionWcToDmsCompletedEventHandler(object sender, InsertQuestionWcToDmsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertQuestionWcToDmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertQuestionWcToDmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteDealerNewsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteDealerNewsAnnexCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertDealerNewsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertDealerNewsAnnexCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertFunctionSuggestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteAllWechatOperatLogCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertWechatLogCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591