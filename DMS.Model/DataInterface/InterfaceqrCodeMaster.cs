/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : InterfaceqrCodeMaster
 * Created Time: 2015/12/10 16:37:02
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
    /// <summary>
    ///	InterfaceqrCodeMaster
    /// </summary>
    [Serializable]
    public class InterfaceqrCodeMaster : BaseModel
    {
        #region Private Members 12

        private Guid _id;
        private string _qrcode;
        private int? _status;
        private string _usercode;
        private string _channel;
        private int? _linenbr;
        private string _filename;
        private DateTime _importdate;
        private string _clientid;
        private string _batchnbr;
        private string _errormsg;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public InterfaceqrCodeMaster()
        {
            _id = Guid.Empty;
            _qrcode = null;
            _status = null;
            _usercode = null;
            _channel = null;
            _linenbr = null;
            _filename = null;
            _importdate = new DateTime();
            _clientid = null;
            _batchnbr = null;
            _errormsg = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 主键
        /// </summary>		
        public Guid Id
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 二维码
        /// </summary>		
        public string QrCode
        {
            get { return _qrcode; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for QrCode", value, value.ToString());

                _qrcode = value;
            }
        }

        /// <summary>
        /// 状态
        /// </summary>		
        public int? Status
        {
            get { return _status; }
            set { _status = value; }
        }

        /// <summary>
        /// 使用对象编号
        /// </summary>		
        public string UserCode
        {
            get { return _usercode; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for UserCode", value, value.ToString());

                _usercode = value;
            }
        }

        /// <summary>
        /// 使用渠道
        /// </summary>		
        public string Channel
        {
            get { return _channel; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Channel", value, value.ToString());

                _channel = value;
            }
        }

        /// <summary>
        /// 行号
        /// </summary>		
        public int? LineNbr
        {
            get { return _linenbr; }
            set { _linenbr = value; }
        }

        /// <summary>
        /// 生成文件物理路径（BSC不使用）
        /// </summary>		
        public string FileName
        {
            get { return _filename; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for FileName", value, value.ToString());

                _filename = value;
            }
        }

        /// <summary>
        /// 接口获取日期
        /// </summary>		
        public DateTime ImportDate
        {
            get { return _importdate; }
            set { _importdate = value; }
        }

        /// <summary>
        /// 客户端ID
        /// </summary>		
        public string Clientid
        {
            get { return _clientid; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Clientid", value, value.ToString());

                _clientid = value;
            }
        }

        /// <summary>
        /// 处理批次
        /// </summary>		
        public string BatchNbr
        {
            get { return _batchnbr; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for BatchNbr", value, value.ToString());

                _batchnbr = value;
            }
        }

        /// <summary>
        /// 接口处理错误信息
        /// </summary>		
        public string ErrorMsg
        {
            get { return _errormsg; }
            set
            {
                if (value != null && value.Length > 1073741823)
                    throw new ArgumentOutOfRangeException("Invalid value for ErrorMsg", value, value.ToString());

                _errormsg = value;
            }
        }




        #endregion





    }
}
