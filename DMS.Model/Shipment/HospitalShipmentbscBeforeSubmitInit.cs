/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : HospitalShipmentbscBeforeSubmitInit
 * Created Time: 2018/6/25 9:33:11
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
    /// <summary>
    ///	HospitalShipmentbscBeforeSubmitInit
    /// </summary>
    [Serializable]
    public class HospitalShipmentbscBeforeSubmitInit : BaseModel
    {
        #region Private Members 37

        private Guid _id;
        private string _identitytype;
        private string _identitycode;
        private Guid _sphid;
        private string _sphtype;
        private Guid _shipment_pma_id;
        private string _lotnumber;
        private DateTime _expireddate;
        private decimal _shipmentqty;
        private decimal? _totalqty;
        private bool _iscrm;
        private string _customerfacenbr;
        private Guid _cfnid;
        private DateTime _curdate;
        private DateTime _shipmentdate;
        private bool? _hasattachment;
        private DateTime? _actualshipdate;
        private DateTime? _convertexpdate;
        private Guid? _dealerid;
        private string _editqrcode;
        private string _qrcode;
        private bool? _isshipdatecrossquarter;
        private bool? _isactualshipdatecrossquarter;
        private string _errordesc;
        private Guid _hospitalid;
        private Guid _bumid;
        private bool _iserror;
        private string _errortype;
        private string _errorfixsuggestion;
        private Guid _whmid;
        private string _whmname;
        private string _cfnchinesename;
        private int? _convertfactor;
        private decimal? _availableqty;
        private decimal? _salesunitprice;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public HospitalShipmentbscBeforeSubmitInit()
        {
            _id = Guid.Empty;
            _identitytype = null;
            _identitycode = null;
            _sphid = Guid.Empty;
            _sphtype = null;
            _shipment_pma_id = Guid.Empty;
            _lotnumber = null;
            _expireddate = new DateTime();
            _shipmentqty = 0;
            _totalqty = null;
            _iscrm = false;
            _customerfacenbr = null;
            _cfnid = Guid.Empty;
            _curdate = new DateTime();
            _shipmentdate = new DateTime();
            _hasattachment = null;
            _actualshipdate = null;
            _convertexpdate = null;
            _dealerid = null;
            _editqrcode = null;
            _qrcode = null;
            _isshipdatecrossquarter = null;
            _isactualshipdatecrossquarter = null;
            _errordesc = null;
            _hospitalid = Guid.Empty;
            _bumid = Guid.Empty;
            _iserror = false;
            _errortype = null;
            _errorfixsuggestion = null;
            _whmid = Guid.Empty;
            _whmname = null;
            _cfnchinesename = null;
            _convertfactor = null;
            _availableqty = null;
            _salesunitprice = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 
        /// </summary>		
        public Guid Id
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string IdentityType
        {
            get { return _identitytype; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for IdentityType", value, value.ToString());

                _identitytype = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string IdentityCode
        {
            get { return _identitycode; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for IdentityCode", value, value.ToString());

                _identitycode = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid SphId
        {
            get { return _sphid; }
            set { _sphid = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string SphType
        {
            get { return _sphtype; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for SphType", value, value.ToString());

                _sphtype = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid ShipmentPmaId
        {
            get { return _shipment_pma_id; }
            set { _shipment_pma_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string LotNumber
        {
            get { return _lotnumber; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for LotNumber", value, value.ToString());

                _lotnumber = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime ExpiredDate
        {
            get { return _expireddate; }
            set { _expireddate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public decimal ShipmentQty
        {
            get { return _shipmentqty; }
            set { _shipmentqty = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public decimal? TotalQty
        {
            get { return _totalqty; }
            set { _totalqty = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public bool Iscrm
        {
            get { return _iscrm; }
            set { _iscrm = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CustomerFaceNbr
        {
            get { return _customerfacenbr; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for CustomerFaceNbr", value, value.ToString());

                _customerfacenbr = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid CfnId
        {
            get { return _cfnid; }
            set { _cfnid = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime CurDate
        {
            get { return _curdate; }
            set { _curdate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime ShipmentDate
        {
            get { return _shipmentdate; }
            set { _shipmentdate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public bool? HasAttachment
        {
            get { return _hasattachment; }
            set { _hasattachment = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime? ActualShipDate
        {
            get { return _actualshipdate; }
            set { _actualshipdate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime? ConvertExpDate
        {
            get { return _convertexpdate; }
            set { _convertexpdate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? Dealerid
        {
            get { return _dealerid; }
            set { _dealerid = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string EditQrCode
        {
            get { return _editqrcode; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for EditQrCode", value, value.ToString());

                _editqrcode = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string QrCode
        {
            get { return _qrcode; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for QrCode", value, value.ToString());

                _qrcode = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public bool? IsShipDateCrossQuarter
        {
            get { return _isshipdatecrossquarter; }
            set { _isshipdatecrossquarter = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public bool? IsActualShipDateCrossQuarter
        {
            get { return _isactualshipdatecrossquarter; }
            set { _isactualshipdatecrossquarter = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string ErrorDesc
        {
            get { return _errordesc; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for ErrorDesc", value, value.ToString());

                _errordesc = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid HospitalId
        {
            get { return _hospitalid; }
            set { _hospitalid = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid BumId
        {
            get { return _bumid; }
            set { _bumid = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public bool IsError
        {
            get { return _iserror; }
            set { _iserror = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string ErrorType
        {
            get { return _errortype; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for ErrorType", value, value.ToString());

                _errortype = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string ErrorFixSuggestion
        {
            get { return _errorfixsuggestion; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for ErrorFixSuggestion", value, value.ToString());

                _errorfixsuggestion = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid WhmId
        {
            get { return _whmid; }
            set { _whmid = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string WhmName
        {
            get { return _whmname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());

                _whmname = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CfnChineseName
        {
            get { return _cfnchinesename; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for ChineseName", value, value.ToString());

                _cfnchinesename = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public int? ConvertFactor
        {
            get { return _convertfactor; }
            set { _convertfactor = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public decimal? AvailableQty
        {
            get { return _availableqty; }
            set { _availableqty = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public decimal? SalesUnitPrice
        {
            get { return _salesunitprice; }
            set { _salesunitprice = value; }
        }




        #endregion





    }
}
