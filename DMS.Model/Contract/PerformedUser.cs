/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : PerformedUser
 * Created Time: 2013/12/16 15:53:45
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
    /// <summary>
    ///	PerformedUser
    /// </summary>
    [Serializable]
    public class PerformedUser
    {
        #region Private Members 7
        private string _performed_user1;
        private string _performed_user2;
        private string _performed_user3;
        private string _performed_user4;
        private string _performed_user5;
        private string _performed_user6;
        private string _performed_user7;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public PerformedUser()
        {
            _performed_user1 = null;
            _performed_user2 = null;
            _performed_user3 = null;
            _performed_user4 = null;
            _performed_user5 = null;
            _performed_user6 = null;
            _performed_user7 = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// PerformedUser 1
        /// </summary>		
        public string PerformedUser1
        {
            get { return _performed_user1; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for PerformedUser1", value, value.ToString());

                _performed_user1 = value;
            }
        }

        /// <summary>
        /// PerformedUser 2
        /// </summary>		
        public string PerformedUser2
        {
            get { return _performed_user2; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for PerformedUser2", value, value.ToString());

                _performed_user2 = value;
            }
        }

        /// <summary>
        /// PerformedUser 3
        /// </summary>		
        public string PerformedUser3
        {
            get { return _performed_user3; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for PerformedUser3", value, value.ToString());

                _performed_user3 = value;
            }
        }

        /// <summary>
        /// PerformedUser 4
        /// </summary>		
        public string PerformedUser4
        {
            get { return _performed_user4; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for PerformedUser4", value, value.ToString());

                _performed_user4 = value;
            }
        }

        /// <summary>
        /// PerformedUser 5
        /// </summary>		
        public string PerformedUser5
        {
            get { return _performed_user5; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for PerformedUser5", value, value.ToString());

                _performed_user5 = value;
            }
        }

        /// <summary>
        /// PerformedUser 6
        /// </summary>		
        public string PerformedUser6
        {
            get { return _performed_user6; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for PerformedUser6", value, value.ToString());

                _performed_user6 = value;
            }
        }

        /// <summary>
        /// PerformedUser 7
        /// </summary>		
        public string PerformedUser7
        {
            get { return _performed_user7; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for PerformedUser7", value, value.ToString());

                _performed_user7 = value;
            }
        }



        #endregion



    }
}
