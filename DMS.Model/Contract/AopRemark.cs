/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : AopRemark
 * Created Time: 2014/7/20 13:51:31
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	AopRemark
	/// </summary>
	[Serializable]
	public class AopRemark : BaseModel
	{
		#region Private Members 8
		
		private Guid _id; 
		private Guid? _contractid; 
		private Guid? _hos_id; 
		private string _type; 
		private string _body; 
		private string _rv1; 
		private string _rv2; 
		private string _rv3; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public AopRemark()
		{
			_id = Guid.Empty; 
			_contractid = null;
			_hos_id = null;
			_type = null; 
			_body = null; 
			_rv1 = null; 
			_rv2 = null; 
			_rv3 = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 合同ID
		/// </summary>		
		public Guid? Contractid
		{
			get { return _contractid; }
			set { _contractid = value; }
		}
			
		/// <summary>
		/// 医院ID
		/// </summary>		
		public Guid? HosId
		{
			get { return _hos_id; }
			set { _hos_id = value; }
		}
			
		/// <summary>
		/// 备注类型
		/// </summary>		
		public string Type
		{
			get { return _type; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Type", value, value.ToString());
				
				_type = value;
			}
		}
			
		/// <summary>
		/// 备注
		/// </summary>		
		public string Body
		{
			get { return _body; }
			set	
			{
				if( value!= null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for Body", value, value.ToString());
				
				_body = value;
			}
		}
			
		/// <summary>
		/// 字段1
		/// </summary>		
		public string Rv1
		{
			get { return _rv1; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Rv1", value, value.ToString());
				
				_rv1 = value;
			}
		}
			
		/// <summary>
		/// 字段2
		/// </summary>		
		public string Rv2
		{
			get { return _rv2; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Rv2", value, value.ToString());
				
				_rv2 = value;
			}
		}
			
		/// <summary>
		/// 字段3
		/// </summary>		
		public string Rv3
		{
			get { return _rv3; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Rv3", value, value.ToString());
				
				_rv3 = value;
			}
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
