/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : PartsClassification
 * Created Time: 2009-7-6 13:11:30
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
    /// <summary>
    ///	PartsClassification
    /// </summary>
    [Serializable]
    public class PartsClassification : BaseModel
    {
        #region Private Members

        private string _name;
        private string _englishname;
        private Guid? _id;
        private Guid? _productline_bum_id;
        private Guid? _parentclassification_pct_id;
        private string _description;
        private bool _hasChildren;
        private bool _isAuthorizationNode;
        private string _parentcode;
        private string _code;
        private string _clsnode;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public PartsClassification()
        {
            _name = null;
            _englishname = null;
            _description = null;
            _hasChildren = false;
            _isAuthorizationNode = false;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 
        /// </summary>		
        public string Name
        {
            get { return _name; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());

                _name = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string EnglishName
        {
            get { return _englishname; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for EnglishName", value, value.ToString());

                _englishname = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? Id
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? ProductLineId
        {
            get { return _productline_bum_id; }
            set { _productline_bum_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? ParentId
        {
            get { return _parentclassification_pct_id; }
            set { _parentclassification_pct_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Description
        {
            get { return _description; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Description", value, value.ToString());

                _description = value;
            }
        }

        public bool HasChildren
        {
            get { return _hasChildren; }
            set
            {
                _hasChildren = value;
            }
        }

        public bool IsAuthorizationNode
        {
            get { return _isAuthorizationNode; }
            set
            {
                _isAuthorizationNode = value;
            }
        }

        public string ParentCode
        {
            get { return _parentcode; }
            set { _parentcode = value; }
        }

        public string Code
        {
            get { return _code; }
            set { _code = value; }
        }

        public string ClsNode
        {
            get { return _clsnode; }
            set { _clsnode = value; }
        }



        #endregion





    }
}
