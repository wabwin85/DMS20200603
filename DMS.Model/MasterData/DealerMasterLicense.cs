/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : DealerMasterLicense
 * Created Time: 2016/4/11 17:52:42
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
    /// <summary>
    ///	DealerMasterLicense
    /// </summary>
    [Serializable]
    public class DealerMasterLicense : BaseModel
    {
        #region Private Members 41

        private Guid _dma_id;
        private string _curlicenseno;
        private DateTime? _curlicensevalidfrom;
        private DateTime? _curlicensevalidto;
        private string _cursecondclasscatagory;
        private string _curfilingno;
        private DateTime? _curfilingvalidfrom;
        private DateTime? _curfilingvalidto;
        private string _curthirdclasscatagory;
        private string _currev1;
        private string _currev2;
        private string _currev3;
        private string _currev4;
        private DateTime? _curupdatedate;
        private Guid? _curupdateuser;
        private Guid? _newapplyid;
        private string _newapplystatus;
        private string _newlicenseno;
        private DateTime? _newlicensevalidfrom;
        private DateTime? _newlicensevalidto;
        private string _newsecondclasscatagory;
        private string _newfilingno;
        private DateTime? _newfilingvalidfrom;
        private DateTime? _newfilingvalidto;
        private string _newthirdclasscatagory;
        private string _newrev1;
        private string _newrev2;
        private string _newrev3;
        private string _newrev4;
        private DateTime? _newapplydate;
        private Guid? _newapplyuser;
        private DateTime? _newapprovedate;
        private Guid? _newapproveuser;
        private string _curbizaddress;
        private string _curwhmaddress;
        private string _currespperson;
        private string _curlegalperson;
        private string _newbizaddress;
        private string _newwhmaddress;
        private string _newrespperson;
        private string _newlegalperson;
        private string _salesrep;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public DealerMasterLicense()
        {
            _dma_id = Guid.Empty;
            _curlicenseno = null;
            _curlicensevalidfrom = null;
            _curlicensevalidto = null;
            _cursecondclasscatagory = null;
            _curfilingno = null;
            _curfilingvalidfrom = null;
            _curfilingvalidto = null;
            _curthirdclasscatagory = null;
            _currev1 = null;
            _currev2 = null;
            _currev3 = null;
            _currev4 = null;
            _curupdatedate = null;
            _curupdateuser = null;
            _newapplyid = null;
            _newapplystatus = null;
            _newlicenseno = null;
            _newlicensevalidfrom = null;
            _newlicensevalidto = null;
            _newsecondclasscatagory = null;
            _newfilingno = null;
            _newfilingvalidfrom = null;
            _newfilingvalidto = null;
            _newthirdclasscatagory = null;
            _newrev1 = null;
            _newrev2 = null;
            _newrev3 = null;
            _newrev4 = null;
            _newapplydate = null;
            _newapplyuser = null;
            _newapprovedate = null;
            _newapproveuser = null;
            _curbizaddress = null;
            _curwhmaddress = null;
            _currespperson = null;
            _curlegalperson = null;
            _newbizaddress = null;
            _newwhmaddress = null;
            _newrespperson = null;
            _newlegalperson = null;
            _salesrep = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 经销商标识ID
        /// </summary>		
        public Guid DmaId
        {
            get { return _dma_id; }
            set { _dma_id = value; }
        }

        /// <summary>
        /// 当前医疗器械经营许可证编号
        /// </summary>		
        public string CurLicenseNo
        {
            get { return _curlicenseno; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CurLicenseNo", value, value.ToString());

                _curlicenseno = value;
            }
        }

        /// <summary>
        /// 当前医疗器械经营许可证有效起始日期
        /// </summary>		
        public DateTime? CurLicenseValidFrom
        {
            get { return _curlicensevalidfrom; }
            set { _curlicensevalidfrom = value; }
        }

        /// <summary>
        /// 当前医疗器械经营许可证有效结束日期
        /// </summary>		
        public DateTime? CurLicenseValidTo
        {
            get { return _curlicensevalidto; }
            set { _curlicensevalidto = value; }
        }

        /// <summary>
        /// 当前三类医疗器械分类代码（一个经销商对应多个分类代码，逗号分隔）
        /// </summary>		
        public string CurSecondClassCatagory
        {
            get { return _cursecondclasscatagory; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for CurSecondClassCatagory", value, value.ToString());

                _cursecondclasscatagory = value;
            }
        }

        /// <summary>
        /// 当前医疗器械备案凭证号
        /// </summary>		
        public string CurFilingNo
        {
            get { return _curfilingno; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CurFilingNo", value, value.ToString());

                _curfilingno = value;
            }
        }

        /// <summary>
        /// 当前医疗器械备案凭证有效起始日期
        /// </summary>		
        public DateTime? CurFilingValidFrom
        {
            get { return _curfilingvalidfrom; }
            set { _curfilingvalidfrom = value; }
        }

        /// <summary>
        /// 当前医疗器械备案凭证有效结束日期（不强制填写）
        /// </summary>		
        public DateTime? CurFilingValidTo
        {
            get { return _curfilingvalidto; }
            set { _curfilingvalidto = value; }
        }

        /// <summary>
        /// 当前二类医疗器械分类代码（一个经销商对应多个分类代码，逗号分隔）
        /// </summary>		
        public string CurThirdClassCatagory
        {
            get { return _curthirdclasscatagory; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for CurThirdClassCatagory", value, value.ToString());

                _curthirdclasscatagory = value;
            }
        }

        /// <summary>
        /// 当前证照信息保留字段1
        /// </summary>		
        public string CurRev1
        {
            get { return _currev1; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for CurRev1", value, value.ToString());

                _currev1 = value;
            }
        }

        /// <summary>
        /// 当前证照信息保留字段2
        /// </summary>		
        public string CurRev2
        {
            get { return _currev2; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for CurRev2", value, value.ToString());

                _currev2 = value;
            }
        }

        /// <summary>
        /// 当前证照信息保留字段3
        /// </summary>		
        public string CurRev3
        {
            get { return _currev3; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for CurRev3", value, value.ToString());

                _currev3 = value;
            }
        }

        /// <summary>
        /// 当前证照信息保留字段4
        /// </summary>		
        public string CurRev4
        {
            get { return _currev4; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for CurRev4", value, value.ToString());

                _currev4 = value;
            }
        }

        /// <summary>
        /// 当前证照信息更新时间
        /// </summary>		
        public DateTime? CurUpdateDate
        {
            get { return _curupdatedate; }
            set { _curupdatedate = value; }
        }

        /// <summary>
        /// 当前证照信息更新人
        /// </summary>		
        public Guid? CurUpdateUser
        {
            get { return _curupdateuser; }
            set { _curupdateuser = value; }
        }

        /// <summary>
        /// 申请新增或变更记录ID
        /// </summary>		
        public Guid? NewApplyid
        {
            get { return _newapplyid; }
            set { _newapplyid = value; }
        }

        /// <summary>
        /// 申请新增或变更记录状态
        /// </summary>		
        public string NewApplyStatus
        {
            get { return _newapplystatus; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for NewApplyStatus", value, value.ToString());

                _newapplystatus = value;
            }
        }

        /// <summary>
        /// 修改的医疗器械经营许可证编号
        /// </summary>		
        public string NewLicenseNo
        {
            get { return _newlicenseno; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for NewLicenseNo", value, value.ToString());

                _newlicenseno = value;
            }
        }

        /// <summary>
        /// 修改的医疗器械经营许可证有效起始日期
        /// </summary>		
        public DateTime? NewLicenseValidFrom
        {
            get { return _newlicensevalidfrom; }
            set { _newlicensevalidfrom = value; }
        }

        /// <summary>
        /// 修改的医疗器械经营许可证有效结束日期
        /// </summary>		
        public DateTime? NewLicenseValidTo
        {
            get { return _newlicensevalidto; }
            set { _newlicensevalidto = value; }
        }

        /// <summary>
        /// 修改的三类医疗器械分类代码（一个经销商对应多个分类代码，逗号分隔）
        /// </summary>		
        public string NewSecondClassCatagory
        {
            get { return _newsecondclasscatagory; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for NewSecondClassCatagory", value, value.ToString());

                _newsecondclasscatagory = value;
            }
        }

        /// <summary>
        /// 修改的医疗器械备案凭证号
        /// </summary>		
        public string NewFilingNo
        {
            get { return _newfilingno; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for NewFilingNo", value, value.ToString());

                _newfilingno = value;
            }
        }

        /// <summary>
        /// 修改的医疗器械备案凭证有效起始日期
        /// </summary>		
        public DateTime? NewFilingValidFrom
        {
            get { return _newfilingvalidfrom; }
            set { _newfilingvalidfrom = value; }
        }

        /// <summary>
        /// 修改的医疗器械备案凭证有效结束日期（不强制填写）
        /// </summary>		
        public DateTime? NewFilingValidTo
        {
            get { return _newfilingvalidto; }
            set { _newfilingvalidto = value; }
        }

        /// <summary>
        /// 修改的二类医疗器械分类代码（一个经销商对应多个分类代码，逗号分隔）
        /// </summary>		
        public string NewThirdClassCatagory
        {
            get { return _newthirdclasscatagory; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for NewThirdClassCatagory", value, value.ToString());

                _newthirdclasscatagory = value;
            }
        }

        /// <summary>
        /// 修改的证照信息保留字段1
        /// </summary>		
        public string NewRev1
        {
            get { return _newrev1; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for NewRev1", value, value.ToString());

                _newrev1 = value;
            }
        }

        /// <summary>
        /// 修改的证照信息保留字段2
        /// </summary>		
        public string NewRev2
        {
            get { return _newrev2; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for NewRev2", value, value.ToString());

                _newrev2 = value;
            }
        }

        /// <summary>
        /// 修改的证照信息保留字段3
        /// </summary>		
        public string NewRev3
        {
            get { return _newrev3; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for NewRev3", value, value.ToString());

                _newrev3 = value;
            }
        }

        /// <summary>
        /// 修改的证照信息保留字段4
        /// </summary>		
        public string NewRev4
        {
            get { return _newrev4; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for NewRev4", value, value.ToString());

                _newrev4 = value;
            }
        }

        /// <summary>
        /// 修改的证照信息申请时间
        /// </summary>		
        public DateTime? NewApplyDate
        {
            get { return _newapplydate; }
            set { _newapplydate = value; }
        }

        /// <summary>
        /// 修改的证照信息申请人
        /// </summary>		
        public Guid? NewApplyUser
        {
            get { return _newapplyuser; }
            set { _newapplyuser = value; }
        }

        /// <summary>
        /// 修改的证照信息审批时间
        /// </summary>		
        public DateTime? NewApproveDate
        {
            get { return _newapprovedate; }
            set { _newapprovedate = value; }
        }

        /// <summary>
        /// 修改的证照信息审批人
        /// </summary>		
        public Guid? NewApproveUser
        {
            get { return _newapproveuser; }
            set { _newapproveuser = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CurBizAddress
        {
            get { return _curbizaddress; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for CurBizAddress", value, value.ToString());

                _curbizaddress = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CurwhmAddress
        {
            get { return _curwhmaddress; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for CurwhmAddress", value, value.ToString());

                _curwhmaddress = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CurRespPerson
        {
            get { return _currespperson; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for CurRespPerson", value, value.ToString());

                _currespperson = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CurLegalPerson
        {
            get { return _curlegalperson; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for CurLegalPerson", value, value.ToString());

                _curlegalperson = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string NewBizAddress
        {
            get { return _newbizaddress; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for NewBizAddress", value, value.ToString());

                _newbizaddress = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string NewwhmAddress
        {
            get { return _newwhmaddress; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for NewwhmAddress", value, value.ToString());

                _newwhmaddress = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string NewRespPerson
        {
            get { return _newrespperson; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for NewRespPerson", value, value.ToString());

                _newrespperson = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string NewLegalPerson
        {
            get { return _newlegalperson; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for NewLegalPerson", value, value.ToString());

                _newlegalperson = value;
            }
        }
        /// <summary>
        /// 波科销售人员
        /// </summary>
        public string SalesRep
        {
            get { return _salesrep; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for SalesRep", value, value.ToString());

                _salesrep = value;
            }
        }



        #endregion





    }
}
