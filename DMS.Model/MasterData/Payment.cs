/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : Payment
 * Created Time: 2010-5-7 14:15:32
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	Payment
	/// </summary>
	[Serializable]
	public class Payment : BaseModel
	{
		#region Private Members
		
		private Guid _id; 
		private string _name; 
		private string _description; 
		private string _parameter1; 
		private string _parameter2; 
		private string _parameter3; 
		private string _parameter4; 
		private string _parameter5; 
		private string _parameter6; 
		private string _parameter7; 
		private string _parameter8; 
		private bool _activeflag; 
		private bool _deleteflag; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Payment()
		{
			_id = new Guid(); 
			_name = null; 
			_description = null; 
			_parameter1 = null; 
			_parameter2 = null; 
			_parameter3 = null; 
			_parameter4 = null; 
			_parameter5 = null; 
			_parameter6 = null; 
			_parameter7 = null; 
			_parameter8 = null; 
			_activeflag = false; 
			_deleteflag = false; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 支付方式主键
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 支付方式名称
		/// </summary>		
		public string Name
		{
			get { return _name; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				
				_name = value;
			}
		}
			
		/// <summary>
		/// 支付方式说明
		/// </summary>		
		public string Description
		{
			get { return _description; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Description", value, value.ToString());
				
				_description = value;
			}
		}
			
		/// <summary>
		/// 首付比例
		/// </summary>		
		public string Parameter1
		{
			get { return _parameter1; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Parameter1", value, value.ToString());
				
				_parameter1 = value;
			}
		}
			
		/// <summary>
		/// 尾款期限
		/// </summary>		
		public string Parameter2
		{
			get { return _parameter2; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Parameter2", value, value.ToString());
				
				_parameter2 = value;
			}
		}
			
		/// <summary>
		/// PMT_Parameter3
		/// </summary>		
		public string Parameter3
		{
			get { return _parameter3; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Parameter3", value, value.ToString());
				
				_parameter3 = value;
			}
		}
			
		/// <summary>
		/// PMT_Parameter4
		/// </summary>		
		public string Parameter4
		{
			get { return _parameter4; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Parameter4", value, value.ToString());
				
				_parameter4 = value;
			}
		}
			
		/// <summary>
		/// PMT_Parameter5
		/// </summary>		
		public string Parameter5
		{
			get { return _parameter5; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Parameter5", value, value.ToString());
				
				_parameter5 = value;
			}
		}
			
		/// <summary>
		/// PMT_Parameter6
		/// </summary>		
		public string Parameter6
		{
			get { return _parameter6; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Parameter6", value, value.ToString());
				
				_parameter6 = value;
			}
		}
			
		/// <summary>
		/// PMT_Parameter7
		/// </summary>		
		public string Parameter7
		{
			get { return _parameter7; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Parameter7", value, value.ToString());
				
				_parameter7 = value;
			}
		}
			
		/// <summary>
		/// PMT_Parameter8
		/// </summary>		
		public string Parameter8
		{
			get { return _parameter8; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Parameter8", value, value.ToString());
				
				_parameter8 = value;
			}
		}
			
		/// <summary>
		/// PMT_ActiveFlag
		/// </summary>		
		public bool ActiveFlag
		{
			get { return _activeflag; }
			set { _activeflag = value; }
		}
			
		/// <summary>
		/// PMT_DeleteFlag
		/// </summary>		
		public bool DeleteFlag
		{
			get { return _deleteflag; }
			set { _deleteflag = value; }
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
