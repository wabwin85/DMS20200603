!function ($) { $.fn.extend({ rowspan: function (colIdx) { return this.each(function () { var that; $("tr", this).each(function (row) { $("td:eq(" + colIdx + ")", this).filter(":visible").each(function (col) { null != that && $(this).html() == $(that).html() ? (rowspan = $(that).attr("rowSpan"), null == rowspan && ($(that).attr("rowSpan", 1), rowspan = $(that).attr("rowSpan")), rowspan = Number(rowspan) + 1, $(that).attr("rowSpan", rowspan), $(this).hide()) : that = this }) }) }) } }), $.fn.slideLeftHide = function (speed, callback) { this.animate({ width: "hide", paddingLeft: "hide", paddingRight: "hide", marginLeft: "hide", marginRight: "hide" }, speed, callback) }, $.fn.slideLeftShow = function (speed, callback) { this.animate({ width: "show", paddingLeft: "show", paddingRight: "show", marginLeft: "show", marginRight: "show" }, speed, callback) }, $.fn.flash = function (color, duration) { var current = this.css("color"); this.animate({ color: color }, duration / 2), this.animate({ color: current }, duration / 2) }, $.extend({ isNullOrEmpty: function (s) { var t = typeof s; return "undefined" == t || null == s || "string" == t && "" == s } }) }(jQuery); var Common = {}; Common = function () { var that = { AppVirtualPath: "", PageHome: "", GetUrlParam: function (name) { var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"), r = window.location.search.substr(1).match(reg); return null != r ? decodeURIComponent(r[2]) : "" }, GetStringParam: function (str, name) { var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"), r = str.match(reg); return null != r ? unescape(r[2]) : "" }, GetUrlParamList: function () { var rtn = {}, url = location.href; if (-1 !== url.indexOf("?")) for (var strs = (url.substr(url.indexOf("?") + 1) + "&").split("&"), i = 0; i < strs.length - 1; i++) { var key = strs[i].substring(0, strs[i].indexOf("=")), val = strs[i].substring(strs[i].indexOf("=") + 1); rtn[key] = val } return rtn }, UpdateUrlParams: function (url, name, value) { var r = url; if (null != r && "undefined" != r && "" != r) { value = encodeURIComponent(value); var reg = new RegExp("(^|)" + name + "=([^&]*)(|$)"), tmp = name + "=" + value; r = null != url.match(reg) ? url.replace(eval(reg), tmp) : url.match("[?]") ? url + "&" + tmp : url + "?" + tmp } return r }, StringContains: function (source, words, split) { var s = source.split(split); for (i = 0; i < s.length; i++) if (s[i] == words) return !0; return !1 }, GetTimestamp: function () { return Date.parse(new Date) / 1e3 }, FormatDate: function (date, fmt) { var o = { "M+": date.getMonth() + 1, "d+": date.getDate(), "h+": date.getHours(), "m+": date.getMinutes(), "s+": date.getSeconds(), "q+": Math.floor((date.getMonth() + 3) / 3), S: date.getMilliseconds() }; for (var k in /(y+)/.test(fmt) && (fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length))), o) new RegExp("(" + k + ")").test(fmt) && (fmt = fmt.replace(RegExp.$1, 1 == RegExp.$1.length ? o[k] : ("00" + o[k]).substr(("" + o[k]).length))); return fmt } }; return that }(), function ($) { $.fn.FrameButton = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { if ("string" == typeof param1) { var func = $.fn.FrameButton.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var my = $(this), setting = $.extend({}, $.fn.FrameButton.defaults, param1); my.addClass(setting.className), my.css(setting.style), "" == setting.icon ? my.html(setting.text) : my.html('<i class="fa fa-fw fa-' + setting.icon + '"></i>&nbsp;&nbsp;' + setting.text), my.kendoButton({ click: setting.onClick }) } }, $.fn.FrameButton.defaults = $.extend({}, { text: "", icon: "", style: {}, className: "btn-primary", onClick: function () { } }), $.fn.FrameButton.methods = { disable: function (my) { $(my).data("kendoButton").enable(!1) }, enable: function (my) { $(my).data("kendoButton").enable() }, getControl: function (my) { return $(my).data("kendoButton") } } }(jQuery), function ($) { $.fn.FrameControl = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameControl.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } } }, $.fn.FrameControl.methods = { getValue: function (my) { var controlId = $(my).attr("id"); if ("hidden" == $(my).attr("type")) return $(my).val(); var type = $(my).data("type"); if (void 0 === type) return null; var rtn = ""; return eval("rtn = $(my)." + type + "('getValue')"), rtn } } }(jQuery), function ($) { $.fn.FrameDatePicker = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { var controlId = $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameDatePicker.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var setting = $.extend({}, $.fn.FrameDatePicker.defaults, param1); if (setting.value || (setting.value = $.fn.FrameDatePicker.defaults.value), $(this).data(setting), $(this).empty(), setting.readonly) { var e = $.fn.FrameSpan(controlId + "_Control"); $(this).append(e), $("#" + controlId + "_Control").html(setting.value) } else { var html = ""; html += '<input id="' + controlId + '_Control" type="text" class="' + setting.className + '" style="' + setting.style + '" />', $(this).append(html), setting.min = $.isNullOrEmpty(setting.min) ? "1900-01-01" : setting.min, setting.max = $.isNullOrEmpty(setting.max) ? "2099-12-31" : setting.max, $("#" + controlId + "_Control").kendoDatePicker({ format: setting.format, depth: setting.depth, start: setting.start, min: setting.min, max: setting.max }), $("#" + controlId + "_Control").data("kendoDatePicker").value(setting.value), $("#" + controlId + "_Control").data("kendoDatePicker").bind("change", setting.onChange), $("#" + controlId + "_Control").removeAttr("onfocus"), $("#" + controlId + "_Control").click(function () { $("#" + controlId + "_Control").data("kendoDatePicker").open() }) } } }, $.fn.FrameDatePicker.defaults = $.extend({}, { type: "FrameDatePicker", style: "width: 100%; ", className: "", value: "", format: "yyyy-MM-dd", min: "1900-01-01", max: "2099-12-31", depth: "month", start: "month", readonly: !1, onChange: function () { }, onBlur: function () { }, onFocus: function () { } }), $.fn.FrameDatePicker.methods = { setValue: function (my, value) { var controlId = $(my).attr("id"); $(my).data("value", value), $(my).data("readonly") ? $("#" + controlId + "_Control").html(value) : $("#" + controlId + "_Control").data("kendoDatePicker").value(value) }, getValue: function (my) { var controlId = $(my).attr("id"); return $(my).data("readonly") ? $(my).data("value") : null != $("#" + controlId + "_Control").data("kendoDatePicker").value() ? kendo.toString($("#" + controlId + "_Control").data("kendoDatePicker").value(), $(my).data("format")) : null }, getControl: function (my) { var controlId = $(my).attr("id"); if (!$(my).data("readonly")) return $("#" + controlId + "_Control").data("kendoDatePicker") }, disable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").data("kendoDatePicker").enable(!1) }, enable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").data("kendoDatePicker").enable(!0) }, error: function (my) { }, removeError: function (my) { } } }(jQuery), function ($) { $.fn.FrameDatePickerRange = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { var controlId = $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameDatePickerRange.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var setting = $.extend({}, $.fn.FrameDatePickerRange.defaults, param1); if (setting.value || (setting.value = $.fn.FrameDatePickerRange.defaults.value), $(this).data(setting), $(this).empty(), setting.readonly) { var e = $.fn.FrameSpan(controlId + "_Control"); $(this).append(e); var label = ""; label += "" == setting.value.StartDate ? setting.startLabel : setting.value.StartDate, label += " - ", label += "" == setting.value.EndDate ? setting.endLabel : setting.value.EndDate, $("#" + controlId + "_Control").html(label) } else { var html = ""; html += '<div class="col-xs-12">', html += '   <div class="row">', html += '       <div class="col-xs-5" style="width: 47% !important">', html += '           <div class="row">', html += '               <input type="text" id="' + controlId + '_StartDate_Control" class="' + setting.className + '" style="' + setting.style + '" />', html += "           </div>", html += "       </div>", html += '       <div class="col-xs-2 text-center" style="width: 6% !important; padding: 0;">', html += '           <div class="row" style="margin: 0px;">-</div>', html += "       </div>", html += '       <div class="col-xs-5" style="width: 47% !important">', html += '           <div class="row">', html += '               <input type="text" id="' + controlId + '_EndDate_Control" class="' + setting.className + '" style="' + setting.style + '" />', html += "           </div>", html += "       </div>", html += "   </div>", html += "</div>", $(this).append(html); var start = $("#" + controlId + "_StartDate_Control").kendoDatePicker({ format: setting.format, depth: setting.depth, start: setting.start, min: setting.min, max: setting.max }).data("kendoDatePicker"), end = $("#" + controlId + "_EndDate_Control").kendoDatePicker({ format: setting.format, depth: setting.depth, start: setting.start, min: setting.min, max: setting.max }).data("kendoDatePicker"); start.value(setting.value.StartDate), end.value(setting.value.EndDate), start.value() ? end.min(new Date(start.value())) : end.min(new Date(1900, 1, 1)), end.value() ? start.max(new Date(end.value())) : start.max(new Date(2099, 12, 31)), $("#" + controlId + "_StartDate_Control").unbind("change"), $("#" + controlId + "_StartDate_Control").on("change", function () { var startDate = start.value(); startDate ? end.min(new Date(startDate)) : end.min(new Date(1900, 1, 1)), void 0 !== setting.onChangeStartDate && setting.onChangeStartDate.call(this) }), $("#" + controlId + "_EndDate_Control").unbind("change"), $("#" + controlId + "_EndDate_Control").on("change", function () { var endDate = end.value(); endDate ? start.max(new Date(endDate)) : start.max(new Date(2099, 12, 31)), void 0 !== setting.onChangeEndDate && setting.onChangeEndDate.call(this) }), $("#" + controlId + "_StartDate_Control").removeAttr("onfocus"), $("#" + controlId + "_StartDate_Control").click(function () { start.open() }), $("#" + controlId + "_EndDate_Control").removeAttr("onfocus"), $("#" + controlId + "_EndDate_Control").click(function () { end.open() }) } } }, $.fn.FrameDatePickerRange.defaults = $.extend({}, { type: "FrameDatePickerRange", style: "width: 100%; ", className: "", value: { StartDate: "", EndDate: "" }, format: "yyyy-MM-dd", min: "1900-01-01", max: "2099-12-31", depth: "month", start: "month", startLabel: "", endLabel: "", readonly: !1, onChangeStartDate: function () { }, onChangeEndDate: function () { }, onBlur: function () { }, onFocus: function () { } }), $.fn.FrameDatePickerRange.methods = { setValue: function (my, value) { var controlId = $(my).attr("id"); if ($(my).data("value", value), $(my).data("readonly")) { var label = ""; label += "" == value.StartDate ? $(my).data("startLabel") : value.StartDate, label += " - ", label += "" == value.EndDate ? $(my).data("endLabel") : value.EndDate, $("#" + controlId + "_Control").html(label) } else $("#" + controlId + "_StartDate_Control").data("kendoDatePicker").value(value.StartDate), $("#" + controlId + "_EndDate_Control").data("kendoDatePicker").value(value.EndDate) }, getValue: function (my) { var controlId = $(my).attr("id"), value = {}; return $(my).data("readonly") ? value = $(my).data("value") : (null != $("#" + controlId + "_StartDate_Control").data("kendoDatePicker").value() ? value.StartDate = kendo.toString($("#" + controlId + "_StartDate_Control").data("kendoDatePicker").value(), $(my).data("format")) : value.StartDate = "", null != $("#" + controlId + "_EndDate_Control").data("kendoDatePicker").value() ? value.EndDate = kendo.toString($("#" + controlId + "_EndDate_Control").data("kendoDatePicker").value(), $(my).data("format")) : value.EndDate = ""), value }, getControlStartDate: function (my) { var controlId = $(my).attr("id"); if (!$(my).data("readonly")) return $("#" + controlId + "_StartDate_Control").data("kendoDatePicker") }, getControlEndDate: function (my) { var controlId = $(my).attr("id"); if (!$(my).data("readonly")) return $("#" + controlId + "_EndDate_Control").data("kendoDatePicker") }, disable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || ($("#" + controlId + "_StartDate_Control").data("kendoDatePicker").enable(!1), $("#" + controlId + "_EndDate_Control").data("kendoDatePicker").enable(!1)) }, enable: function (my) { var controlId = $(my).attr("id"); $("#" + controlId).data("readonly") || ($("#" + controlId + "_StartDate_Control").data("kendoDatePicker").enable(!0), $("#" + controlId + "_EndDate_Control").data("kendoDatePicker").enable(!0)) }, error: function (my) { }, removeError: function (my) { } } }(jQuery), function ($) { $.fn.FrameDropdownList = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { var controlId = $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameDropdownList.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var setting = $.extend({}, $.fn.FrameDropdownList.defaults, param1); if (setting.value || (setting.value = $.fn.FrameDropdownList.defaults.value), $(this).data(setting), $(this).empty(), setting.readonly) { var e = $.fn.FrameSpan(controlId + "_Control"); $(this).append(e), $("#" + controlId + "_Control").html(setting.value.Value) } else { var html = ""; html += '<select id="' + controlId + '_Control" class="' + setting.className + '" style="' + setting.style + '"></select>', $(this).append(html); var optionLabel = setting.optionLabel; "" == optionLabel && ("all" == setting.selectType ? optionLabel = "全部" : "select" == setting.selectType && (optionLabel = "请选择")), $("#" + controlId + "_Control").kendoDropDownList({ height: setting.height, dataTextField: setting.dataValue, dataValueField: setting.dataKey, dataSource: setting.dataSource, optionLabel: optionLabel, noDataTemplate: "", filter: setting.filter, template: setting.template }), setting.serferFilter && $("#" + controlId + "_Control").data("kendoDropDownList").bind("filtering", setting.serferFilter), "" != $.trim(setting.value.Key) && $("#" + controlId + "_Control").data("kendoDropDownList").value(setting.value.Key), setting.serferFilter && "" != $.trim(setting.value.Value) && $("#" + controlId + "_Control").data("kendoDropDownList").text(setting.value.Value), void 0 !== setting.onChange && ($("#" + controlId + "_Control").unbind("change"), $("#" + controlId + "_Control").on("change", setting.onChange)) } } }, $.fn.FrameDropdownList.defaults = $.extend({}, { type: "FrameDropdownList", style: "width: 100%; ", className: "", height: 200, value: { Key: "", Value: "" }, dataSource: [], dataKey: "Key", dataValue: "Value", template: "", selectType: "", optionLabel: "", filter: "none", readonly: !1, serferFilter: !1, onFiltering: function (e) { }, onChange: function () { }, onBlur: function () { }, onFocus: function () { } }), $.fn.FrameDropdownList.methods = { setDataSource: function (my, value) { var controlId = $(my).attr("id"); $(my).data("readonly") || (value || (value = []), $("#" + controlId + "_Control").data("kendoDropDownList").setDataSource(value)) }, setValue: function (my, value) { var controlId = $(my).attr("id"); $(my).data("value", value), $(my).data("readonly") ? $("#" + controlId + "_Control").html(value.Value) : $("#" + controlId + "_Control").data("kendoDropDownList").value(value.Key) }, clear: function (my) { var controlId = $(my).attr("id"); $(my).data("value", { Key: "", Value: "" }), $(my).data("readonly") ? $("#" + controlId + "_Control").html("") : $("#" + controlId + "_Control").data("kendoDropDownList").value("") }, getValue: function (my) { var controlId = $(my).attr("id"), value = {}; return $(my).data("readonly") ? value = $(my).data("value") : (value.Key = $("#" + controlId + "_Control").data("kendoDropDownList").value(), value.Value = $("#" + controlId + "_Control").data("kendoDropDownList").text()), value }, setIndex: function (my, value) { var controlId = $(my).attr("id"); if (!$(my).data("readonly")) { $("#" + controlId + "_Control").data("kendoDropDownList").select(value); var v = {}; v.Key = $("#" + controlId + "_Control").data("kendoDropDownList").value(), v.Value = $("#" + controlId + "_Control").data("kendoDropDownList").text(), $(my).data("value", v) } }, getControl: function (my) { var controlId = $(my).attr("id"); if (!$(my).data("readonly")) return $("#" + controlId + "_Control").data("kendoDropDownList") }, disable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").data("kendoDropDownList").enable(!1) }, enable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").data("kendoDropDownList").enable() }, error: function (my) { }, removeError: function (my) { } } }(jQuery), function ($) { $.fn.FrameMultiDropdownList = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { var controlId = $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameMultiDropdownList.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var my = $(this), setting = $.extend({}, $.fn.FrameMultiDropdownList.defaults, param1); if (setting.value || (setting.value = $.fn.FrameMultiDropdownList.defaults.value), my.data(setting), my.empty(), setting.readonly) { html = ""; html += '<select id="' + controlId + '_Control" class="' + setting.className + '" style="' + setting.style + '"></select>', my.append(html), "" == (optionLabel = setting.optionLabel) && ("all" == setting.selectType ? optionLabel = "全部" : "select" == setting.selectType && (optionLabel = "请选择")), $("#" + controlId + "_Control").kendoMultiSelect({ value: setting.value, dataTextField: setting.dataValue, dataValueField: setting.dataKey, placeholder: optionLabel, autoBind: !1, noDataTemplate: "" }), $("#" + controlId + "_Control").data("kendoMultiSelect").readonly(!0), my.find("span.k-select").remove(), my.find("li.k-button").css({ "padding-right": "5.6px" }) } else { var optionLabel, html = ""; html += '<select id="' + controlId + '_Control" class="' + setting.className + '" style="' + setting.style + '"></select>', my.append(html), "" == (optionLabel = setting.optionLabel) && ("all" == setting.selectType ? optionLabel = "全部" : "select" == setting.selectType && (optionLabel = "请选择")), $("#" + controlId + "_Control").kendoMultiSelect({ autoClose: !1, value: setting.value, height: setting.height, dataTextField: setting.dataValue, dataValueField: setting.dataKey, dataSource: setting.dataSource, placeholder: optionLabel, noDataTemplate: "", filter: setting.filter, clearButton: !1, itemTemplate: setting.template }), void 0 !== setting.onChange && $("#" + controlId + "_Control").data("kendoMultiSelect").bind("change", setting.onChange) } } }, $.fn.FrameMultiDropdownList.defaults = $.extend({}, { type: "FrameMultiDropdownList", style: "width: 100%; ", className: "", height: 200, value: [], dataSource: [], dataKey: "Key", dataValue: "Value", template: "", selectType: "", optionLabel: "", filter: "none", readonly: !1, onChange: function () { }, onBlur: function () { }, onFocus: function () { } }), $.fn.FrameMultiDropdownList.methods = { setDataSource: function (my, value) { var controlId = $(my).attr("id"); $(my).data("readonly") || (value || (value = []), $("#" + controlId + "_Control").data("kendoMultiSelect").setDataSource(value)) }, setValue: function (my, value) { $(my).data("value", value), $(my).data("readonly"), $("#" + controlId + "_Control").data("kendoMultiSelect").value(value) }, clear: function (my) { var controlId = $(my).attr("id"); $(my).data("value", []), $(my).data("readonly"), $("#" + controlId + "_Control").data("kendoMultiSelect").value([]) }, getValue: function (my) { var controlId = $(my).attr("id"), value = []; if ($(my).data("readonly")) value = $(my).data("value"); else { var v = $("#" + controlId + "_Control").data("kendoMultiSelect").value(), data = $("#" + controlId + "_Control").data("kendoMultiSelect").dataSource.data(); $.each(v, function (i, n) { var item = {}; item.Key = n, $.each(data, function (j, m) { eval("m." + $(my).data("dataKey")) == n && (item.Value = eval("m." + $(my).data("dataValue"))) }), value.push(item) }) } return value }, getControl: function (my) { var controlId = $(my).attr("id"); if (!$(my).data("readonly")) return $("#" + controlId + "_Control").data("kendoMultiSelect") }, disable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").data("kendoMultiSelect").enable(!1) }, enable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").data("kendoMultiSelect").enable() }, error: function (my) { }, removeError: function (my) { } } }(jQuery), jQuery, function ($) { $.fn.FrameLabel = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { var controlId = $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameLabel.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var setting = $.extend({}, $.fn.FrameLabel.defaults, param1); setting.value || (setting.value = $.fn.FrameLabel.defaults.value), $(this).data(setting), $(this).empty(); var e = $.fn.FrameSpan(controlId + "_Control"); $(this).append(e), $("#" + controlId + "_Control").html(setting.value) } }, $.fn.FrameLabel.defaults = $.extend({}, { style: "width: 100%; ", className: "", value: "" }), $.fn.FrameLabel.methods = { setValue: function (my, value) { var controlId = $(my).attr("id"); $(my).data("value", value), $("#" + controlId + "_Control").html(value) }, getValue: function (my) { $(my).attr("id"); return $(my).data("value") }, error: function (my) { }, removeError: function (my) { } } }(jQuery), function ($) { $.fn.FrameNumeric = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { var controlId = $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameNumeric.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var setting = $.extend({}, $.fn.FrameNumeric.defaults, param1); if (setting.value || (setting.value = $.fn.FrameNumeric.defaults.value), $(this).data(setting), $(this).empty(), setting.readonly) { var e = $.fn.FrameSpan(controlId + "_Control"); $(this).append(e), $("#" + controlId + "_Control").html(kendo.toString(setting.value, setting.format)) } else { var html = ""; html += '<input id="' + controlId + '_Control" type="number" class="' + setting.className + '" style="' + setting.style + '" />', $(this).append(html), $("#" + controlId + "_Control").kendoNumericTextBox({ decimals: setting.decimals, format: setting.format, max: setting.max, min: setting.min, spinners: setting.spinners, step: setting.step, placeholder: setting.placeholder, value: setting.value }), void 0 !== setting.onChange && ($("#" + controlId + "_Control").unbind("change"), $("#" + controlId + "_Control").data("kendoNumericTextBox").setOptions({ change: setting.onChange })) } } }, $.fn.FrameNumeric.defaults = $.extend({}, { type: "FrameNumeric", decimals: 2, format: "n", max: null, min: null, spinners: !1, step: 1, style: "width: 100%; ", className: "", value: null, placeholder: "", readonly: !1, onChange: function () { }, onBlur: function () { }, onFocus: function () { } }), $.fn.FrameNumeric.methods = { setValue: function (my, value) { var controlId = $(my).attr("id"); $(my).data("value", value), $(my).data("readonly") ? $("#" + controlId + "_Control").html(kendo.toString(value, $(my).data("format"))) : $("#" + controlId + "_Control").data("kendoNumericTextBox").value(value) }, getValue: function (my) { var controlId = $(my).attr("id"); return $(my).data("readonly") ? $(my).data("value") : $("#" + controlId + "_Control").data("kendoNumericTextBox").value() }, getControl: function (my) { var controlId = $(my).attr("id"); if (!$(my).data("readonly")) return $("#" + controlId + "_Control").data("kendoNumericTextBox") }, disable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").data("kendoNumericTextBox").enable(!1) }, enable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").data("kendoNumericTextBox").enable(!0) }, error: function (my) { }, removeError: function (my) { } } }(jQuery), function ($) { $.fn.FrameNumericLabel = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameNumericLabel.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var setting = $.extend({}, $.fn.FrameNumericLabel.defaults, param1); $(this).data(setting), $(this).empty(), $(this).append('<span class="frame-label" style="width: 100%;" />'), $(this).find(".frame-label").html(kendo.toString(setting.value, setting.format)) } }, $.fn.FrameNumericLabel.defaults = $.extend({}, { style: "width: 100%; ", value: 0, className: "", format: "N2" }), $.fn.FrameNumericLabel.methods = { setValue: function (my, value) { $(my).data("value", value), $(my).find(".frame-label").html(kendo.toString(value, $(my).data("format"))) }, getValue: function (my) { return $(my).data("value") }, error: function (my) { }, removeError: function (my) { } } }(jQuery), function ($) { $.fn.FrameRadio = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { var controlId = $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameRadio.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var setting = $.extend({}, $.fn.FrameRadio.defaults, param1); if (setting.value || (setting.value = $.fn.FrameRadio.defaults.value), setting.dataSource || (setting.dataSource = $.fn.FrameRadio.defaults.dataSource), $(this).data(setting), $(this).empty(), setting.readonly) { var e = $.fn.FrameSpan(controlId + "_Control"); $(this).append(e), $("#" + controlId + "_Control").html(setting.value.Value) } else { var html = "", breakStr = ""; for (breakStr = "horizontal" == setting.direction ? "&nbsp;&nbsp;" : "<br />", i = 0; i < setting.dataSource.length; i++) html += '<input id="' + controlId + "_Control_" + i + '" name="' + controlId + '_Control" value="' + eval("setting.dataSource[i]." + setting.dataKey) + '" type="radio" class="' + setting.inputClass + '">', html += '<label class="' + setting.labelClass + '" for="' + controlId + "_Control_" + i + '">&nbsp;' + eval("setting.dataSource[i]." + setting.dataValue) + "</label>", i != setting.dataSource.length - 1 && (html += breakStr); $(this).append(html), "" != $.trim(setting.value.Key) && ($(this).find("input[type='radio']").each(function () { $(this).removeAttr("checked") }), $(this).html($(this).html()), $(this).find("input[type='radio']").each(function () { $(this).val() == setting.value.Key && $(this).attr("checked", "checked") })), void 0 !== setting.onChange && ($(this).unbind("change"), $(this).on("change", setting.onChange)) } } }, $.fn.FrameRadio.defaults = $.extend({}, { type: "FrameRadio", value: { Key: "", Value: "" }, dataSource: [], dataKey: "Key", dataValue: "Value", direction: "horizontal", inputClass: "k-radio", labelClass: "k-radio-label", readonly: !1, onChange: function () { }, onBlur: function () { }, onFocus: function () { } }), $.fn.FrameRadio.methods = { setValue: function (my, value) { var controlId = $(my).attr("id"); $(my).data("value", value), $(my).data("readonly") ? $("#" + controlId + "_Control").html(value.Value) : ($(my).find("input[type='radio']").each(function () { $(this).removeAttr("checked") }), $(my).html($(my).html()), $(my).find("input[type='radio']").each(function () { $(this).val() == value.Key && $(this).attr("checked", "checked") })) }, getValue: function (my) { var controlId = $(my).attr("id"), value = { Key: "", Value: "" }; return $(my).data("readonly") ? value = $(my).data("value") : (value.Key = 0 == $(my).find("input[type='radio']:checked").length ? "" : $(my).find("input[type='radio']:checked").val(), $.each($(my).data("dataSource"), function (i, n) { eval("n." + $(my).data("dataKey")) == value.Key && (value.Value = eval("n." + $(my).data("dataValue"))) })), value }, disable: function (my) { $(my).attr("id"); $(my).data("readonly") || $(my).find("input[type='radio']").attr("disabled", !0) }, enable: function (my) { $(my).attr("id"); $(my).data("readonly") || $(my).find("input[type='radio']").removeAttr("disabled") }, error: function (my) { }, removeError: function (my) { } } }(jQuery), function ($) { $.fn.FrameCheckbox = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { var controlId = $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameCheckbox.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var setting = $.extend({}, $.fn.FrameCheckbox.defaults, param1); if (setting.value || (setting.value = $.fn.FrameCheckbox.defaults.value), $(this).data(setting), $(this).empty(), setting.readonly) { var e = $.fn.FrameSpan(controlId + "_Control"); $(this).append(e); var h = ""; $.each(setting.value, function (i, n) { h += setting.value[i].Value + "; " }), "" != h && h.substring(0, h.length - 2), $("#" + controlId + "_Control").html(h) } else { var html = "", breakStr = ""; for (breakStr = "horizontal" == setting.direction ? "&nbsp;&nbsp;" : "<br />", i = 0; i < setting.dataSource.length; i++) html += '<input id="' + controlId + "_Control_" + i + '" name="' + controlId + '_Control" value="' + eval("setting.dataSource[i]." + setting.dataKey) + '" type="checkbox" class="' + setting.inputClass + '" data-display="' + eval("setting.dataSource[i]." + setting.dataValue) + '">', html += '<label class="' + setting.labelClass + '" for="' + controlId + "_Control_" + i + '">&nbsp;' + eval("setting.dataSource[i]." + setting.dataValue) + "</label>", i != setting.dataSource.length - 1 && (html += breakStr); $(this).append(html), $(this).find("input[type='checkbox']").each(function () { $(this).removeAttr("checked") }), $(this).html($(this).html()), $.each(setting.value, function (i, n) { "" != $.trim(setting.value[i].Key) && $("#" + controlId).find("input[type='checkbox']").each(function () { $(this).val() == setting.value[i].Key && $(this).attr("checked", "checked") }) }), void 0 !== setting.onChange && ($(this).unbind("change"), $(this).on("change", setting.onChange)) } } }, $.fn.FrameCheckbox.defaults = $.extend({}, { type: "FrameCheckbox", value: [], dataSource: [], dataKey: "Key", dataValue: "Value", direction: "horizontal", inputClass: "k-checkbox", labelClass: "k-checkbox-label", readonly: !1, onChange: function () { }, onBlur: function () { }, onFocus: function () { } }), $.fn.FrameCheckbox.methods = { setValue: function (my, value) { var controlId = $(my).attr("id"); if ($(my).data("value", value), $(my).data("readonly")) { var h = ""; $.each(value, function (i, n) { h += value[i].Value + "; " }), "" != h && h.substring(0, h.length - 2), $("#" + controlId + "_Control").html(h) } else $(my).find("input[type='checkbox']").each(function () { $(this).removeAttr("checked") }), $(my).html($(my).html()), $.each(value, function (i, n) { "" != $.trim(value[i].Key) && $(my).find("input[type='checkbox']").each(function () { $(this).val() == value[i].Key && $(this).attr("checked", "checked") }) }) }, getValue: function (my) { $(my).attr("id"); var value = []; return $(my).data("readonly") ? value = $(my).data("value") : $(my).find("input[type='checkbox']:checked").each(function (i, n) { var v = {}; v.Key = $(this).val(), v.Value = $(this).data("display"), value.push(v) }), value }, selectAll: function (my) { $(my).attr("id"); if (!$(my).data("readonly")) { var value = []; $(my).find("input[type='checkbox']").each(function () { $(this).removeAttr("checked") }), $(my).html($(my).html()), $(my).find("input[type='checkbox']").each(function (i, n) { $(this).attr("checked", "checked"); var v = {}; v.Key = $(this).val(), v.Value = $(this).data("display"), value.push(v) }), $(my).data("value", value) } }, clear: function (my) { $(my).attr("id"); $(my).data("readonly") || ($(my).find("input[type='checkbox']").each(function () { $(this).removeAttr("checked") }), $(my).html($(my).html()), $(my).data("value", [])) }, disable: function (my) { $(my).attr("id"); $(my).data("readonly") || $(my).find("input[type='checkbox']").attr("disabled", !0) }, enable: function (my) { $(my).attr("id"); $(my).data("readonly") || $(my).find("input[type='checkbox']").removeAttr("disabled") }, error: function (my) { }, removeError: function (my) { } } }(jQuery), function ($) { $.fn.FrameSpan = function (id) { var html = ""; return html += '<span id="' + id + '" class="frame-label ' + $.fn.FrameSpan.defaults.className + '" style="' + $.fn.FrameSpan.defaults.style + '" />', $(this).append(html), html }, $.fn.FrameSpan.defaults = $.extend({}, { style: "width: 100%; ", className: "" }) }(jQuery), function ($) { $.fn.FrameSwitch = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { var controlId = $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameSwitch.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var e, setting = $.extend({}, $.fn.FrameSwitch.defaults, param1); setting.value || (setting.value = $.fn.FrameSwitch.defaults.value), $(this).data(setting), $(this).empty(), setting.readonly ? ((e = document.createElement("input")).id = controlId + "_Control", e.type = "checkbox", e.style.cssText = setting.style, $(this).append(e), $("#" + controlId + "_Control").kendoMobileSwitch({ onLabel: setting.onLabel, offLabel: setting.offLabel, change: setting.onChange, checked: setting.value }), $("#" + controlId + "_Control").data("kendoMobileSwitch").enable(!1)) : ((e = document.createElement("input")).id = controlId + "_Control", e.type = "checkbox", e.style.cssText = setting.style, $(this).append(e), $("#" + controlId + "_Control").kendoMobileSwitch({ onLabel: setting.onLabel, offLabel: setting.offLabel, change: setting.onChange, checked: setting.value })) } }, $.fn.FrameSwitch.defaults = $.extend({}, { type: "FrameSwitch", className: "", onLabel: "是", offLabel: "否", value: !1, readonly: !1, onChange: function () { }, onBlur: function () { }, onFocus: function () { } }), $.fn.FrameSwitch.methods = { setValue: function (my, value) { var controlId = $(my).attr("id"); $(my).data("value", value), $(my).data("readonly"), $("#" + controlId + "_Control").data("kendoMobileSwitch").check(value) }, getValue: function (my) { var controlId = $(my).attr("id"); return $(my).data("readonly") ? $(my).data("value") : $("#" + controlId + "_Control").data("kendoMobileSwitch").check() }, getText: function (my) { var controlId = $(my).attr("id"); if (!$(my).data("readonly")) return $("#" + controlId + "_Control").data("kendoMobileSwitch").check() ? $(my).data("onLabel") : $(my).data("offLabel") }, getControl: function (my) { var controlId = $(my).attr("id"); if (!$(my).data("readonly")) return $("#" + controlId + "_Control").data("kendoMobileSwitch") }, disable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").data("kendoMobileSwitch").enable(!1) }, enable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").data("kendoMobileSwitch").enable(!0) }, error: function (my) { }, removeError: function (my) { } } }(jQuery), function ($) { $.fn.FrameTextArea = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { var controlId = $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameTextArea.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var setting = $.extend({}, $.fn.FrameTextArea.defaults, param1); if (setting.value || (setting.value = $.fn.FrameTextArea.defaults.value), $(this).data(setting), $(this).empty(), setting.readonly) { var e = $.fn.FrameSpan(controlId + "_Control"); $(this).append(e), $("#" + controlId + "_Control").html(setting.value) } else { var html = ""; html += '<textarea id="' + controlId + '_Control" class="k-textbox ' + setting.className + '" style="' + setting.style + '" rows="' + setting.rows + '"></textarea>', $(this).append(html), 0 == setting.resize && $("#" + controlId + "_Control").css("resize", "none"), $("#" + controlId + "_Control").height(setting.height), $("#" + controlId + "_Control").val(setting.value), void 0 !== setting.onChange && ($("#" + controlId + "_Control").unbind("change"), $("#" + controlId + "_Control").on("change", setting.onChange)) } } }, $.fn.FrameTextArea.defaults = $.extend({}, { type: "FrameTextArea", style: "width: 100%; ", className: "", value: "", resize: !1, rows: 2, height: "auto", readonly: !1, onChange: function () { }, onBlur: function () { }, onFocus: function () { } }), $.fn.FrameTextArea.methods = { setValue: function (my, value) { var controlId = $(my).attr("id"); $(my).data("value", value), $(my).data("readonly") ? $("#" + controlId + "_Control").html(value) : $("#" + controlId + "_Control").val(value) }, getValue: function (my) { var controlId = $(my).attr("id"); return $(my).data("readonly") ? $(my).data("value") : $.trim($("#" + controlId + "_Control").val()) }, setRows: function (my, value) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").attr("rows", value) }, setHeight: function (my, value) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").height(value) }, disable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").attr("disabled", !0) }, enable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").removeAttr("disabled") }, focus: function (my) { var controlId = $(my).attr("id"); if (!$(my).data("readonly")) { var v = $("#" + controlId + "_Control").val(); $("#" + controlId + "_Control").focus().val(v) } }, error: function (my) { }, removeError: function (my) { } } }(jQuery), function ($) { $.fn.FrameTextBox = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { var controlId = $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameTextBox.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var setting = $.extend({}, $.fn.FrameTextBox.defaults, param1); if (setting.value || (setting.value = $.fn.FrameTextBox.defaults.value), setting.dataSource || (setting.dataSource = $.fn.FrameRadio.defaults.dataSource), $(this).data(setting), $(this).empty(), setting.readonly) { var e = $.fn.FrameSpan(controlId + "_Control"); $(this).append(e), $("#" + controlId + "_Control").html(setting.value) } else { var html = ""; html += '<input id="' + controlId + '_Control" class="k-textbox ' + setting.className + '" style="' + setting.style + '" placeholder="' + setting.placeholder + '" />', $(this).append(html), setting.password ? $("#" + controlId + "_Control").attr("type", "password") : $("#" + controlId + "_Control").attr("type", "text"), $("#" + controlId + "_Control").val(setting.value), void 0 !== setting.onChange && ($("#" + controlId + "_Control").unbind("change"), $("#" + controlId + "_Control").on("change", setting.onChange)) } } }, $.fn.FrameTextBox.defaults = $.extend({}, { type: "FrameTextBox", style: "width: 100%; ", password: !1, className: "", placeholder: "", value: "", readonly: !1, onChange: function () { }, onBlur: function () { }, onFocus: function () { } }), $.fn.FrameTextBox.methods = { setValue: function (my, value) { var controlId = $(my).attr("id"); $(my).data("value", value), $(my).data("readonly") ? $("#" + controlId + "_Control").html(value) : $("#" + controlId + "_Control").val(value) }, getValue: function (my) { var controlId = $(my).attr("id"); return $(my).data("readonly") ? $(my).data("value") : $.trim($("#" + controlId + "_Control").val()) }, disable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").attr("disabled", !0) }, enable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").removeAttr("disabled") }, error: function (my) { }, removeError: function (my) { } } }(jQuery), function ($) { $.fn.FrameYearMonth = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { var controlId = $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameYearMonth.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var setting = $.extend({}, $.fn.FrameYearMonth.defaults, param1); if (setting.value || (setting.value = $.fn.FrameYearMonth.defaults.value), $(this).data(setting), $(this).empty(), setting.readonly) { var e = $.fn.FrameSpan(controlId + "_Control"); $(this).append(e), $("#" + controlId + "_Control").html(setting.value.Year + " - " + setting.value.Month) } else { var html = ""; html += '<div class="col-xs-12">', html += '   <div class="row">', html += '       <div class="col-xs-1" style="width: 54% !important">', html += '           <div class="row">', html += '               <select id="' + controlId + '_Year_Control" class="' + setting.className + '" style="' + setting.style + '"></select>', html += "           </div>", html += "       </div>", html += '       <div class="col-xs-1 center" style="width: 6% !important; padding: 0;">', html += '           <div class="row" style="margin: 0px;">&nbsp;</div>', html += "       </div>", html += '       <div class="col-xs-1" style="width: 40% !important">', html += '           <div class="row">', html += '               <select id="' + controlId + '_Month_Control" class="' + setting.className + '" style="' + setting.style + '"></select>', html += "           </div>", html += "       </div>", html += "   </div>", html += "</div>", $(this).append(html); var startYear, endYear, currentDate = new Date, yearDataSource = []; startYear = "shift" == setting.startYear ? currentDate.getFullYear() - setting.startShift : "auto" == setting.startYear ? 2e3 : parseInt(setting.startYear), endYear = "shift" == setting.endYear ? currentDate.getFullYear() + setting.endShift : "auto" == setting.endYear ? currentDate.getFullYear() : parseInt(setting.endYear); for (var i = startYear; i <= endYear; i++) yearDataSource.push({ Key: i.toString(), Value: i.toString() }); var year = $("#" + controlId + "_Year_Control").kendoDropDownList({ height: setting.heightYear, dataTextField: "Value", dataValueField: "Key", dataSource: yearDataSource, noDataTemplate: "" }).data("kendoDropDownList"), month = $("#" + controlId + "_Month_Control").kendoDropDownList({ height: setting.heightMonth, dataTextField: "Value", dataValueField: "Key", dataSource: [{ Key: "01", Value: "01" }, { Key: "02", Value: "02" }, { Key: "03", Value: "03" }, { Key: "04", Value: "04" }, { Key: "05", Value: "05" }, { Key: "06", Value: "06" }, { Key: "07", Value: "07" }, { Key: "08", Value: "08" }, { Key: "09", Value: "09" }, { Key: "10", Value: "10" }, { Key: "11", Value: "11" }, { Key: "12", Value: "12" }], noDataTemplate: "" }).data("kendoDropDownList"); "" != $.trim(setting.value.Year) && year.value(setting.value.Year), "" != $.trim(setting.value.Month) && month.value(setting.value.Month), $("#" + controlId + "_Year_Control").unbind("change"), $("#" + controlId + "_Year_Control").on("change", function () { setting.onChangeYear.call(this) }), $("#" + controlId + "_Month_Control").unbind("change"), $("#" + controlId + "_Month_Control").on("change", function () { setting.onChangeMonth.call(this) }) } } }, $.fn.FrameYearMonth.defaults = $.extend({}, { type: "FrameYearMonth", style: "width: 100%; ", className: "", heightYear: 200, heightMonth: 200, startYear: "auto", startShift: 0, endYear: "auto", endShift: 0, value: { Year: "", Month: "" }, readonly: !1, onChangeYear: function () { }, onChangeMonth: function () { }, onBlur: function () { }, onFocus: function () { } }), $.fn.FrameYearMonth.methods = { setValue: function (my, value) { var controlId = $(my).attr("id"); $(my).data("value", value), $(my).data("readonly") ? $("#" + controlId + "_Control").html(value.Year + " - " + value.Month) : ($("#" + controlId + "_Year_Control").data("kendoDropDownList").value(value.Year), $("#" + controlId + "_Month_Control").data("kendoDropDownList").value(value.Month)) }, getValue: function (my) { var controlId = $(my).attr("id"), value = {}; return $(my).data("readonly") ? $(my).data("value") : (value.Year = $("#" + controlId + "_Year_Control").data("kendoDropDownList").value(), value.Month = $("#" + controlId + "_Month_Control").data("kendoDropDownList").value(), value) }, getControlYear: function (my) { var controlId = $(my).attr("id"); if (!$(my).data("readonly")) return $("#" + controlId + "_Year_Control").data("kendoDropDownList") }, getControlMonth: function (my) { var controlId = $(my).attr("id"); if (!$(my).data("readonly")) return $("#" + controlId + "_Month_Control").data("kendoDropDownList") }, disable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || ($("#" + controlId + "_Year_Control").data("kendoDropDownList").enable(!1), $("#" + controlId + "_Month_Control").data("kendoDropDownList").enable(!1)) }, enable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || ($("#" + controlId + "_Year_Control").data("kendoDropDownList").enable(!0), $("#" + controlId + "_Month_Control").data("kendoDropDownList").enable(!0)) }, error: function (my) { }, removeError: function (my) { } } }(jQuery), function ($) { $.fn.FrameYear = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { var controlId = $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameYear.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var setting = $.extend({}, $.fn.FrameYear.defaults, param1); if (setting.value || (setting.value = $.fn.FrameYear.defaults.value), $(this).data(setting), $(this).empty(), setting.readonly) { var e = $.fn.FrameSpan(controlId + "_Control"); $(this).append(e), $("#" + controlId + "_Control").html(setting.value) } else { var html = ""; html += '<select id="' + controlId + '_Control" class="' + setting.className + '" style="' + setting.style + '"></select>', $(this).append(html); var optionLabel = ""; "all" == setting.selectType ? optionLabel = "全部" : "select" == setting.selectType && (optionLabel = "请选择"); var startYear, endYear, currentDate = new Date, yearDataSource = []; startYear = "shift" == setting.startYear ? currentDate.getFullYear() - setting.startShift : "auto" == setting.startYear ? 2e3 : parseInt(setting.startYear), endYear = "shift" == setting.endYear ? currentDate.getFullYear() + setting.endShift : "auto" == setting.endYear ? currentDate.getFullYear() : parseInt(setting.endYear); for (var i = startYear; i <= endYear; i++) yearDataSource.push({ Key: i.toString(), Value: i.toString() }); $("#" + controlId + "_Control").kendoDropDownList({ height: setting.height, dataTextField: "Value", dataValueField: "Key", dataSource: yearDataSource, noDataTemplate: "", optionLabel: optionLabel, value: setting.value, change: setting.onChange }) } } }, $.fn.FrameYear.defaults = $.extend({}, { type: "FrameYear", style: "width: 100%; ", className: "", height: 200, startYear: "auto", startShift: 0, endYear: "auto", endShift: 0, selectType: "", value: "", readonly: !1, onChange: function () { }, onBlur: function () { }, onFocus: function () { } }), $.fn.FrameYear.methods = { setValue: function (my, value) { var controlId = $(my).attr("id"); $(my).data("value", value), $(my).data("readonly") ? $("#" + controlId + "_Control").html(value.Year) : $("#" + controlId + "_Control").data("kendoDropDownList").value(value) }, getValue: function (my) { var controlId = $(my).attr("id"); return $(my).data("readonly") ? $(my).data("value") : $("#" + controlId + "_Control").data("kendoDropDownList").value() }, getControl: function (my) { var controlId = $(my).attr("id"); if (!$(my).data("readonly")) return $("#" + controlId + "_Control").data("kendoDropDownList") }, disable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").data("kendoDropDownList").enable(!1) }, enable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || $("#" + controlId + "_Control").data("kendoDropDownList").enable(!0) }, error: function (my) { }, removeError: function (my) { } } }(jQuery), function ($) { $.fn.FrameCalendarRange = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { var controlId = $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameCalendarRange.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var setting = $.extend({}, $.fn.FrameCalendarRange.defaults, param1); if (setting.value || (setting.value = $.fn.FrameCalendarRange.defaults.value), $(this).data(setting), $(this).empty(), setting.readonly) { var e = $.fn.FrameSpan(controlId + "_Control"); $(this).append(e), $("#" + controlId + "_Control").html(setting.value.Year + "&nbsp;&nbsp;" + setting.value.StartMonth + "&nbsp;-&nbsp;" + setting.value.EndMonth) } else { var html = ""; if (html += '<div class="col-xs-12">', html += '   <div class="row">', html += '       <div class="col-xs-1" style="width: 38% !important">', html += '           <div class="row">', html += '               <select id="' + controlId + '_Year_Control" class="calendar-range-year ' + setting.className + '" style="' + setting.style + '"></select>', html += "           </div>", html += "       </div>", html += '       <div class="col-xs-1 center" style="width: 6% !important; padding: 0;">', html += '           <div class="row" style="margin: 0px;">&nbsp;</div>', html += "       </div>", html += '       <div class="col-xs-1" style="width: 25% !important">', html += '           <div class="row">', html += '               <select id="' + controlId + '_StartMonth_Control" class="calendar-range-start-month ' + setting.className + '" style="' + setting.style + '"></select>', html += "           </div>", html += "       </div>", html += '       <div class="col-xs-1 center" style="width: 6% !important; padding: 0;">', html += '           <div class="row" style="margin: 0px;">-</div>', html += "       </div>", html += '       <div class="col-xs-1" style="width: 25% !important">', html += '           <div class="row">', html += '               <select id="' + controlId + '_EndMonth_Control" class="calendar-range-end-month ' + setting.className + '" style="' + setting.style + '"></select>', html += "           </div>", html += "       </div>", html += "   </div>", html += "</div>", $(this).append(html), 0 == setting.yearDataSource.length) { var startYear, endYear, currentDate = new Date; startYear = "shift" == setting.startYear ? currentDate.getFullYear() - setting.startShift : "auto" == setting.startYear ? 2e3 : parseInt(setting.startYear), endYear = "shift" == setting.endYear ? currentDate.getFullYear() + setting.endShift : "auto" == setting.endYear ? currentDate.getFullYear() : parseInt(setting.endYear); for (var i = startYear; i <= endYear; i++) setting.yearDataSource.push({ Key: i.toString(), Value: i.toString() }) } var year = $("#" + controlId + "_Year_Control").kendoDropDownList({ height: setting.heightYear, dataTextField: "Value", dataValueField: "Key", dataSource: setting.yearDataSource, noDataTemplate: "" }).data("kendoDropDownList"), startMonth = $("#" + controlId + "_StartMonth_Control").kendoDropDownList({ height: setting.heightMonth, dataTextField: "Value", dataValueField: "Key", dataSource: setting.monthDataSource, noDataTemplate: "" }).data("kendoDropDownList"), endMonth = $("#" + controlId + "_EndMonth_Control").kendoDropDownList({ height: setting.heightMonth, dataTextField: "Value", dataValueField: "Key", dataSource: setting.monthDataSource, noDataTemplate: "" }).data("kendoDropDownList"); "" != $.trim(setting.value.Year) && year.value(setting.value.Year), "" != $.trim(setting.value.StartMonth) && startMonth.value(setting.value.StartMonth), "" != $.trim(setting.value.EndMonth) && endMonth.value(setting.value.EndMonth), $("#" + controlId + "_Year_Control").unbind("change"), $("#" + controlId + "_Year_Control").on("change", function () { setting.onChangeYear.call(this) }), $("#" + controlId + "_StartMonth_Control").unbind("change"), $("#" + controlId + "_StartMonth_Control").on("change", function () { }), $("#" + controlId + "_EndMonth_Control").unbind("change"), $("#" + controlId + "_EndMonth_Control").on("change", function () { }) } } }, $.fn.FrameCalendarRange.defaults = $.extend({}, { type: "FrameCalendarRange", style: "width: 100%; ", className: "", heightYear: 200, heightMonth: 200, value: { Year: "", StartMonth: "", EndMonth: "" }, yearDataSource: [], startYear: "auto", startShift: 0, endYear: "auto", endShift: 0, monthDataSource: [{ Key: "1", Value: "1" }, { Key: "2", Value: "2" }, { Key: "3", Value: "3" }, { Key: "4", Value: "4" }, { Key: "5", Value: "5" }, { Key: "6", Value: "6" }, { Key: "7", Value: "7" }, { Key: "8", Value: "8" }, { Key: "9", Value: "9" }, { Key: "10", Value: "10" }, { Key: "11", Value: "11" }, { Key: "12", Value: "12" }], onChangeYear: function () { }, onBlur: function () { }, onFocus: function () { } }), $.fn.FrameCalendarRange.methods = { setValue: function (my, value) { var controlId = $(my).attr("id"); $(my).data("value", value), $(my).data("readonly") ? $("#" + controlId + "_Control").html(value.Year + "&nbsp;&nbsp;" + value.StartMonth + "&nbsp;-&nbsp;" + value.EndMonth) : ($("#" + controlId + "_Year_Control").data("kendoDropDownList").value(value.Year), $("#" + controlId + "_StartMonth_Control").data("kendoDropDownList").value(value.StartMonth), $("#" + controlId + "_EndMonth_Control").data("kendoDropDownList").value(value.EndMonth)) }, getValue: function (my) { var controlId = $(my).attr("id"), value = {}; return $(my).data("readonly") ? $(my).data("value") : (value.Year = $("#" + controlId + "_Year_Control").data("kendoDropDownList").value(), value.StartMonth = $("#" + controlId + "_StartMonth_Control").data("kendoDropDownList").value(), value.EndMonth = $("#" + controlId + "_EndMonth_Control").data("kendoDropDownList").value(), value) }, getControlYear: function (my) { var controlId = $(my).attr("id"); if (!$(my).data("readonly")) return $("#" + controlId + "_Year_Control").data("kendoDropDownList") }, getControlStartMonth: function (my) { var controlId = $(my).attr("id"); if (!$(my).data("readonly")) return $("#" + controlId + "_StartMonth_Control").data("kendoDropDownList") }, getControlEndMonth: function (my) { var controlId = $(my).attr("id"); if (!$(my).data("readonly")) return $("#" + controlId + "_EndMonth_Control").data("kendoDropDownList") }, disable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || ($("#" + controlId + "_Year_Control").data("kendoDropDownList").enable(!1), $("#" + controlId + "_StartMonth_Control").data("kendoDropDownList").enable(!1), $("#" + controlId + "_EndMonth_Control").data("kendoDropDownList").enable(!1)) }, enable: function (my) { var controlId = $(my).attr("id"); $(my).data("readonly") || ($("#" + controlId + "_Year_Control").data("kendoDropDownList").enable(!0), $("#" + controlId + "_StartMonth_Control").data("kendoDropDownList").enable(!0), $("#" + controlId + "_EndMonth_Control").data("kendoDropDownList").enable(!0)) }, error: function (my) { }, removeError: function (my) { } } }(jQuery), function ($) { $.fn.FrameEditableContent = function (param1, param2) { if (void 0 !== $(this) && 0 != $(this).length) { $(this).attr("id"); if ("string" == typeof param1) { var func = $.fn.FrameEditableContent.methods[param1]; return func ? func(this, param2) : (console.log("error: none method"), "") } var my = $(this), setting = $.extend({}, $.fn.FrameEditableContent.defaults, param1); if (setting.value || (setting.value = $.fn.FrameEditableContent.defaults.value), $(this).data(setting), $(this).empty(), setting.readonly) { dom = $('<span class="frame-label" style="width: 100%;" />'); $(this).append(dom), my.find(".frame-label").html(setting.value) } else { var dom; (dom = $('<div contenteditable="' + setting.editType + '" class="editable-content k-textbox ' + setting.className + '" style="' + setting.style + '"></div>')).css({ "overflow-y": "auto", "min-height": setting.minHeight, "max-height": setting.maxHeight }), $(this).append(dom), my.find(".editable-content").html(setting.value) } } }, $.fn.FrameEditableContent.defaults = $.extend({}, { type: "FrameEditableContent", editType: "true", style: "width: 100%;", className: "", minHeight: "30px", maxHeight: "300px", value: "", readonly: !1, onChange: function () { }, onBlur: function () { }, onFocus: function () { } }), $.fn.FrameEditableContent.methods = { setValue: function (my, value) { $(my).attr("id"); $(my).data("value", value), $(my).data("readonly") ? $(my).find(".frame-label").html(value) : $(my).find(".editable-content").html(value) }, getValue: function (my) { $(my).attr("id"); return $(my).data("readonly") ? $(my).data("value") : $.trim($(my).find(".editable-content").html()) }, disable: function (my) { $(my).attr("id"); $(my).data("readonly") || ($(my).find(".editable-content").attr("contenteditable", "false"), $(my).find(".editable-content").attr("disabled", !0)) }, enable: function (my) { $(my).attr("id"); $(my).data("readonly") || ($(my).find(".editable-content").attr("contenteditable", $(my).data("editType")), $(my).find(".editable-content").removeAttr("disabled")) }, error: function (my) { }, removeError: function (my) { } } }(jQuery); var FrameWindow = {}; FrameWindow = function () { var that = { ShowLoading: function () { $("#loadingToast").show() }, HideLoading: function () { $("#loadingToast").hide() }, ShowMessage: function (option) { var setting = $.extend({}, { target: "this", title: "", message: "" }, option); return ("top" == setting.target ? top.bootbox : "parent" == setting.target ? parent.bootbox : bootbox).dialog({ title: setting.title, message: setting.message, closeButton: !1 }) }, ShowAlert: function (option) { var b, title, setting = $.extend({}, { target: "this", alertType: "info", message: "", okLabel: "确定", callback: function () { } }, option), msg = ""; if ("[object Array]" === Object.prototype.toString.call(setting.message)) for (i = 0; i < setting.message.length; i++) msg += setting.message[i] + "<br />"; else msg = setting.message; void 0 !== msg && "" != msg || (msg = "出错了，请联系管理员"), b = "top" == setting.target ? top.bootbox : "parent" == setting.target ? parent.bootbox : bootbox, title = "error" == setting.alertType ? '<span style="color: #d15b47;"><i class="fa fa-times-circle" />&nbsp;出错啦</span>' : "warning" == setting.alertType ? '<span style="color: #ffb752;"><i class="fa fa-warning" />&nbsp;警告</span>' : '<span style="color: #428bca;"><i class="fa fa-info-circle" />&nbsp;提示信息</span>', b.alert({ title: title, message: msg, callback: setting.callback, buttons: { ok: { label: setting.okLabel } } }) }, ShowConfirm: function (option) { var setting = $.extend({}, { target: "this", message: "", confirmLabel: "确定", cancelLabel: "取消", confirmCallback: function () { }, cancelCallback: function () { } }, option), msg = ""; if ("[object Array]" === Object.prototype.toString.call(setting.message)) for (i = 0; i < setting.message.length; i++) msg += setting.message[i] + "<br />"; else msg = setting.message; ("top" == setting.target ? top.bootbox : "parent" == setting.target ? parent.bootbox : bootbox).confirm({ title: '<span style="color: #d15b47;"><i class="fa fa-question-circle" />&nbsp;确认</span>', message: msg, callback: function (result) { 1 == result ? setting.confirmCallback.call(this) : setting.cancelCallback.call(this) }, buttons: { confirm: { label: setting.confirmLabel }, cancel: { label: setting.cancelLabel } } }) }, ShowPrompt: function (option) { var setting = $.extend({}, { target: "this", title: "", message: "", confirmLabel: "确定", cancelLabel: "取消", confirmCallback: function () { return !0 }, cancelCallback: function () { } }, option), dialog = ("top" == setting.target ? top.bootbox : "parent" == setting.target ? parent.bootbox : bootbox).prompt({ title: setting.title, inputType: "textarea", callback: function (result) { if (null != result) return setting.confirmCallback.call(this, $.trim(result)); setting.cancelCallback.call(this) }, buttons: { confirm: { label: setting.confirmLabel }, cancel: { label: setting.cancelLabel } } }); dialog.find("textarea").css("resize", "none"), "" != setting.message && $("<span>" + setting.message + "</span>").insertBefore(dialog.find(".bootbox-body")) }, OpenWindow: function (option) { var myWindow, maxHeight, setting = $.extend({}, { target: "this", title: "", url: "", width: 800, height: 600, maxed: !1, actions: ["Maximize", "Close"], callback: function () { } }, option), timestamp = Common.GetTimestamp(); maxHeight = "top" == setting.target ? ($(top.document.body).append('<div id="ModelWinow_' + timestamp + '"></div>'), myWindow = top.$("#ModelWinow_" + timestamp), $(top.window).height() - 30) : "parent" == setting.target ? ($(parent.document.body).append('<div id="ModelWinow_' + timestamp + '"></div>'), myWindow = parent.$("#ModelWinow_" + timestamp), $(parent.window).height() - 30) : ($(document.body).append('<div id="ModelWinow_' + timestamp + '"></div>'), myWindow = $("#ModelWinow_" + timestamp), $(window).height() - 30); setting.url = Common.UpdateUrlParams(setting.url, "timestamp", timestamp), myWindow.kendoWindow({ width: setting.width, height: setting.height, maxHeight: maxHeight, modal: !0, resizable: !1, title: setting.title, content: setting.url, iframe: !0, actions: setting.actions, close: function () { var returnValue = myWindow.data("returnValue"); returnValue ? setting.callback.call(this, returnValue) : setting.callback.call(this), myWindow.data("kendoWindow").destroy() } }), setting.maxed ? myWindow.data("kendoWindow").center().open().maximize() : myWindow.data("kendoWindow").center().open() }, CloseWindow: function (option) { var setting = $.extend({}, { target: "this" }, option), timestamp = Common.GetUrlParam("timestamp"); ("top" == setting.target ? top.$("#ModelWinow_" + timestamp) : "parent" == setting.target ? parent.$("#ModelWinow_" + timestamp) : $("#ModelWinow_" + timestamp)).data("kendoWindow").close() }, SetWindowReturnValue: function (option) { var setting = $.extend({}, { target: "this", value: {} }, option), timestamp = Common.GetUrlParam("timestamp"); ("top" == setting.target ? top.$("#ModelWinow_" + timestamp) : "parent" == setting.target ? parent.$("#ModelWinow_" + timestamp) : $("#ModelWinow_" + timestamp)).data("returnValue", setting.value) }, ReloadWindow: function (option) { var myWindow, setting = $.extend({}, { target: "this", title: "", url: "" }, option), timestamp = Common.GetUrlParam("timestamp"); if (myWindow = "top" == setting.target ? top.$("#ModelWinow_" + timestamp) : "parent" == setting.target ? parent.$("#ModelWinow_" + timestamp) : $("#ModelWinow_" + timestamp), "" != setting.title && myWindow.data("kendoWindow").title(setting.title), "" != setting.url) { var url = Common.UpdateUrlParams(setting.url, "timestamp", Common.GetUrlParam("timestamp")); myWindow.find(".k-content-frame").attr("src", url) } } }; return that }(); var FrameUtil = {}; FrameUtil = function () { var that = { AjaxTimeout: 6e4, GetModel: function (panel) { var model = {}; return void 0 === panel ? $(".FrameControl").each(function () { var controlId = $(this).attr("id"); if (controlId != undefined) { if ("hidden" == $(this).attr("type")) eval("model." + controlId + " = '" + $(this).val() + "'"); else { var type = $(this).data("type"); void 0 === type ? eval("model." + controlId + " = null") : eval("model." + controlId + " = $(this)." + type + "('getValue')") } } }):$("#"+panel).find(".FrameControl").each(function(){var controlId=$(this).attr("id");if("hidden"==$(this).attr("type"))eval("model."+controlId+" = '"+$(this).val()+"'");else{var type=$(this).data("type");void 0===type?eval("model."+controlId+" = null"):eval("model."+controlId+" = $(this)."+type+"('getValue')")}}),model},SubmitAjax:function(option){var setting=$.extend({},{business:"",method:"",url:"",async:!0,data:{},callback:function(){},failCallback:function(){}},option);setting.url=Common.UpdateUrlParams(setting.url,"Business",setting.business),setting.url=Common.UpdateUrlParams(setting.url,"Method",setting.method),$.ajax({type:"Post",url:setting.url,timeout:that.AjaxTimeout,data:JSON.stringify(setting.data),contentType:"application/json; charset=utf-8",async:setting.async,dataType:"json",success:function(model){try{1==model.IsSuccess?setting.callback.call(this,model):(FrameWindow.ShowAlert({target:"top",alertType:"error",message:model.ExecuteMessage,callback:function(){setting.failCallback.call(this,model)}}),FrameWindow.HideLoading())}catch(e){console.log(e.stack),FrameWindow.ShowAlert({target:"top",alertType:"error",message:e.name+"："+e.message}),FrameWindow.HideLoading()}},error:function(XMLHttpRequest,textStatus,errorThrown){console.log(XMLHttpRequest),"timeout"==textStatus?FrameWindow.ShowAlert({target:"top",alertType:"error",message:"系统超时，请稍后再试"}):"parsererror"==textStatus&&-1!=XMLHttpRequest.responseText.indexOf("Login.aspx")?FrameWindow.ShowAlert({target:"top",alertType:"error",message:"登陆超时，请重新登陆！",callback:function(){window.location.reload()}}):FrameWindow.ShowAlert({target:"top",alertType:"error",message:errorThrown}),FrameWindow.HideLoading()}})},LoadAjaxHtml:function(option){var setting=$.extend({},{url:"",callback:function(){}},option);$.ajax({url:setting.url,type:"get",async:!1,success:function(res){setting.callback.call(this,res)}})},StartDownload:function(option){var setting=$.extend({},{url:"",cookie:"",business:""},option);setting.cookie+="_"+Common.GetTimestamp(),setting.url=Common.UpdateUrlParams(setting.url,"DownloadCookie",setting.cookie),setting.url=Common.UpdateUrlParams(setting.url,"Business",setting.business),$.fileDownload(setting.url,{preparingMessageTitle:'<span style="color: #428bca;"><i class="fa fa-info-circle" />&nbsp;提示信息</span>',preparingMessageHtml:'<p><i class="fa fa-spin fa-spinner"></i>&nbsp;下载中，请等待...</p>',failMessageHtml:"下载出错",cookieName:"fileDownload_"+setting.cookie})}};return that}(),function($){$.extend({fileDownload:function(fileUrl,options){var defaultFailCallback=function(responseHtml,url){alert("A file download error has occurred, please try again.")},settings=$.extend({preparingMessageTitle:"提示信息",preparingMessageHtml:"下载中，请等待...",failMessageHtml:"下载出错",androidPostUnsupportedMessageHtml:"Unfortunately your Android browser doesn't support this type of file download. Please try again with a different browser.",successCallback:function(url){},failCallback:defaultFailCallback,httpMethod:"GET",data:null,checkInterval:100,cookieName:"fileDownload",cookieValue:"true",cookiePath:"/",popupWindowTitle:"Initiating file download...",encodeHTMLEntities:!0},options),userAgent=(navigator.userAgent||navigator.vendor||window.opera).toLowerCase(),isIos=!1,isAndroid=!1,isOtherMobileBrowser=!1;/ip(ad|hone|od)/.test(userAgent)?isIos=!0:-1!=userAgent.indexOf("android")?isAndroid=!0:isOtherMobileBrowser=/avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|playbook|silk|iemobile|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(userAgent)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|e\-|e\/|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|xda(\-|2|g)|yas\-|your|zeto|zte\-/i.test(userAgent.substr(0,4));var httpMethodUpper=settings.httpMethod.toUpperCase();if(isAndroid&&"GET"!=httpMethodUpper)alert(settings.androidPostUnsupportedMessageHtml);else{var $iframe,downloadWindow,formDoc,$form,$preparingDialog=FrameWindow.ShowMessage({target:"this",title:settings.preparingMessageTitle,message:settings.preparingMessageHtml}),internalCallbacks={onSuccess:function(url){$preparingDialog.modal("hide"),settings.successCallback(url)},onFail:function(responseHtml,url){$preparingDialog.modal("hide"),settings.failMessageHtml?(FrameWindow.ShowAlert({target:"this",alertType:"error",message:settings.failMessageHtml}),settings.failCallback!=defaultFailCallback&&settings.failCallback(responseHtml,url)):settings.failCallback(responseHtml,url)}};if(null!==settings.data&&"string"!=typeof settings.data&&(settings.data=$.param(settings.data)),"GET"===httpMethodUpper){if(null!==settings.data)-1!=fileUrl.indexOf("?")?"&"!==fileUrl.substring(fileUrl.length-1)&&(fileUrl+="&"):fileUrl+="?",fileUrl+=settings.data;isIos||isAndroid?((downloadWindow=window.open(fileUrl)).document.title=settings.popupWindowTitle,window.focus()):isOtherMobileBrowser?window.location(fileUrl):$iframe=$("<iframe>").hide().attr("src",fileUrl).appendTo("body")}else{var formInnerHtml="";null!==settings.data&&$.each(settings.data.replace(/\+/g," ").split("&"),function(){var kvp=this.split("="),key=settings.encodeHTMLEntities?htmlSpecialCharsEntityEncode(decodeURIComponent(kvp[0])):decodeURIComponent(kvp[0]);if(key){var value=kvp[1];value=settings.encodeHTMLEntities?htmlSpecialCharsEntityEncode(decodeURIComponent(kvp[1])):decodeURIComponent(kvp[1]),formInnerHtml+='<input type="hidden" name="'+key+'" value="'+value+'" />'}}),isOtherMobileBrowser?($form=$("<form>").appendTo("body")).hide().attr("method",settings.httpMethod).attr("action",fileUrl).html(formInnerHtml):(isIos?((downloadWindow=window.open("about:blank")).document.title=settings.popupWindowTitle,formDoc=downloadWindow.document,window.focus()):formDoc=getiframeDocument($iframe=$("<iframe style='display: none' src='about:blank'></iframe>").appendTo("body")),formDoc.write("<html><head></head><body><form method='"+settings.httpMethod+"' action='"+fileUrl+"'>"+formInnerHtml+"</form>"+settings.popupWindowTitle+"</body></html>"),$form=$(formDoc).find("form")),$form.submit()}setTimeout(function checkFileDownloadComplete(){if(-1!=document.cookie.indexOf(settings.cookieName+"="+settings.cookieValue)){internalCallbacks.onSuccess(fileUrl);var date=new Date(1e3);return document.cookie=settings.cookieName+"=; expires="+date.toUTCString()+"; path="+settings.cookiePath,void cleanUp(!1)}if(downloadWindow||$iframe)try{var formDoc;if((formDoc=downloadWindow?downloadWindow.document:getiframeDocument($iframe))&&null!=formDoc.body&&0<formDoc.body.innerHTML.length){var isFailure=!0;if($form&&0<$form.length){var $contents=$(formDoc.body).contents().first();0<$contents.length&&$contents[0]===$form[0]&&(isFailure=!1)}if(isFailure)return internalCallbacks.onFail(formDoc.body.innerHTML,fileUrl),void cleanUp(!0)}}catch(err){return internalCallbacks.onFail("",fileUrl),void cleanUp(!0)}setTimeout(checkFileDownloadComplete,settings.checkInterval)},settings.checkInterval)}function getiframeDocument($iframe){var iframeDoc=$iframe[0].contentWindow||$iframe[0].contentDocument;return iframeDoc.document&&(iframeDoc=iframeDoc.document),iframeDoc}function cleanUp(isFailure){setTimeout(function(){downloadWindow&&(isAndroid&&downloadWindow.close(),isIos&&(isFailure?(downloadWindow.focus(),downloadWindow.close()):downloadWindow.focus()))},0)}function htmlSpecialCharsEntityEncode(str){return str.replace(/[<>&\r\n"']/gm,function(match){return"&"+{"<":"lt;",">":"gt;","&":"amp;","\r":"#13;","\n":"#10;",'"':"quot;","'":"apos;"}[match]})}}})}(jQuery);