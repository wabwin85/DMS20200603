/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : IntegralExchange
 * Created Time: 2014/10/11 16:42:11
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	IntegralExchange
	/// </summary>
	[Serializable]
	public class IntegralExchange : BaseModel
	{
		#region Private Members 11
		
		private Guid _id; 
		private string _userid; 
		private string _giftid; 
		private int? _exchangenumber; 
		private string _documentnumber; 
		private string _status; 
		private int? _delivernumber; 
		private string _returnintegral; 
		private string _types; 
		private DateTime? _data; 
		private string _giftname; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public IntegralExchange()
		{
			_id = Guid.Empty; 
			_userid = null; 
			_giftid = null; 
			_exchangenumber = null;
			_documentnumber = null; 
			_status = null; 
			_delivernumber = null;
			_returnintegral = null; 
			_types = null; 
			_data = null;
			_giftname = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UserId
		{
			get { return _userid; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for UserId", value, value.ToString());
				
				_userid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string GiftId
		{
			get { return _giftid; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for GiftId", value, value.ToString());
				
				_giftid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? Exchangenumber
		{
			get { return _exchangenumber; }
			set { _exchangenumber = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Documentnumber
		{
			get { return _documentnumber; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Documentnumber", value, value.ToString());
				
				_documentnumber = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_status = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? DeliverNumber
		{
			get { return _delivernumber; }
			set { _delivernumber = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ReturnIntegral
		{
			get { return _returnintegral; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ReturnIntegral", value, value.ToString());
				
				_returnintegral = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Types
		{
			get { return _types; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Types", value, value.ToString());
				
				_types = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? Data
		{
			get { return _data; }
			set { _data = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string GiftName
		{
			get { return _giftname; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for GiftName", value, value.ToString());
				
				_giftname = value;
			}
		}

        public string DealerName
        {
            get;
            set;
        }

        public string UserName { get; set; }
		
		#endregion 
		
		
		
		
		
	}
}
