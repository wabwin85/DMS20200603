/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : EnterpriseLegalMaster
 * Created Time: 2018/10/23 18:00:57
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Signature.Model
{
	/// <summary>
	///	EnterpriseLegalMaster
	/// </summary>
	[Serializable]
	public class EnterpriseLegalMaster
	{
		#region Private Members 20
		
		private Guid _id; 
		private Guid? _dma_id; 
		private Guid? _parent_dma_id; 
		private string _dealername; 
		private string _accountuid; 
		private string _name; 
		private string _idno; 
		private int? _personarea; 
		private string _email; 
		private string _mobile; 
		private string _title; 
		private string _address; 
		private string _organ; 
		private string _status;
        private Guid? _createuser;
        private string _createusername; 
        private DateTime? _createdate;
        private Guid? _updateuser; 
		private string _updateusername; 
		private DateTime? _updatedate; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public EnterpriseLegalMaster()
		{
			_id = Guid.Empty; 
			_dma_id = null;
			_parent_dma_id = null;
			_dealername = null; 
			_accountuid = null; 
			_name = null; 
			_idno = null; 
			_personarea = null;
			_email = null; 
			_mobile = null; 
			_title = null; 
			_address = null; 
			_organ = null; 
			_status = null;
            _createuser = null;
            _createusername = null;
            _createdate = null;
            _updateuser = null;
			_updateusername = null; 
			_updatedate = null;
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? DmaId
		{
			get { return _dma_id; }
			set { _dma_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? ParentDmaId
		{
			get { return _parent_dma_id; }
			set { _parent_dma_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string DealerName
		{
			get { return _dealername; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for DealerName", value, value.ToString());
				
				_dealername = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string AccountUid
		{
			get { return _accountuid; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for AccountUid", value, value.ToString());
				
				_accountuid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Name
		{
			get { return _name; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				
				_name = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string IdNo
		{
			get { return _idno; }
			set	
			{
				if( value!= null && value.Length > 25)
					throw new ArgumentOutOfRangeException("Invalid value for IdNo", value, value.ToString());
				
				_idno = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? PersonArea
		{
			get { return _personarea; }
			set { _personarea = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Email
		{
			get { return _email; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Email", value, value.ToString());
				
				_email = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Mobile
		{
			get { return _mobile; }
			set	
			{
				if( value!= null && value.Length > 11)
					throw new ArgumentOutOfRangeException("Invalid value for Mobile", value, value.ToString());
				
				_mobile = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Title
		{
			get { return _title; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Title", value, value.ToString());
				
				_title = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Address
		{
			get { return _address; }
			set	
			{
				if( value!= null && value.Length > 150)
					throw new ArgumentOutOfRangeException("Invalid value for Address", value, value.ToString());
				
				_address = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Organ
		{
			get { return _organ; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Organ", value, value.ToString());
				
				_organ = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_status = value;
			}
		}

        /// <summary>
        /// 
        /// </summary>		
        public Guid? CreateUser
        {
            get { return _createuser; }
            set { _createuser = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CreateUserName
		{
			get { return _createusername; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for CreateUserName", value, value.ToString());
				
				_createusername = value;
			}
		}

        /// <summary>
        /// 
        /// </summary>		
        public DateTime? CreateDate
        {
            get { return _createdate; }
            set { _createdate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? UpdateUser
        {
            get { return _updateuser; }
            set { _updateuser = value; }
        }
        			
		/// <summary>
		/// 
		/// </summary>		
		public string UpdateUserName
		{
			get { return _updateusername; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for UpdateUserName", value, value.ToString());
				
				_updateusername = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? UpdateDate
		{
			get { return _updatedate; }
			set { _updatedate = value; }
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
