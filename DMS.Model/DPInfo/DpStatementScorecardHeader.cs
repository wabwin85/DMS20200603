/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : DpStatementScorecardHeader
 * Created Time: 2015/12/14 14:48:52
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	DpStatementScorecardHeader
	/// </summary>
	[Serializable]
	public class DpStatementScorecardHeader : BaseModel
	{
		#region Private Members 13
		
		private Guid _id; 
		private Guid _dma_id; 
		private string _status; 
		private string _version; 
		private string _selyearmonth1; 
		private string _selyearmonth2; 
		private string _refyearmonth1; 
		private string _refyearmonth2; 
		private string _refyearmonth3; 
		private string _refyearmonth4; 
		private string _refyearmonth5; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public DpStatementScorecardHeader()
		{
			_id = Guid.Empty; 
			_dma_id = Guid.Empty; 
			_status = null; 
			_version = null; 
			_selyearmonth1 = null; 
			_selyearmonth2 = null; 
			_refyearmonth1 = null; 
			_refyearmonth2 = null; 
			_refyearmonth3 = null; 
			_refyearmonth4 = null; 
			_refyearmonth5 = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid DmaId
		{
			get { return _dma_id; }
			set { _dma_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_status = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Version
		{
			get { return _version; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Version", value, value.ToString());
				
				_version = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string SelYearMonth1
		{
			get { return _selyearmonth1; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for SelYearMonth1", value, value.ToString());
				
				_selyearmonth1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string SelYearMonth2
		{
			get { return _selyearmonth2; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for SelYearMonth2", value, value.ToString());
				
				_selyearmonth2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string RefYearMonth1
		{
			get { return _refyearmonth1; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for RefYearMonth1", value, value.ToString());
				
				_refyearmonth1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string RefYearMonth2
		{
			get { return _refyearmonth2; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for RefYearMonth2", value, value.ToString());
				
				_refyearmonth2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string RefYearMonth3
		{
			get { return _refyearmonth3; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for RefYearMonth3", value, value.ToString());
				
				_refyearmonth3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string RefYearMonth4
		{
			get { return _refyearmonth4; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for RefYearMonth4", value, value.ToString());
				
				_refyearmonth4 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string RefYearMonth5
		{
			get { return _refyearmonth5; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for RefYearMonth5", value, value.ToString());
				
				_refyearmonth5 = value;
			}
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
