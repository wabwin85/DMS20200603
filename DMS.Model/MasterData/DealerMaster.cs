/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : DealerMaster
 * Created Time: 2010-4-28 13:37:23
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
    /// <summary>
    ///	DealerMaster
    /// </summary>
    [Serializable]
    public class DealerMaster : BaseModel
    {
        #region Private Members

        private Guid? _id;
        private string _chinesename;
        private string _chineseshortname;
        private string _englishname;
        private string _englishshortname;
        private string _nbr;
        private string _sap_code;
        private string _dealertype;
        private string _companytype;
        private string _companygrade;
        private string _dealerauthentication;
        private DateTime? _firstcontractdate;
        private string _registeredaddress;
        private string _address;
        private string _shiptoaddress;
        private string _postalcode;
        private string _phone;
        private string _fax;
        private string _contactperson;
        private string _email;
        private string _generalmanager;
        private string _legalrep;
        private float? _registeredcapital;
        private string _bank;
        private string _bankaccount;
        private string _taxno;
        private string _license;
        private string _licenselimit;
        private string _province;
        private string _city;
        private string _district;
        private bool? _salesmode;
        private string _taxpayer;
        private string _finance;
        private string _finance_phone;
        private string _finance_email;
        private Guid? _payment;
        private Guid? _shiptocontact_con_id;
        private Guid? _billtocontact_con_id;
        private DateTime? _establishdate;
        private DateTime? _systemstartdate;
        private string _certification;
        private bool? _hostcompanyflag;
        private string _dealerordernbrname;
        private string _sapinvoicetoemail;
        private bool? _activeflag;
        private string _lastupdateusername;
        //added by bozhenfei on 20130703
        private Guid? _parent_dma_id;

        //added by Hua on 2014-12-22
        private string _officenb;
        private string _officenb2;

        private string _phone2;
        private string _address2;
        private string _email2;

        private string _business1;
        private string _businessphone1;
        private string _businessemail1;
        private string _businessofficenb1;
        private string _business2;
        private string _businessphone2;
        private string _businessemail2;
        private string _businessofficenb2;

        private string _purchase;
        private string _purchasephone;
        private string _purchaseemail;

        private string _systemoperator;
        private string _systemoperatorphone;
        private string _systemoperatoremail;

        private string _contactremark;

        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public DealerMaster()
        {
            _id = null;
            _chinesename = null;
            _chineseshortname = null;
            _englishname = null;
            _englishshortname = null;
            _nbr = null;
            _sap_code = null;
            _dealertype = null;
            _companytype = null;
            _companygrade = null;
            _dealerauthentication = null; 
            _firstcontractdate = null;
            _registeredaddress = null;
            _address = null;
            _shiptoaddress = null;
            _postalcode = null;
            _phone = null;
            _fax = null;
            _contactperson = null;
            _email = null;
            _generalmanager = null;
            _legalrep = null;
            _registeredcapital = null;
            _bank = null;
            _bankaccount = null;
            _taxno = null;
            _license = null;
            _licenselimit = null;
            _province = null;
            _city = null;
            _district = null;
            _salesmode = null;
            _taxpayer = null;
            _finance = null;
            _finance_phone = null;
            _finance_email = null;
            _payment = null;
            _shiptocontact_con_id = null;
            _billtocontact_con_id = null;
            _establishdate = null;
            _systemstartdate = null;
            _certification = null;
            _hostcompanyflag = null;
            _dealerordernbrname = null;
            _sapinvoicetoemail = null;
            _activeflag = null;
            _lastupdateusername = null;
            _parent_dma_id = null;

            _business1 = null;
            _businessphone1 = null;
            _businessemail1 = null;
            _businessofficenb1 = null;
            _business2 = null;
            _businessphone2 = null;
            _businessemail2 = null;
            _businessofficenb2 = null;

            _purchase = null;
            _purchasephone = null;
            _purchaseemail = null;

            _officenb = null;
            _officenb2 = null;
            _phone2 = null;
            _address2 = null;
            _email2 = null;
      
            _systemoperator=null;
            _systemoperatorphone=null;
            _systemoperatoremail=null;

            _contactremark = null;
          
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 经销商标识ID
        /// </summary>		
        public Guid? Id
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 中文名称
        /// </summary>		
        public string ChineseName
        {
            get { return _chinesename; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for ChineseName", value, value.ToString());

                _chinesename = value;
            }
        }

        /// <summary>
        /// 中文简称
        /// </summary>		
        public string ChineseShortName
        {
            get { return _chineseshortname; }
            set
            {
                if (value != null && value.Length > 1000)
                    throw new ArgumentOutOfRangeException("Invalid value for ChineseShortName", value, value.ToString());

                _chineseshortname = value;
            }
        }

        /// <summary>
        /// 英文名称
        /// </summary>		
        public string EnglishName
        {
            get { return _englishname; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for EnglishName", value, value.ToString());

                _englishname = value;
            }
        }

        /// <summary>
        /// 英文简称
        /// </summary>		
        public string EnglishShortName
        {
            get { return _englishshortname; }
            set
            {
                if (value != null && value.Length > 1000)
                    throw new ArgumentOutOfRangeException("Invalid value for EnglishShortName", value, value.ToString());

                _englishshortname = value;
            }
        }

        /// <summary>
        /// 经销商编号
        /// </summary>		
        public string Nbr
        {
            get { return _nbr; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Nbr", value, value.ToString());

                _nbr = value;
            }
        }

        /// <summary>
        /// 经销商SAP中的账号
        /// </summary>		
        public string SapCode
        {
            get { return _sap_code; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for SapCode", value, value.ToString());

                _sap_code = value;
            }
        }

        /// <summary>
        /// 经销商类别
        /// </summary>		
        public string DealerType
        {
            get { return _dealertype; }
            set
            {
                if (value != null && value.Length > 5)
                    throw new ArgumentOutOfRangeException("Invalid value for DealerType", value, value.ToString());

                _dealertype = value;
            }
        }

        /// <summary>
        /// 公司类型
        /// </summary>		
        public string CompanyType
        {
            get { return _companytype; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CompanyType", value, value.ToString());

                _companytype = value;
            }
        }

        /// <summary>
        /// 公司等级
        /// </summary>		
        public string CompanyGrade
        {
            get { return _companygrade; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CompanyGrade", value, value.ToString());

                _companygrade = value;
            }
        }

        /// <summary>
        /// 经销商认证
        /// </summary>		
        public string DealerAuthentication
        {
            get { return _dealerauthentication; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for DealerAuthentication", value, value.ToString());

                _dealerauthentication = value;
            }
        }

        /// <summary>
        /// 首次签约日
        /// </summary>		
        public DateTime? FirstContractDate
        {
            get { return _firstcontractdate; }
            set { _firstcontractdate = value; }
        }

        /// <summary>
        /// 注册地址
        /// </summary>		
        public string RegisteredAddress
        {
            get { return _registeredaddress; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for RegisteredAddress", value, value.ToString());

                _registeredaddress = value;
            }
        }

        /// <summary>
        /// 办公地址
        /// </summary>		
        public string Address
        {
            get { return _address; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Address", value, value.ToString());

                _address = value;
            }
        }

        /// <summary>
        /// 仓库地址（视为唯一的发货地址）
        /// </summary>		
        public string ShipToAddress
        {
            get { return _shiptoaddress; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for ShipToAddress", value, value.ToString());

                _shiptoaddress = value;
            }
        }

        /// <summary>
        /// 邮编
        /// </summary>		
        public string PostalCode
        {
            get { return _postalcode; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for PostalCode", value, value.ToString());

                _postalcode = value;
            }
        }

        /// <summary>
        /// 电话
        /// </summary>		
        public string Phone
        {
            get { return _phone; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Phone", value, value.ToString());

                _phone = value;
            }
        }

        /// <summary>
        /// 传真
        /// </summary>		
        public string Fax
        {
            get { return _fax; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Fax", value, value.ToString());

                _fax = value;
            }
        }

        /// <summary>
        /// 联系人
        /// </summary>		
        public string ContactPerson
        {
            get { return _contactperson; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for ContactPerson", value, value.ToString());

                _contactperson = value;
            }
        }

        /// <summary>
        /// 电子邮箱
        /// </summary>		
        public string Email
        {
            get { return _email; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Email", value, value.ToString());

                _email = value;
            }
        }

        /// <summary>
        /// 公司总经理
        /// </summary>		
        public string GeneralManager
        {
            get { return _generalmanager; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for GeneralManager", value, value.ToString());

                _generalmanager = value;
            }
        }

        /// <summary>
        /// 法人代表
        /// </summary>		
        public string LegalRep
        {
            get { return _legalrep; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for LegalRep", value, value.ToString());

                _legalrep = value;
            }
        }

        /// <summary>
        /// 注册资金
        /// </summary>		
        public float? RegisteredCapital
        {
            get { return _registeredcapital; }
            set { _registeredcapital = value; }
        }

        /// <summary>
        /// 开户银行
        /// </summary>		
        public string Bank
        {
            get { return _bank; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Bank", value, value.ToString());

                _bank = value;
            }
        }

        /// <summary>
        /// 银行账号
        /// </summary>		
        public string BankAccount
        {
            get { return _bankaccount; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for BankAccount", value, value.ToString());

                _bankaccount = value;
            }
        }

        /// <summary>
        /// 税号
        /// </summary>		
        public string TaxNo
        {
            get { return _taxno; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for TaxNo", value, value.ToString());

                _taxno = value;
            }
        }

        /// <summary>
        /// 许可证号
        /// </summary>		
        public string License
        {
            get { return _license; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for License", value, value.ToString());

                _license = value;
            }
        }

        /// <summary>
        /// 许可年限
        /// </summary>		
        public string LicenseLimit
        {
            get { return _licenselimit; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for LicenseLimit", value, value.ToString());

                _licenselimit = value;
            }
        }

        /// <summary>
        /// 省份
        /// </summary>		
        public string Province
        {
            get { return _province; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Province", value, value.ToString());

                _province = value;
            }
        }

        /// <summary>
        /// 城市
        /// </summary>		
        public string City
        {
            get { return _city; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for City", value, value.ToString());

                _city = value;
            }
        }

        /// <summary>
        /// 区或乡
        /// </summary>		
        public string District
        {
            get { return _district; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for District", value, value.ToString());

                _district = value;
            }
        }

        /// <summary>
        /// 是否为BSC驱动销售模式
        /// </summary>		
        public bool? SalesMode
        {
            get { return _salesmode; }
            set { _salesmode = value; }
        }

        /// <summary>
        /// 纳税人类型
        /// </summary>		
        public string Taxpayer
        {
            get { return _taxpayer; }
            set { _taxpayer = value; }
        }

        /// <summary>
        /// 财务联系人
        /// </summary>		
        public string Finance
        {
            get { return _finance; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Finance", value, value.ToString());

                _finance = value;
            }
        }

        /// <summary>
        /// 财务电话
        /// </summary>		
        public string FinancePhone
        {
            get { return _finance_phone; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for FinancePhone", value, value.ToString());

                _finance_phone = value;
            }
        }

        /// <summary>
        /// 财务电子邮件
        /// </summary>		
        public string FinanceEmail
        {
            get { return _finance_email; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for FinanceEmail", value, value.ToString());

                _finance_email = value;
            }
        }

        /// <summary>
        /// 付款方式
        /// </summary>		
        public Guid? Payment
        {
            get { return _payment; }
            set { _payment = value; }
        }

        /// <summary>
        /// 发货至联系人
        /// </summary>		
        public Guid? ShipToContactConId
        {
            get { return _shiptocontact_con_id; }
            set { _shiptocontact_con_id = value; }
        }

        /// <summary>
        /// 开票至联系人
        /// </summary>		
        public Guid? BillToContactConId
        {
            get { return _billtocontact_con_id; }
            set { _billtocontact_con_id = value; }
        }

        /// <summary>
        /// 成立时间
        /// </summary>		
        public DateTime? EstablishDate
        {
            get { return _establishdate; }
            set { _establishdate = value; }
        }

        /// <summary>
        /// 开账日
        /// </summary>		
        public DateTime? SystemStartDate
        {
            get { return _systemstartdate; }
            set { _systemstartdate = value; }
        }

        /// <summary>
        /// 证书
        /// </summary>		
        public string Certification
        {
            get { return _certification; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _certification = value;
            }
        }

        /// <summary>
        /// 主公司标志
        /// </summary>		
        public bool? HostCompanyFlag
        {
            get { return _hostcompanyflag; }
            set { _hostcompanyflag = value; }
        }

        /// <summary>
        /// 经销商订单拼音缩写
        /// </summary>		
        public string DealerOrderNbrName
        {
            get { return _dealerordernbrname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for DealerOrderNbrName", value, value.ToString());

                _dealerordernbrname = value;
            }
        }

        /// <summary>
        /// 发票Email地址
        /// </summary>		
        public string SapInvoiceToEmail
        {
            get { return _sapinvoicetoemail; }
            set
            {
                if (value != null && value.Length > 400)
                    throw new ArgumentOutOfRangeException("Invalid value for SapInvoiceToEmail", value, value.ToString());

                _sapinvoicetoemail = value;
            }
        }

        /// <summary>
        /// 经销商状态
        /// </summary>		
        public bool? ActiveFlag
        {
            get { return _activeflag; }
            set { _activeflag = value; }
        }

        /// <summary>
        /// 最后修改人
        /// </summary>		
        public string LastUpdateUserName
        {
            get { return _lastupdateusername; }
            set { _lastupdateusername = value; }
        }


        #endregion


        /// <summary>
        /// 
        /// </summary>		
        public Guid? ParentDmaId
        {
            get { return _parent_dma_id; }
            set { _parent_dma_id = value; }
        }

        /// <summary>
        /// 公司负责人办公室电话
        /// </summary>
        public string OfficeNb
        {
            get { return _officenb; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _officenb = value;
            }
        }

        /// <summary>
        /// 公司负责人办公室电话2
        /// </summary>
        public string OfficeNb2
        {
            get { return _officenb2; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _officenb2 = value;
            }
        }

        /// <summary>
        /// 电话2
        /// </summary>		
        public string Phone2
        {
            get { return _phone2; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Phone", value, value.ToString());

                _phone2 = value;
            }
        }

        /// <summary>
        /// 办公地址2
        /// </summary>		
        public string Address2
        {
            get { return _address2; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Address", value, value.ToString());

                _address2 = value;
            }
        }

        /// <summary>
        /// 电子邮箱
        /// </summary>		
        public string Email2
        {
            get { return _email2; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Email2", value, value.ToString());

                _email2 = value;
            }
        }
       

        /// <summary>
        /// 商务负责人1
        /// </summary>
        public string Business1
        {
            get { return _business1; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _business1 = value;
            }
        }

        /// <summary>
        /// 商务负责人联系方式1
        /// </summary>
        public string BusinessPhone1
        {
            get { return _businessphone1; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _businessphone1 = value;
            }
        }

        /// <summary>
        /// 商务负责人电子邮件1
        /// </summary>
        public string BusinessEmail1
        {
            get { return _businessemail1; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _businessemail1 = value;
            }
        }

        /// <summary>
        /// 商务负责人座机号码1
        /// </summary>
        public string BusinessOfficeNb1
        {
            get { return _businessofficenb1; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _businessofficenb1 = value;
            }
        }

        /// <summary>
        /// 商务负责人2
        /// </summary>
        public string Business2
        {
            get { return _business2; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _business2 = value;
            }
        }

        /// <summary>
        /// 商务负责人联系方式2
        /// </summary>
        public string BusinessPhone2
        {
            get { return _businessphone2; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _businessphone2 = value;
            }
        }

        /// <summary>
        /// 商务负责人座机号码2
        /// </summary>
        public string BusinessOfficeNb2
        {
            get { return _businessofficenb2; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _businessofficenb2 = value;
            }
        }

        /// <summary>
        /// 物流负责人电子邮件2
        /// </summary>
        public string BusinessEmail2
        {
            get { return _businessemail2; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _businessemail2 = value;
            }
        }

       

        /// <summary>
        /// 采购负责人
        /// </summary>
        public string Purchase
        {
            get { return _purchase; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _purchase = value;
            }
        }

        /// <summary>
        /// 采购负责人联系方式
        /// </summary>
        public string PurchasePhone
        {
            get { return _purchasephone; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _purchasephone = value;
            }
        }

        /// <summary>
        /// 采购负责人电子邮件
        /// </summary>
        public string PurchaseEmail
        {
            get { return _purchaseemail; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _purchaseemail = value;
            }
        }

     

        /// <summary>
        /// 系统操作人员联系方式
        /// </summary>
        public string SystemOperator
        {
            get { return _systemoperator; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _systemoperator = value;
            }
        }

        /// <summary>
        /// 系统操作人员联系方式
        /// </summary>
        public string SystemOperatorPhone
        {
            get { return _systemoperatorphone; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _systemoperatorphone = value;
            }
        }

        /// <summary>
        /// 系统操作人员电子邮件
        /// </summary>
        public string SystemOperatorEmail
        {
            get { return _systemoperatoremail; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _systemoperatoremail = value;
            }
        }

        /// <summary>
        /// 联系人备注
        /// </summary>
        public string ContactRemark
        {
            get { return _contactremark; }
            set
            {
                if (value != null && value.Length > 1000)
                    throw new ArgumentOutOfRangeException("Invalid value for Certification", value, value.ToString());

                _contactremark = value;
            }
        }


     
    }
}
