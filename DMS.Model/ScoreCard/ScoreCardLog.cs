/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : ScoreCardLog
 * Created Time: 2014/9/21 16:56:44
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	ScoreCardLog
	/// </summary>
	[Serializable]
	public class ScoreCardLog : BaseModel
	{
		#region Private Members 6
		
		private Guid _id; 
		private Guid _esc_id; 
		private string _operuser; 
		private DateTime? _operdate; 
		private string _opertype; 
		private string _opernote; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public ScoreCardLog()
		{
			_id = Guid.Empty; 
			_esc_id = Guid.Empty; 
			_operuser = null; 
			_operdate = null;
			_opertype = null; 
			_opernote = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 评分操作日志主键
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 评分表头主键
		/// </summary>		
		public Guid EscId
		{
			get { return _esc_id; }
			set { _esc_id = value; }
		}
			
		/// <summary>
		/// 操作人
		/// </summary>		
		public string OperUser
		{
			get { return _operuser; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for OperUser", value, value.ToString());
				
				_operuser = value;
			}
		}
			
		/// <summary>
		/// 操作时间
		/// </summary>		
		public DateTime? OperDate
		{
			get { return _operdate; }
			set { _operdate = value; }
		}
			
		/// <summary>
		/// 操作类型
		/// </summary>		
		public string OperType
		{
			get { return _opertype; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for OperType", value, value.ToString());
				
				_opertype = value;
			}
		}
			
		/// <summary>
		/// 操作内容
		/// </summary>		
		public string OperNote
		{
			get { return _opernote; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for OperNote", value, value.ToString());
				
				_opernote = value;
			}
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
