/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : TIWcDealerBarcodeqRcodeScan
 * Created Time: 2015/12/23 16:51:41
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	TIWcDealerBarcodeqRcodeScan
	/// </summary>
	[Serializable]
	public class TIWcDealerBarcodeqRcodeScan : BaseModel
	{
		#region Private Members 13
		
		private Guid _id; 
		private Guid? _dma_id; 
		private string _barcode1; 
		private string _barcode2; 
		private string _qrcode; 
		private string _upn; 
		private string _lot; 
		private string _remark; 
		private DateTime? _remarkdate; 
		private string _createusername; 
		private string _status; 
		private string _datahandleremark; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public TIWcDealerBarcodeqRcodeScan()
		{
			_id = Guid.Empty; 
			_dma_id = null;
			_barcode1 = null; 
			_barcode2 = null; 
			_qrcode = null; 
			_upn = null; 
			_lot = null; 
			_remark = null; 
			_remarkdate = null;
			_createusername = null; 
			_status = null; 
			_datahandleremark = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? DmaId
		{
			get { return _dma_id; }
			set { _dma_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string BarCode1
		{
			get { return _barcode1; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for BarCode1", value, value.ToString());
				
				_barcode1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string BarCode2
		{
			get { return _barcode2; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for BarCode2", value, value.ToString());
				
				_barcode2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string QrCode
		{
			get { return _qrcode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for QrCode", value, value.ToString());
				
				_qrcode = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Upn
		{
			get { return _upn; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Upn", value, value.ToString());
				
				_upn = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Lot
		{
			get { return _lot; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Lot", value, value.ToString());
				
				_lot = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_remark = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? RemarkDate
		{
			get { return _remarkdate; }
			set { _remarkdate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CreateUserName
		{
			get { return _createusername; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for CreateUserName", value, value.ToString());
				
				_createusername = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_status = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string DataHandleRemark
		{
			get { return _datahandleremark; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for DataHandleRemark", value, value.ToString());
				
				_datahandleremark = value;
			}
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
