/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : InterfaceTransferForls
 * Created Time: 2019/1/15 13:43:27
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
    /// <summary>
    ///	InterfaceTransferForls
    /// </summary>
    [Serializable]
    public class InterfaceTransferForls : BaseModel
    {
        #region Private Members 33

        private Guid _id;
        private string _dealer_sapcode;
        private string _transfernumber;
        private string _outwarehousecode;
        private string _inwarehousecode;
        private DateTime? _transferdate;
        private string _remark;
        private string _upn;
        private string _lotmasterlotnumber;
        private string _lot;
        private string _qrcode;
        private decimal? _qty;
        private string _transfertype;
        private int _linenbr;
        private string _filename;
        private DateTime _importdate;
        private string _clientid;
        private string _batchnbr;
        private bool? _errorflag;
        private string _errordescription;
        private Guid? _dma_id;
        private Guid? _cfn_id;
        private Guid? _bum_id;
        private Guid? _whmfrom_id;
        private Guid? _whmto_id;
        private string _whmtypefrom;
        private string _whmtypeto;
        private string _upn_errmsg;
        private string _transferqty_errmsg;
        private string _warehousefrom_errmsg;
        private string _warehouseto_errmsg;
        private string _lotnumber_errmsg;
        private string _qrcode_errmsg;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public InterfaceTransferForls()
        {
            _id = Guid.Empty;
            _dealer_sapcode = null;
            _transfernumber = null;
            _outwarehousecode = null;
            _inwarehousecode = null;
            _transferdate = null;
            _remark = null;
            _upn = null;
            _lotmasterlotnumber = null;
            _lot = null;
            _qrcode = null;
            _qty = null;
            _transfertype = null;
            _linenbr = 0;
            _filename = null;
            _importdate = new DateTime();
            _clientid = null;
            _batchnbr = null;
            _errorflag = null;
            _errordescription = null;
            _dma_id = null;
            _cfn_id = null;
            _bum_id = null;
            _whmfrom_id = null;
            _whmto_id = null;
            _whmtypefrom = null;
            _whmtypeto = null;
            _upn_errmsg = null;
            _transferqty_errmsg = null;
            _warehousefrom_errmsg = null;
            _warehouseto_errmsg = null;
            _lotnumber_errmsg = null;
            _qrcode_errmsg = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 
        /// </summary>		
        public Guid Id
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string DealerSapCode
        {
            get { return _dealer_sapcode; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for DealerSapCode", value, value.ToString());

                _dealer_sapcode = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string TransferNumber
        {
            get { return _transfernumber; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for TransferNumber", value, value.ToString());

                _transfernumber = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string OutWarehouseCode
        {
            get { return _outwarehousecode; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for Outwarehousecode", value, value.ToString());

                _outwarehousecode = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string InWarehouseCode
        {
            get { return _inwarehousecode; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for Inwarehousecode", value, value.ToString());

                _inwarehousecode = value;
            }

            
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime? TransferDate
        {
            get { return _transferdate; }
            set { _transferdate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());

                _remark = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Upn
        {
            get { return _upn; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for Upn", value, value.ToString());

                _upn = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string LotMasterLotNumber
        {
            get { return _lotmasterlotnumber; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for LotMasterLotNumber", value, value.ToString());

                _lotmasterlotnumber = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Lot
        {
            get { return _lot; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Lot", value, value.ToString());

                _lot = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string QrCode
        {
            get { return _qrcode; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for QrCode", value, value.ToString());

                _qrcode = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public decimal? Qty
        {
            get { return _qty; }
            set { _qty = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string TransferType
        {
            get { return _transfertype; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for TransferType", value, value.ToString());

                _transfertype = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public int LineNbr
        {
            get { return _linenbr; }
            set { _linenbr = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string FileName
        {
            get { return _filename; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for FileName", value, value.ToString());

                _filename = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime ImportDate
        {
            get { return _importdate; }
            set { _importdate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Clientid
        {
            get { return _clientid; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Clientid", value, value.ToString());

                _clientid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string BatchNbr
        {
            get { return _batchnbr; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for BatchNbr", value, value.ToString());

                _batchnbr = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public bool? ErrorFlag
        {
            get { return _errorflag; }
            set { _errorflag = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string ErrorDescription
        {
            get { return _errordescription; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for ErrorDescription", value, value.ToString());

                _errordescription = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? DmaId
        {
            get { return _dma_id; }
            set { _dma_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? CfnId
        {
            get { return _cfn_id; }
            set { _cfn_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? BumId
        {
            get { return _bum_id; }
            set { _bum_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? WhmFromId
        {
            get { return _whmfrom_id; }
            set { _whmfrom_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? WhmToId
        {
            get { return _whmto_id; }
            set { _whmto_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string WhmTypeFrom
        {
            get { return _whmtypefrom; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for WhmTypeFrom", value, value.ToString());

                _whmtypefrom = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string WhmTypeTo
        {
            get { return _whmtypeto; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for WhmTypeTo", value, value.ToString());

                _whmtypeto = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string UpnErrMsg
        {
            get { return _upn_errmsg; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for UpnErrMsg", value, value.ToString());

                _upn_errmsg = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string TransferQtyErrMsg
        {
            get { return _transferqty_errmsg; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for TransferQtyErrMsg", value, value.ToString());

                _transferqty_errmsg = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string WarehouseFromErrMsg
        {
            get { return _warehousefrom_errmsg; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for WarehouseFromErrMsg", value, value.ToString());

                _warehousefrom_errmsg = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string WarehouseToErrMsg
        {
            get { return _warehouseto_errmsg; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for WarehouseToErrMsg", value, value.ToString());

                _warehouseto_errmsg = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string LotNumberErrMsg
        {
            get { return _lotnumber_errmsg; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for LotNumberErrMsg", value, value.ToString());

                _lotnumber_errmsg = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string QrCodeErrMsg
        {
            get { return _qrcode_errmsg; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for QrCodeErrMsg", value, value.ToString());

                _qrcode_errmsg = value;
            }
        }




        #endregion





    }
}
