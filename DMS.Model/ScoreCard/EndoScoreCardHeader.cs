/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : EndoScoreCardHeader
 * Created Time: 2015/6/23 17:01:48
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	EndoScoreCardHeader
	/// </summary>
	[Serializable]
	public class EndoScoreCardHeader : BaseModel
	{
		#region Private Members 14
		
		private Guid _id; 
		private Guid _dma_id; 
		private Guid? _bum_id; 
		private string _year; 
		private string _quarter; 
		private string _no; 
		private string _status; 
		private Guid? _updateuser; 
		private DateTime? _updatedate; 
		private string _updateremark; 
		private string _field1; 
		private string _field2; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public EndoScoreCardHeader()
		{
			_id = Guid.Empty; 
			_dma_id = Guid.Empty; 
			_bum_id = null;
			_year = null; 
			_quarter = null; 
			_no = null; 
			_status = null; 
			_updateuser = null;
			_updatedate = null;
			_updateremark = null; 
			_field1 = null; 
			_field2 = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid DmaId
		{
			get { return _dma_id; }
			set { _dma_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? BumId
		{
			get { return _bum_id; }
			set { _bum_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Year
		{
			get { return _year; }
			set	
			{
				if( value!= null && value.Length > 4)
					throw new ArgumentOutOfRangeException("Invalid value for Year", value, value.ToString());
				
				_year = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Quarter
		{
			get { return _quarter; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Quarter", value, value.ToString());
				
				_quarter = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string No
		{
			get { return _no; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for No", value, value.ToString());
				
				_no = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_status = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? UpdateUser
		{
			get { return _updateuser; }
			set { _updateuser = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? UpdateDate
		{
			get { return _updatedate; }
			set { _updatedate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UpdateRemark
		{
			get { return _updateremark; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for UpdateRemark", value, value.ToString());
				
				_updateremark = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Field1
		{
			get { return _field1; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Field1", value, value.ToString());
				
				_field1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Field2
		{
			get { return _field2; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Field2", value, value.ToString());
				
				_field2 = value;
			}
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
