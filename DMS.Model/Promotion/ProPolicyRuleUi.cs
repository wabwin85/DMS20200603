/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : ProPolicyRuleUi
 * Created Time: 2016/1/14 11:35:42
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	ProPolicyRuleUi
	/// </summary>
	[Serializable]
	public class ProPolicyRuleUi : BaseModel
	{
		#region Private Members 14
		
		private int? _ruleid; 
		private int? _policyid; 
		private string _ruledesc; 
		private int? _judgepolicyfactorid; 
		private decimal? _judgevalue; 
		private decimal? _giftvalue; 
		private string _createby; 
		private DateTime? _createtime; 
		private string _modifyby; 
		private DateTime? _modifydate; 
		private string _remark1; 
		private string _curruser;
        private decimal? _pointsvalue;
        private string _pointstype; 
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public ProPolicyRuleUi()
		{
			_ruleid = null;
			_policyid = null;
			_ruledesc = null; 
			_judgepolicyfactorid = null;
			_judgevalue = null;
			_giftvalue = null;
			_createby = null; 
			_createtime = null;
			_modifyby = null; 
			_modifydate = null;
			_remark1 = null; 
			_curruser = null;
            _pointsvalue = null;
            _pointstype = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public int? RuleId
		{
			get { return _ruleid; }
			set { _ruleid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? PolicyId
		{
			get { return _policyid; }
			set { _policyid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string RuleDesc
		{
			get { return _ruledesc; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for RuleDesc", value, value.ToString());
				
				_ruledesc = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? JudgePolicyFactorId
		{
			get { return _judgepolicyfactorid; }
			set { _judgepolicyfactorid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public decimal? JudgeValue
		{
			get { return _judgevalue; }
			set { _judgevalue = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public decimal? GiftValue
		{
			get { return _giftvalue; }
			set { _giftvalue = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CreateBy
		{
			get { return _createby; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for CreateBy", value, value.ToString());
				
				_createby = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateTime
		{
			get { return _createtime; }
			set { _createtime = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ModifyBy
		{
			get { return _modifyby; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ModifyBy", value, value.ToString());
				
				_modifyby = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? ModifyDate
		{
			get { return _modifydate; }
			set { _modifydate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Remark1
		{
			get { return _remark1; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Remark1", value, value.ToString());
				
				_remark1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CurrUser
		{
			get { return _curruser; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for CurrUser", value, value.ToString());
				
				_curruser = value;
			}
		}

        /// <summary>
        /// 
        /// </summary>		
        public decimal? PointsValue
        {
            get { return _pointsvalue; }
            set { _pointsvalue = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string PointsType
        {
            get { return _pointstype; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for PointsType", value, value.ToString());

                _pointstype = value;
            }
        }
	
		
		#endregion 
		
		
		
		
		
	}
}
