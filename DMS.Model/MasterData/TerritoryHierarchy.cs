/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : TerritoryHierarchy
 * Created Time: 2011-2-10 13:54:08
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	TerritoryHierarchy
	/// </summary>
	[Serializable]
	public class TerritoryHierarchy : BaseModel
	{
		#region Private Members 9
		
		private Guid _id; 
		private string _code; 
		private string _name; 
		private string _level; 
		private string _description; 
		private Guid? _bum_id; 
		private Guid? _parent_id; 
		private bool _deleteflag; 
		private DateTime _updatedate; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public TerritoryHierarchy()
		{
			_id = Guid.Empty; 
			_code = null; 
			_name = null; 
			_level = null; 
			_description = null; 
			_bum_id = null;
			_parent_id = null;
			_deleteflag = false; 
			_updatedate = new DateTime(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 区域主键
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 区域编码
		/// </summary>		
		public string Code
		{
			get { return _code; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Code", value, value.ToString());
				
				_code = value;
			}
		}
			
		/// <summary>
		/// 区域名称
		/// </summary>		
		public string Name
		{
			get { return _name; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				
				_name = value;
			}
		}
			
		/// <summary>
		/// 区域等级
		/// </summary>		
		public string Level
		{
			get { return _level; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Level", value, value.ToString());
				
				_level = value;
			}
		}
			
		/// <summary>
		/// 区域描述
		/// </summary>		
		public string Description
		{
			get { return _description; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Description", value, value.ToString());
				
				_description = value;
			}
		}
			
		/// <summary>
		/// 区域产品线
		/// </summary>		
		public Guid? BumId
		{
			get { return _bum_id; }
			set { _bum_id = value; }
		}
			
		/// <summary>
		/// 上级区域主键
		/// </summary>		
		public Guid? ParentId
		{
			get { return _parent_id; }
			set { _parent_id = value; }
		}
			
		/// <summary>
		/// 删除标识
		/// </summary>		
		public bool DeleteFlag
		{
			get { return _deleteflag; }
			set { _deleteflag = value; }
		}
			
		/// <summary>
		/// 更新时间
		/// </summary>		
		public DateTime UpdateDate
		{
			get { return _updatedate; }
			set { _updatedate = value; }
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
