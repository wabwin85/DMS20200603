/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : EndoScoreCardDetail
 * Created Time: 2015/6/17 11:20:54
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	EndoScoreCardDetail
	/// </summary>
	[Serializable]
	public class EndoScoreCardDetail : BaseModel
	{
		#region Private Members 10
		
		private Guid _id; 
		private Guid _esch_id; 
		private int? _wfbizindex; 
		private string _manage; 
		private string _item; 
		private string _source; 
		private string _totalscore; 
		private string _content; 
		private string _score; 
		private string _scoredetail; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public EndoScoreCardDetail()
		{
			_id = Guid.Empty; 
			_esch_id = Guid.Empty; 
			_wfbizindex = null;
			_manage = null; 
			_item = null; 
			_source = null; 
			_totalscore = null; 
			_content = null; 
			_score = null; 
			_scoredetail = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid EschId
		{
			get { return _esch_id; }
			set { _esch_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? Wfbizindex
		{
			get { return _wfbizindex; }
			set { _wfbizindex = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Manage
		{
			get { return _manage; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Manage", value, value.ToString());
				
				_manage = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Item
		{
			get { return _item; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Item", value, value.ToString());
				
				_item = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Source
		{
			get { return _source; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Source", value, value.ToString());
				
				_source = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string TotalScore
		{
			get { return _totalscore; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for TotalScore", value, value.ToString());
				
				_totalscore = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Content
		{
			get { return _content; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for Content", value, value.ToString());
				
				_content = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Score
		{
			get { return _score; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Score", value, value.ToString());
				
				_score = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ScoreDetail
		{
			get { return _scoredetail; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for ScoreDetail", value, value.ToString());
				
				_scoredetail = value;
			}
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
