/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : InterfaceRedCrossHospitalTransactionWithqr
 * Created Time: 2017/3/12 15:45:28
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
    /// <summary>
    ///	InterfaceRedCrossHospitalTransactionWithqr
    /// </summary>
    [Serializable]
    public class InterfaceRedCrossHospitalTransactionWithqr : BaseModel
    {
        #region Private Members 28

        private Guid _id;
        private string _applicationtype;
        private string _dealer_sapcode;
        private string _dealername;
        private string _hospitalcode;
        private string _hospitalname;
        private DateTime? _applicationdate;
        private string _applicationnbr;
        private string _merchandisename;
        private string _merchandisespec;
        private string _di;
        private string _pi;
        private string _gtin;
        private string _qrcode;
        private string _sn;
        private decimal? _qty;
        private decimal? _unitprice;
        private string _upn;
        private string _lotnumber;
        private string _remark;
        private string _packingunit;
        private string _arrivaldate;
        private int? _linenbr;
        private DateTime? _importdate;
        private string _clientid;
        private string _batchnbr;
        private string _errormsg;
        private Guid? _whm_id;
        private string _whm_type;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public InterfaceRedCrossHospitalTransactionWithqr()
        {
            _id = Guid.Empty;
            _applicationtype = null;
            _dealer_sapcode = null;
            _dealername = null;
            _hospitalcode = null;
            _hospitalname = null;
            _applicationdate = null;
            _applicationnbr = null;
            _merchandisename = null;
            _merchandisespec = null;
            _di = null;
            _pi = null;
            _gtin = null;
            _qrcode = null;
            _sn = null;
            _qty = null;
            _unitprice = null;
            _upn = null;
            _lotnumber = null;
            _remark = null;
            _packingunit = null;
            _arrivaldate = null;
            _linenbr = null;
            _importdate = null;
            _clientid = null;
            _batchnbr = null;
            _errormsg = null;
            _whm_id = null;
            _whm_type = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 
        /// </summary>		
        public Guid Id
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string ApplicationType
        {
            get { return _applicationtype; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for ApplicationType", value, value.ToString());

                _applicationtype = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string DealerSapCode
        {
            get { return _dealer_sapcode; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for DealerSapCode", value, value.ToString());

                _dealer_sapcode = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string DealerName
        {
            get { return _dealername; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for DealerName", value, value.ToString());

                _dealername = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string HospitalCode
        {
            get { return _hospitalcode; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for HospitalCode", value, value.ToString());

                _hospitalcode = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string HospitalName
        {
            get { return _hospitalname; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for HospitalName", value, value.ToString());

                _hospitalname = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime? ApplicationDate
        {
            get { return _applicationdate; }
            set { _applicationdate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string ApplicationNbr
        {
            get { return _applicationnbr; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for ApplicationNbr", value, value.ToString());

                _applicationnbr = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string MerchandiseName
        {
            get { return _merchandisename; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for MerchandiseName", value, value.ToString());

                _merchandisename = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string MerchandiseSpec
        {
            get { return _merchandisespec; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for MerchandiseSpec", value, value.ToString());

                _merchandisespec = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Di
        {
            get { return _di; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Di", value, value.ToString());

                _di = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Pi
        {
            get { return _pi; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Pi", value, value.ToString());

                _pi = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Gtin
        {
            get { return _gtin; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Gtin", value, value.ToString());

                _gtin = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string QrCode
        {
            get { return _qrcode; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for QrCode", value, value.ToString());

                _qrcode = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Sn
        {
            get { return _sn; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Sn", value, value.ToString());

                _sn = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public decimal? Qty
        {
            get { return _qty; }
            set { _qty = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public decimal? UnitPrice
        {
            get { return _unitprice; }
            set { _unitprice = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Upn
        {
            get { return _upn; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Upn", value, value.ToString());

                _upn = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string LotNumber
        {
            get { return _lotnumber; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for LotNumber", value, value.ToString());

                _lotnumber = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());

                _remark = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string PackingUnit
        {
            get { return _packingunit; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for PackingUnit", value, value.ToString());

                _packingunit = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string ArrivalDate
        {
            get { return _arrivaldate; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for ArrivalDate", value, value.ToString());

                _arrivaldate = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public int? LineNbr
        {
            get { return _linenbr; }
            set { _linenbr = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime? ImportDate
        {
            get { return _importdate; }
            set { _importdate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Clientid
        {
            get { return _clientid; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Clientid", value, value.ToString());

                _clientid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string BatchNbr
        {
            get { return _batchnbr; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for BatchNbr", value, value.ToString());

                _batchnbr = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string ErrorMsg
        {
            get { return _errormsg; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for ErrorMsg", value, value.ToString());

                _errormsg = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? WhmId
        {
            get { return _whm_id; }
            set { _whm_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string WhmType
        {
            get { return _whm_type; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for WhmType", value, value.ToString());

                _whm_type = value;
            }
        }




        #endregion





    }
}
