/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : OperationLog
 * Created Time: 2017/12/19 16:04:15
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Signature.Model
{
	/// <summary>
	///	OperationLog
	/// </summary>
	[Serializable]
	public class OperationLog
	{
		#region Private Members 13
		
		private Guid _id; 
		private Guid? _dealerid; 
		private string _applyid; 
		private string _accountuid; 
		private string _name; 
		private DateTime? _starttime; 
		private DateTime? _endtime; 
		private string _status; 
		private string _requestmsg; 
		private string _responsemsg; 
		private Guid? _operationuser; 
		private string _operationusername; 
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public OperationLog()
		{
			_id = Guid.Empty; 
			_dealerid = null;
			_applyid = null;
			_accountuid = null; 
			_name = null; 
			_starttime = null;
			_endtime = null;
			_status = null; 
			_requestmsg = null; 
			_responsemsg = null;
            _operationuser = null;
            _operationusername = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? DealerId
		{
			get { return _dealerid; }
			set { _dealerid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ApplyId
        {
            get { return _applyid; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for ApplyId", value, value.ToString());

                _applyid = value;
            }
        }
			
		/// <summary>
		/// 
		/// </summary>		
		public string AccountUid
		{
			get { return _accountuid; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for AccountUid", value, value.ToString());
				
				_accountuid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Name
		{
			get { return _name; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				
				_name = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? StartTime
		{
			get { return _starttime; }
			set { _starttime = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? EndTime
		{
			get { return _endtime; }
			set { _endtime = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_status = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string RequestMsg
		{
			get { return _requestmsg; }
			set	
			{
				if( value!= null && value.Length > 1073741823)
					throw new ArgumentOutOfRangeException("Invalid value for RequestMsg", value, value.ToString());
				
				_requestmsg = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ResponseMsg
		{
			get { return _responsemsg; }
			set	
			{
				if( value!= null && value.Length > 1073741823)
					throw new ArgumentOutOfRangeException("Invalid value for ResponseMsg", value, value.ToString());
				
				_responsemsg = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? OperationUser
        {
            get { return _operationuser; }
            set { _operationuser = value; }
        }
			
		/// <summary>
		/// 
		/// </summary>		
		public string OperationUserName
        {
			get { return _operationusername; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for OperationUserName", value, value.ToString());

                _operationusername = value;
			}
		}
	    
	
		
		#endregion 
		
		
		
		
		
	}
}
