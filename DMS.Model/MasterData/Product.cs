/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : Product
 * Created Time: 2009-7-8 14:26:37
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	Product
	/// </summary>
	[Serializable]
	public class Product : BaseModel
	{
		#region Private Members
		
		private Guid _id; 
		private string _upn; 
		private string _unitofmeasure; 
		private string _name; 
		private string _productcategory; 
		private bool _lottrack; 
		private string _version; 
		private Guid _dma_id; 
		private string _cfn; 
		private double _sapunitprice; 
		private string _desc_chinese; 
		private string _desc_english; 
		private bool _implant; 
		private Guid _convertfrompart_pma_id; 
		private double _convertfactor; 
		private Guid _productcategory_pct_id; 
		private string _property8; 
		private string _property7; 
		private string _property6; 
		private string _property5; 
		private string _property4; 
		private string _property3; 
		private string _property2; 
		private string _property1; 
		private Guid _productline_bum_id; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Product()
		{
			_id = new Guid(); 
			_upn = null; 
			_unitofmeasure = null; 
			_name = null; 
			_productcategory = null; 
			_lottrack = false; 
			_version = null; 
			_dma_id = new Guid(); 
			_cfn = null; 
			_sapunitprice = 0; 
			_desc_chinese = null; 
			_desc_english = null; 
			_implant = false; 
			_convertfrompart_pma_id = new Guid(); 
			_convertfactor = new double(); 
			_productcategory_pct_id = new Guid(); 
			_property8 = null; 
			_property7 = null; 
			_property6 = null; 
			_property5 = null; 
			_property4 = null; 
			_property3 = null; 
			_property2 = null; 
			_property1 = null; 
			_productline_bum_id = new Guid(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 产品编号
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// UPN
		/// </summary>		
		public string Upn
		{
			get { return _upn; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Upn", value, value.ToString());
				
				_upn = value;
			}
		}
			
		/// <summary>
		/// 产品单位
		/// </summary>		
		public string UnitOfMeasure
		{
			get { return _unitofmeasure; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for UnitOfMeasure", value, value.ToString());
				
				_unitofmeasure = value;
			}
		}
			
		/// <summary>
		/// 产品名称
		/// </summary>		
		public string Name
		{
			get { return _name; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				
				_name = value;
			}
		}
			
		/// <summary>
		/// 产品分类
		/// </summary>		
		public string ProductCategory
		{
			get { return _productcategory; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ProductCategory", value, value.ToString());
				
				_productcategory = value;
			}
		}
			
		/// <summary>
		/// 是否是批次追踪的产品。
		/// </summary>		
		public bool LotTrack
		{
			get { return _lottrack; }
			set { _lottrack = value; }
		}
			
		/// <summary>
		/// 产品版本。

		/// </summary>		
		public string Version
		{
			get { return _version; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Version", value, value.ToString());
				
				_version = value;
			}
		}
			
		/// <summary>
		/// 所属经销商
		/// </summary>		
		public Guid DmaId
		{
			get { return _dma_id; }
			set { _dma_id = value; }
		}
			
		/// <summary>
		/// CFN
		/// </summary>		
		public string Cfn
		{
			get { return _cfn; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Cfn", value, value.ToString());
				
				_cfn = value;
			}
		}
			
		/// <summary>
		/// 同UnitOfMeasure相匹配的单价。
        ///注意单位变换后，单价会发生变化。
		/// </summary>		
		public double SapUnitPrice
		{
			get { return _sapunitprice; }
			set { _sapunitprice = value; }
		}
			
		/// <summary>
		/// 描述
		/// </summary>		
		public string DescChinese
		{
			get { return _desc_chinese; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for DescChinese", value, value.ToString());
				
				_desc_chinese = value;
			}
		}
			
		/// <summary>
		/// 产品的英文说明
		/// </summary>		
		public string DescEnglish
		{
			get { return _desc_english; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for DescEnglish", value, value.ToString());
				
				_desc_english = value;
			}
		}
			
		/// <summary>
		/// 产品是否会植入
        ///1：会
        ///0：不会
		/// </summary>		
		public bool Implant
		{
			get { return _implant; }
			set { _implant = value; }
		}
			
		/// <summary>
		/// 新单位产品从何而来
		/// </summary>		
		public Guid ConvertFromPartPmaId
		{
			get { return _convertfrompart_pma_id; }
			set { _convertfrompart_pma_id = value; }
		}
			
		/// <summary>
		/// 单位变换的转换系数
		/// </summary>		
		public double ConvertFactor
		{
			get { return _convertfactor; }
			set { _convertfactor = value; }
		}
			
		/// <summary>
		/// 产品分类
		/// </summary>		
		public Guid ProductCategoryPctId
		{
			get { return _productcategory_pct_id; }
			set { _productcategory_pct_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Property8
		{
			get { return _property8; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Property8", value, value.ToString());
				
				_property8 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Property7
		{
			get { return _property7; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Property7", value, value.ToString());
				
				_property7 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Property6
		{
			get { return _property6; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Property6", value, value.ToString());
				
				_property6 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Property5
		{
			get { return _property5; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Property5", value, value.ToString());
				
				_property5 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Property4
		{
			get { return _property4; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Property4", value, value.ToString());
				
				_property4 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Property3
		{
			get { return _property3; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Property3", value, value.ToString());
				
				_property3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Property2
		{
			get { return _property2; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Property2", value, value.ToString());
				
				_property2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Property1
		{
			get { return _property1; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Property1", value, value.ToString());
				
				_property1 = value;
			}
		}
			
		/// <summary>
		/// 部门（产品线）
		/// </summary>		
		public Guid ProductLineBumId
		{
			get { return _productline_bum_id; }
			set { _productline_bum_id = value; }
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
