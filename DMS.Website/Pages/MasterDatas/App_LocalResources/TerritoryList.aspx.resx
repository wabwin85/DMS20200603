<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add.alert.Message" xml:space="preserve">
    <value>至少选中一行才能添加!</value>
  </data>
  <data name="Add.hasSelection.alert.Message" xml:space="preserve">
    <value>添加失败!</value>
  </data>
  <data name="Add.result.confirm" xml:space="preserve">
    <value>您确定添加吗?</value>
  </data>
  <data name="afterDeleteHandler.alert.Title" xml:space="preserve">
    <value>消息</value>
  </data>
  <data name="afterDeleteHandler.result0.alert.Message" xml:space="preserve">
    <value>删除成功!</value>
  </data>
  <data name="afterDeleteHandler.result1.alert.Message" xml:space="preserve">
    <value>有子节点,不能删除,请先删除子节点!</value>
  </data>
  <data name="afterDeleteHandler.result2.alert.Message" xml:space="preserve">
    <value>删除失败!</value>
  </data>
  <data name="afterDeleteHandler.result4.alert.Message" xml:space="preserve">
    <value>不能删除,请先删除该省下面的Territory!</value>
  </data>
  <data name="btnAdd.Text" xml:space="preserve">
    <value>添加Territory</value>
  </data>
  <data name="btnAddDealer.Text" xml:space="preserve">
    <value>添加经销商</value>
  </data>
  <data name="btnCancel.Text" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="btnDealerCancel.Text" xml:space="preserve">
    <value>关闭</value>
  </data>
  <data name="btnDelete.Text" xml:space="preserve">
    <value>删除Territory</value>
  </data>
  <data name="btnOk.Text" xml:space="preserve">
    <value>添加</value>
  </data>
  <data name="btnSearch.Text" xml:space="preserve">
    <value>查找</value>
  </data>
  <data name="cbWinDistribution.EmptyText" xml:space="preserve">
    <value>请选择...</value>
  </data>
  <data name="cbWinDistribution.FieldLabel" xml:space="preserve">
    <value>是否分配</value>
  </data>
  <data name="cbWinDistribution.ListItem0" xml:space="preserve">
    <value>否</value>
  </data>
  <data name="cbWinDistribution.ListItem1" xml:space="preserve">
    <value>是</value>
  </data>
  <data name="cbWinDistribution.Qtip" xml:space="preserve">
    <value>删除所选条目</value>
  </data>
  <data name="ColumnModel1.AttributeName.Header" xml:space="preserve">
    <value>产品线</value>
  </data>
  <data name="ColumnModel1.CommandColumn.Header" xml:space="preserve">
    <value>包含经销商</value>
  </data>
  <data name="ColumnModel1.GridCommand.Text" xml:space="preserve">
    <value>编辑包含经销商</value>
  </data>
  <data name="ColumnModel1.lEVEL.Header" xml:space="preserve">
    <value>层级</value>
  </data>
  <data name="ColumnModel1.TemCode.Header" xml:space="preserve">
    <value>经销商区域编码</value>
  </data>
  <data name="ColumnModel1.TemDescription.Header" xml:space="preserve">
    <value>经销商区域描述</value>
  </data>
  <data name="ColumnModel1.TemName.Header" xml:space="preserve">
    <value>经销商区域名称</value>
  </data>
  <data name="contextMenu1.Ext.Msg.alert.Title" xml:space="preserve">
    <value>错误</value>
  </data>
  <data name="contextMenu1.menuAdd.text" xml:space="preserve">
    <value>新增区域</value>
  </data>
  <data name="contextMenu1.menuDelete.confirm" xml:space="preserve">
    <value>您确定删除吗?</value>
  </data>
  <data name="contextMenu1.menuDelete.text" xml:space="preserve">
    <value>删除区域</value>
  </data>
  <data name="contextMenu1.menuEdit.text" xml:space="preserve">
    <value>修改区域</value>
  </data>
  <data name="createPartsWindow.TreeNode.text" xml:space="preserve">
    <value>新建分类</value>
  </data>
  <data name="ctl701.Title" xml:space="preserve">
    <value>经销商区域</value>
  </data>
  <data name="deleteTerritory.hasSelection.alert.Message" xml:space="preserve">
    <value>至少选中一行才能删除!</value>
  </data>
  <data name="deleteTerritory.result.confirm" xml:space="preserve">
    <value>会先删除区域和经销商的关系,您确定删除吗?</value>
  </data>
  <data name="Ext.MessageBox.alert.Title" xml:space="preserve">
    <value>提示</value>
  </data>
  <data name="GridDealer.CName.Header" xml:space="preserve">
    <value>中文名称</value>
  </data>
  <data name="GridDealer.CommandColumn.Header" xml:space="preserve">
    <value>删除</value>
  </data>
  <data name="GridDealer.SpaCode.Header" xml:space="preserve">
    <value>ERP帐号</value>
  </data>
  <data name="TerritoryEditorWindow.Title" xml:space="preserve">
    <value>选择Territory层区域</value>
  </data>
  <data name="txtWinCode.FieldLabel" xml:space="preserve">
    <value>区域编码</value>
  </data>
  <data name="txtWinName.FieldLabel" xml:space="preserve">
    <value>区域名称</value>
  </data>
  <data name="txtWinSelectDealer.FieldLabel" xml:space="preserve">
    <value>经销商中文名称</value>
  </data>
</root>