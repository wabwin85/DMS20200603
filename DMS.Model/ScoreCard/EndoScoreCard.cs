/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : EndoScoreCard
 * Created Time: 2014/9/21 15:10:05
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	EndoScoreCard
	/// </summary>
	[Serializable]
	public class EndoScoreCard : BaseModel
	{
		#region Private Members 71
		
		private Guid _id; 
		private Guid _dma_id; 
		private Guid _bum_id; 
		private string _year; 
		private string _quarter; 
		private string _no; 
		private string _status; 
		private string _manage1; 
		private string _item1; 
		private string _source1; 
		private string _totalscore1; 
		private string _content1; 
		private string _score1; 
		private string _manage2; 
		private string _item2; 
		private string _source2; 
		private string _totalscore2; 
		private string _content2; 
		private string _score2; 
		private string _manage3; 
		private string _item3; 
		private string _source3; 
		private string _totalscore3; 
		private string _content3; 
		private string _score3; 
		private string _manage4; 
		private string _item4; 
		private string _source4; 
		private string _totalscore4; 
		private string _content4; 
		private string _score4; 
		private string _manage5; 
		private string _item5; 
		private string _source5; 
		private string _totalscore5; 
		private string _content5; 
		private string _score5; 
		private string _grade1; 
		private string _gradevalue1; 
		private string _grade2; 
		private string _gradevalue2; 
		private string _grade3; 
		private string _gradevalue3; 
		private string _grade4; 
		private string _gradevalue4; 
		private string _grade5; 
		private string _gradevalue5; 
		private string _grade6; 
		private string _gradevalue6; 
		private string _grade7; 
		private string _gradevalue7; 
		private string _grade8; 
		private string _gradevalue8; 
		private string _grade9; 
		private string _gradevalue9; 
		private string _flield1; 
		private string _flield2; 
		private string _flield3; 
		private Guid? _creareuser; 
		private DateTime? _crearedate; 
		private string _updateuser1; 
		private string _updateremark1; 
		private DateTime? _updatedate1; 
		private string _updateuser2; 
		private string _updateremark2; 
		private DateTime? _updatedate2; 
		private string _updateuser3; 
		private string _updateremark3; 
		private DateTime? _updatedate3; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public EndoScoreCard()
		{
			_id = Guid.Empty; 
			_dma_id = Guid.Empty; 
			_bum_id = Guid.Empty; 
			_year = null; 
			_quarter = null; 
			_no = null; 
			_status = null; 
			_manage1 = null; 
			_item1 = null; 
			_source1 = null; 
			_totalscore1 = null; 
			_content1 = null; 
			_score1 = null; 
			_manage2 = null; 
			_item2 = null; 
			_source2 = null; 
			_totalscore2 = null; 
			_content2 = null; 
			_score2 = null; 
			_manage3 = null; 
			_item3 = null; 
			_source3 = null; 
			_totalscore3 = null; 
			_content3 = null; 
			_score3 = null; 
			_manage4 = null; 
			_item4 = null; 
			_source4 = null; 
			_totalscore4 = null; 
			_content4 = null; 
			_score4 = null; 
			_manage5 = null; 
			_item5 = null; 
			_source5 = null; 
			_totalscore5 = null; 
			_content5 = null; 
			_score5 = null; 
			_grade1 = null; 
			_gradevalue1 = null; 
			_grade2 = null; 
			_gradevalue2 = null; 
			_grade3 = null; 
			_gradevalue3 = null; 
			_grade4 = null; 
			_gradevalue4 = null; 
			_grade5 = null; 
			_gradevalue5 = null; 
			_grade6 = null; 
			_gradevalue6 = null; 
			_grade7 = null; 
			_gradevalue7 = null; 
			_grade8 = null; 
			_gradevalue8 = null; 
			_grade9 = null; 
			_gradevalue9 = null; 
			_flield1 = null; 
			_flield2 = null; 
			_flield3 = null; 
			_creareuser = null;
			_crearedate = null;
			_updateuser1 = null; 
			_updateremark1 = null; 
			_updatedate1 = null;
			_updateuser2 = null; 
			_updateremark2 = null; 
			_updatedate2 = null;
			_updateuser3 = null; 
			_updateremark3 = null; 
			_updatedate3 = null;
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid DmaId
		{
			get { return _dma_id; }
			set { _dma_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid BumId
		{
			get { return _bum_id; }
			set { _bum_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Year
		{
			get { return _year; }
			set	
			{
				if( value!= null && value.Length > 4)
					throw new ArgumentOutOfRangeException("Invalid value for Year", value, value.ToString());
				
				_year = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Quarter
		{
			get { return _quarter; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Quarter", value, value.ToString());
				
				_quarter = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string No
		{
			get { return _no; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for No", value, value.ToString());
				
				_no = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_status = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Manage1
		{
			get { return _manage1; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Manage1", value, value.ToString());
				
				_manage1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Item1
		{
			get { return _item1; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Item1", value, value.ToString());
				
				_item1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Source1
		{
			get { return _source1; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Source1", value, value.ToString());
				
				_source1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string TotalScore1
		{
			get { return _totalscore1; }
			set	
			{
				if( value!= null && value.Length > 3)
					throw new ArgumentOutOfRangeException("Invalid value for TotalScore1", value, value.ToString());
				
				_totalscore1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Content1
		{
			get { return _content1; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Content1", value, value.ToString());
				
				_content1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Score1
		{
			get { return _score1; }
			set	
			{
				if( value!= null && value.Length > 3)
					throw new ArgumentOutOfRangeException("Invalid value for Score1", value, value.ToString());
				
				_score1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Manage2
		{
			get { return _manage2; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Manage2", value, value.ToString());
				
				_manage2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Item2
		{
			get { return _item2; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Item2", value, value.ToString());
				
				_item2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Source2
		{
			get { return _source2; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Source2", value, value.ToString());
				
				_source2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string TotalScore2
		{
			get { return _totalscore2; }
			set	
			{
				if( value!= null && value.Length > 3)
					throw new ArgumentOutOfRangeException("Invalid value for TotalScore2", value, value.ToString());
				
				_totalscore2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Content2
		{
			get { return _content2; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Content2", value, value.ToString());
				
				_content2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Score2
		{
			get { return _score2; }
			set	
			{
				if( value!= null && value.Length > 3)
					throw new ArgumentOutOfRangeException("Invalid value for Score2", value, value.ToString());
				
				_score2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Manage3
		{
			get { return _manage3; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Manage3", value, value.ToString());
				
				_manage3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Item3
		{
			get { return _item3; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Item3", value, value.ToString());
				
				_item3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Source3
		{
			get { return _source3; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Source3", value, value.ToString());
				
				_source3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string TotalScore3
		{
			get { return _totalscore3; }
			set	
			{
				if( value!= null && value.Length > 3)
					throw new ArgumentOutOfRangeException("Invalid value for TotalScore3", value, value.ToString());
				
				_totalscore3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Content3
		{
			get { return _content3; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Content3", value, value.ToString());
				
				_content3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Score3
		{
			get { return _score3; }
			set	
			{
				if( value!= null && value.Length > 3)
					throw new ArgumentOutOfRangeException("Invalid value for Score3", value, value.ToString());
				
				_score3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Manage4
		{
			get { return _manage4; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Manage4", value, value.ToString());
				
				_manage4 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Item4
		{
			get { return _item4; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Item4", value, value.ToString());
				
				_item4 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Source4
		{
			get { return _source4; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Source4", value, value.ToString());
				
				_source4 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string TotalScore4
		{
			get { return _totalscore4; }
			set	
			{
				if( value!= null && value.Length > 3)
					throw new ArgumentOutOfRangeException("Invalid value for TotalScore4", value, value.ToString());
				
				_totalscore4 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Content4
		{
			get { return _content4; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Content4", value, value.ToString());
				
				_content4 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Score4
		{
			get { return _score4; }
			set	
			{
				if( value!= null && value.Length > 3)
					throw new ArgumentOutOfRangeException("Invalid value for Score4", value, value.ToString());
				
				_score4 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Manage5
		{
			get { return _manage5; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Manage5", value, value.ToString());
				
				_manage5 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Item5
		{
			get { return _item5; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Item5", value, value.ToString());
				
				_item5 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Source5
		{
			get { return _source5; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Source5", value, value.ToString());
				
				_source5 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string TotalScore5
		{
			get { return _totalscore5; }
			set	
			{
				if( value!= null && value.Length > 3)
					throw new ArgumentOutOfRangeException("Invalid value for TotalScore5", value, value.ToString());
				
				_totalscore5 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Content5
		{
			get { return _content5; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Content5", value, value.ToString());
				
				_content5 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Score5
		{
			get { return _score5; }
			set	
			{
				if( value!= null && value.Length > 3)
					throw new ArgumentOutOfRangeException("Invalid value for Score5", value, value.ToString());
				
				_score5 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Grade1
		{
			get { return _grade1; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Grade1", value, value.ToString());
				
				_grade1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string GradeValue1
		{
			get { return _gradevalue1; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for GradeValue1", value, value.ToString());
				
				_gradevalue1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Grade2
		{
			get { return _grade2; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Grade2", value, value.ToString());
				
				_grade2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string GradeValue2
		{
			get { return _gradevalue2; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for GradeValue2", value, value.ToString());
				
				_gradevalue2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Grade3
		{
			get { return _grade3; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Grade3", value, value.ToString());
				
				_grade3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string GradeValue3
		{
			get { return _gradevalue3; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for GradeValue3", value, value.ToString());
				
				_gradevalue3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Grade4
		{
			get { return _grade4; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Grade4", value, value.ToString());
				
				_grade4 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string GradeValue4
		{
			get { return _gradevalue4; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for GradeValue4", value, value.ToString());
				
				_gradevalue4 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Grade5
		{
			get { return _grade5; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Grade5", value, value.ToString());
				
				_grade5 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string GradeValue5
		{
			get { return _gradevalue5; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for GradeValue5", value, value.ToString());
				
				_gradevalue5 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Grade6
		{
			get { return _grade6; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Grade6", value, value.ToString());
				
				_grade6 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string GradeValue6
		{
			get { return _gradevalue6; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for GradeValue6", value, value.ToString());
				
				_gradevalue6 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Grade7
		{
			get { return _grade7; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Grade7", value, value.ToString());
				
				_grade7 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string GradeValue7
		{
			get { return _gradevalue7; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for GradeValue7", value, value.ToString());
				
				_gradevalue7 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Grade8
		{
			get { return _grade8; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Grade8", value, value.ToString());
				
				_grade8 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string GradeValue8
		{
			get { return _gradevalue8; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for GradeValue8", value, value.ToString());
				
				_gradevalue8 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Grade9
		{
			get { return _grade9; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Grade9", value, value.ToString());
				
				_grade9 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string GradeValue9
		{
			get { return _gradevalue9; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for GradeValue9", value, value.ToString());
				
				_gradevalue9 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Flield1
		{
			get { return _flield1; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Flield1", value, value.ToString());
				
				_flield1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Flield2
		{
			get { return _flield2; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Flield2", value, value.ToString());
				
				_flield2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Flield3
		{
			get { return _flield3; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Flield3", value, value.ToString());
				
				_flield3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? CreareUser
		{
			get { return _creareuser; }
			set { _creareuser = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? CreareDate
		{
			get { return _crearedate; }
			set { _crearedate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UpdateUser1
		{
			get { return _updateuser1; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for UpdateUser1", value, value.ToString());
				
				_updateuser1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UpdateRemark1
		{
			get { return _updateremark1; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for UpdateRemark1", value, value.ToString());
				
				_updateremark1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? UpdateDate1
		{
			get { return _updatedate1; }
			set { _updatedate1 = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UpdateUser2
		{
			get { return _updateuser2; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for UpdateUser2", value, value.ToString());
				
				_updateuser2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UpdateRemark2
		{
			get { return _updateremark2; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for UpdateRemark2", value, value.ToString());
				
				_updateremark2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? UpdateDate2
		{
			get { return _updatedate2; }
			set { _updatedate2 = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UpdateUser3
		{
			get { return _updateuser3; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for UpdateUser3", value, value.ToString());
				
				_updateuser3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UpdateRemark3
		{
			get { return _updateremark3; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for UpdateRemark3", value, value.ToString());
				
				_updateremark3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? UpdateDate3
		{
			get { return _updatedate3; }
			set { _updatedate3 = value; }
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
