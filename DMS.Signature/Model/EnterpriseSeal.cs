/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : EnterpriseSeal
 * Created Time: 2017/12/19 16:04:15
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Signature.Model
{
	/// <summary>
	///	EnterpriseSeal
	/// </summary>
	[Serializable]
	public class EnterpriseSeal
	{
		#region Private Members 14
		
		private Guid _id; 
		private Guid? _em_id; 
		private Guid _dma_id;
        private Guid? _parent_dma_id;
        private string _dealername;
        private string _organname;
        private string _accountuid; 
		private string _templatetype; 
		private string _color; 
		private string _htext; 
		private string _qtext; 
		private string _seal; 
		private string _imageurl; 
		private int? _isactive;
        private Guid? _createuser;
        private string _createusername;
        private DateTime? _createdate;
        private Guid? _updateuser;
        private string _updateusername;
        private DateTime? _updatedate;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public EnterpriseSeal()
		{
			_id = Guid.Empty; 
			_em_id = null; 
			_dma_id = Guid.Empty;
            _parent_dma_id = null;
            _dealername = null;
            _organname = null;
            _accountuid = null; 
			_templatetype = null; 
			_color = null; 
			_htext = null; 
			_qtext = null;
            _seal = null;
            _imageurl = null; 
			_isactive = null;
            _createuser = null;
            _createusername = null;
            _createdate = null;
            _updateuser = null;
            _updateusername = null;
            _updatedate = null;
        }
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? EmId
		{
			get { return _em_id; }
			set { _em_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid DmaId
		{
			get { return _dma_id; }
			set { _dma_id = value; }
		}

        /// <summary>
        /// 
        /// </summary>		
        public Guid? ParentDmaId
        {
            get { return _parent_dma_id; }
            set { _parent_dma_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string DealerName
        {
            get { return _dealername; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for DealerName", value, value.ToString());

                _dealername = value;
            }
        }

        /// <summary>
		/// 
		/// </summary>		
		public string OrganName
        {
            get { return _organname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for OrganName", value, value.ToString());

                _organname = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string AccountUid
		{
			get { return _accountuid; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for AccountUid", value, value.ToString());
				
				_accountuid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string TemplateType
		{
			get { return _templatetype; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for TemplateType", value, value.ToString());
				
				_templatetype = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Color
		{
			get { return _color; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Color", value, value.ToString());
				
				_color = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Htext
		{
			get { return _htext; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Htext", value, value.ToString());
				
				_htext = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Qtext
		{
			get { return _qtext; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Qtext", value, value.ToString());
				
				_qtext = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Seal
		{
			get { return _seal; }
			set { _seal = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ImageUrl
		{
			get { return _imageurl; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for ImageUrl", value, value.ToString());
				
				_imageurl = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? IsActive
		{
			get { return _isactive; }
			set { _isactive = value; }
		}

        /// <summary>
        /// 
        /// </summary>		
        public Guid? CreateUser
        {
            get { return _createuser; }
            set { _createuser = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CreateUserName
        {
            get { return _createusername; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for CreateUserName", value, value.ToString());

                _createusername = value;
            }
        }

        /// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateDate
        {
            get { return _createdate; }
            set { _createdate = value; }
        }

        /// <summary>
		/// 
		/// </summary>		
		public Guid? UpdateUser
        {
            get { return _updateuser; }
            set { _updateuser = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string UpdateUserName
        {
            get { return _updateusername; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for UpdateUserName", value, value.ToString());

                _updateusername = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime? UpdateDate
        {
            get { return _updatedate; }
            set { _updatedate = value; }
        }


        #endregion





    }
}
