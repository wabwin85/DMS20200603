/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : EnterpriseMaster
 * Created Time: 2017/12/19 16:04:14
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Signature.Model
{
	/// <summary>
	///	EnterpriseMaster
	/// </summary>
	[Serializable]
	public class EnterpriseMaster
	{
		#region Private Members 24
		
		private Guid _id; 
		private Guid? _dma_id;
        private Guid? _parent_dma_id;
        private string _dealername;
        private string _accountuid; 
		private string _phone; 
		private string _email; 
		private string _name; 
		private int? _organtype; 
		private string _regtype; 
		private string _organcode; 
		private int? _usertype; 
		private string _legalname; 
		private string _legalidno; 
		private int? _legalarea; 
		private string _agentname; 
		private string _agentidno; 
		private string _address; 
		private string _scope; 
		private string _status;
        private Guid? _createuser;
        private string _createusername;
        private DateTime? _createdate;
        private Guid? _updateuser; 
		private string _updateusername; 
		private DateTime? _updatedate; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public EnterpriseMaster()
		{
			_id = Guid.Empty; 
			_dma_id = null;
            _parent_dma_id = null;
            _dealername = null;
            _accountuid = null; 
			_phone = null; 
			_email = null; 
			_name = null; 
			_organtype = null;
			_regtype = null; 
			_organcode = null; 
			_usertype = null;
			_legalname = null; 
			_legalidno = null; 
			_legalarea = null;
			_agentname = null; 
			_agentidno = null; 
			_address = null; 
			_scope = null; 
			_status = null;
            _createuser = null;
            _createusername = null;
            _createdate = null;
            _updateuser = null;
			_updateusername = null; 
			_updatedate = null;
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? DmaId
        {
            get { return _dma_id; }
            set { _dma_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? ParentDmaId
        {
            get { return _parent_dma_id; }
            set { _parent_dma_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string DealerName
        {
            get { return _dealername; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for DealerName", value, value.ToString());

                _dealername = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string AccountUid
		{
			get { return _accountuid; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for AccountUid", value, value.ToString());
				
				_accountuid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Phone
		{
			get { return _phone; }
			set	
			{
				if( value!= null && value.Length > 11)
					throw new ArgumentOutOfRangeException("Invalid value for Phone", value, value.ToString());
				
				_phone = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Email
		{
			get { return _email; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Email", value, value.ToString());
				
				_email = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Name
		{
			get { return _name; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				
				_name = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? OrganType
		{
			get { return _organtype; }
			set { _organtype = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string RegType
		{
			get { return _regtype; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for RegType", value, value.ToString());
				
				_regtype = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string OrganCode
		{
			get { return _organcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for OrganCode", value, value.ToString());
				
				_organcode = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? UserType
		{
			get { return _usertype; }
			set { _usertype = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string LegalName
		{
			get { return _legalname; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for LegalName", value, value.ToString());
				
				_legalname = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string LegalIdNo
		{
			get { return _legalidno; }
			set	
			{
				if( value!= null && value.Length > 25)
					throw new ArgumentOutOfRangeException("Invalid value for LegalIdNo", value, value.ToString());
				
				_legalidno = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? LegalArea
		{
			get { return _legalarea; }
			set { _legalarea = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string AgentName
		{
			get { return _agentname; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for AgentName", value, value.ToString());
				
				_agentname = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string AgentIdNo
		{
			get { return _agentidno; }
			set	
			{
				if( value!= null && value.Length > 25)
					throw new ArgumentOutOfRangeException("Invalid value for AgentIdNo", value, value.ToString());
				
				_agentidno = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Address
		{
			get { return _address; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Address", value, value.ToString());
				
				_address = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Scope
		{
			get { return _scope; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Scope", value, value.ToString());
				
				_scope = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_status = value;
			}
		}

        /// <summary>
        /// 
        /// </summary>		
        public Guid? CreateUser
        {
            get { return _createuser; }
            set { _createuser = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CreateUserName
        {
            get { return _createusername; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for CreateUserName", value, value.ToString());

                _createusername = value;
            }
        }

        /// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateDate
        {
            get { return _createdate; }
            set { _createdate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? UpdateUser
		{
			get { return _updateuser; }
			set { _updateuser = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UpdateUserName
		{
			get { return _updateusername; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for UpdateUserName", value, value.ToString());
				
				_updateusername = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? UpdateDate
		{
			get { return _updatedate; }
			set { _updatedate = value; }
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
