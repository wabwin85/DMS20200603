/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : FileVersion
 * Created Time: 2017/12/19 16:04:15
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Signature.Model
{
	/// <summary>
	///	FileVersion
	/// </summary>
	[Serializable]
	public class FileVersion
	{
		#region Private Members 16
		
		private Guid _id; 
		private Guid? _applyid; 
		private string _fileurl;
        private Guid? _fileid;
        private string _filename; 
		private string _extension; 
		private string _version; 
		private int? _iscurrent;
        private string _signserviceid;
        private string _filepath;
        private string _stream;
        private Guid? _createuser;
        private string _createusername;
        private DateTime? _createdate;
        private string _rev1; 
		private string _rev2; 
		private string _rev3; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public FileVersion()
		{
			_id = Guid.Empty; 
			_applyid = null;
            _fileid = null;
            _fileurl = null; 
			_filename = null; 
			_extension = null; 
			_version = null; 
			_iscurrent = null;
            _signserviceid = null;
            _filepath = null;
            _stream = null;
            _createuser = null;
            _createusername = null;
            _createdate = null;
            _rev1 = null; 
			_rev2 = null; 
			_rev3 = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? ApplyId
		{
			get { return _applyid; }
			set { _applyid = value; }
		}

        /// <summary>
        /// 
        /// </summary>		
        public Guid? FileId
        {
            get { return _fileid; }
            set { _fileid = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string FileUrl
		{
			get { return _fileurl; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for FileUrl", value, value.ToString());
				
				_fileurl = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string FileName
		{
			get { return _filename; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for FileName", value, value.ToString());
				
				_filename = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Extension
		{
			get { return _extension; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Extension", value, value.ToString());
				
				_extension = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Version
		{
			get { return _version; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Version", value, value.ToString());
				
				_version = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? IsCurrent
		{
			get { return _iscurrent; }
			set { _iscurrent = value; }
		}

        /// <summary>
		/// 
		/// </summary>		
		public string SignServiceId
        {
            get { return _signserviceid; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for SignServiceId", value, value.ToString());
                _signserviceid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string FilePath
        {
            get { return _filepath; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for FilePath", value, value.ToString());
                _filepath = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Stream
        {
            get { return _stream; }
            set { _stream = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? CreateUser
        {
            get { return _createuser; }
            set { _createuser = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CreateUserName
		{
			get { return _createusername; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for CreateUserName", value, value.ToString());
				
				_createusername = value;
			}
		}

        /// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateDate
        {
            get { return _createdate; }
            set { _createdate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Rev1
		{
			get { return _rev1; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for Rev1", value, value.ToString());
				
				_rev1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Rev2
		{
			get { return _rev2; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for Rev2", value, value.ToString());
				
				_rev2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Rev3
		{
			get { return _rev3; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for Rev3", value, value.ToString());
				
				_rev3 = value;
			}
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
