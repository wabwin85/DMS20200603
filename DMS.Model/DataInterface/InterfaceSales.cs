/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : InterfaceSales
 * Created Time: 2016/1/4 10:46:37
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
    /// <summary>
    ///	InterfaceSales
    /// </summary>
    [Serializable]
    public class InterfaceSales : BaseModel
    {
        #region Private Members 15

        private Guid _id;
        private string _articlenumber;
        private decimal? _unitprice;
        private string _lotnumber;
        private decimal? _lotqty;
        private DateTime? _saledate;
        private string _saletype;
        private string _hospitalcode;
        private string _remark;
        private int _linenbr;
        private string _filename;
        private DateTime _importdate;
        private string _clientid;
        private string _batchnbr;
        private string _qrcode;
        private string _salesno;
        private string _serviceagent;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public InterfaceSales()
        {
            _id = Guid.Empty;
            _articlenumber = null;
            _unitprice = null;
            _lotnumber = null;
            _lotqty = null;
            _saledate = null;
            _saletype = null;
            _hospitalcode = null;
            _remark = null;
            _linenbr = 0;
            _filename = null;
            _importdate = new DateTime();
            _clientid = null;
            _batchnbr = null;
            _qrcode = null;
            _salesno = null;
            _serviceagent = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 主键
        /// </summary>		
        public Guid Id
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 产品型号
        /// </summary>		
        public string ArticleNumber
        {
            get { return _articlenumber; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for ArticleNumber", value, value.ToString());

                _articlenumber = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public decimal? UnitPrice
        {
            get { return _unitprice; }
            set { _unitprice = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string LotNumber
        {
            get { return _lotnumber; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for LotNumber", value, value.ToString());

                _lotnumber = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public decimal? LotQty
        {
            get { return _lotqty; }
            set { _lotqty = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime? SaleDate
        {
            get { return _saledate; }
            set { _saledate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string SaleType
        {
            get { return _saletype; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for SaleType", value, value.ToString());

                _saletype = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string HospitalCode
        {
            get { return _hospitalcode; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for HospitalCode", value, value.ToString());

                _hospitalcode = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());

                _remark = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public int LineNbr
        {
            get { return _linenbr; }
            set { _linenbr = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string FileName
        {
            get { return _filename; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for FileName", value, value.ToString());

                _filename = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime ImportDate
        {
            get { return _importdate; }
            set { _importdate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Clientid
        {
            get { return _clientid; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Clientid", value, value.ToString());

                _clientid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string BatchNbr
        {
            get { return _batchnbr; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for BatchNbr", value, value.ToString());

                _batchnbr = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string QrCode
        {
            get { return _qrcode; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for QrCode", value, value.ToString());

                _qrcode = value;
            }
        }

        public string SalesNo
        {
            get { return _salesno; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for SalesNo", value, value.ToString());

                _salesno = value;
            }
        }
        public string ServiceAgent
        {
            get { return _serviceagent; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for ServiceAgent", value, value.ToString());

                _serviceagent = value;
            }
        }

        #endregion





    }
}
