/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : TProFlow
 * Created Time: 2016/3/7 15:48:42
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
    /// <summary>
    ///	TProFlow
    /// </summary>
    [Serializable]
    public class ProInitPointFlow
    {
        #region Private Members 11
		
		private int _flowid; 
		private string _description; 
		private string _bu; 
		private string _pointtype; 
		private string _pointuserangetype; 
		private string _pointuserange; 
		private string _status; 
		private string _createby; 
		private DateTime? _createtime; 
		private string _modifyby; 
		private DateTime? _modifydate; 
		private string _htmlstr; 		 
		private string _remark1; 	 
		private string _flowno;
        private int _userangecondition;
        private int _markettype;
        private Guid? _instanceid;
        private string _reasontype;

        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public ProInitPointFlow()
		{
			_flowid = 0; 
			_description = null; 
			_bu = null;
            _pointtype = null;
            _pointuserangetype = null;
            _pointuserange = null;
			_status = null; 
			_createby = null; 
			_createtime = null;
			_modifyby = null; 
			_modifydate = null;
            _htmlstr = null;
			_remark1 = null;
            _flowno = null;
            _userangecondition = 0;
            _markettype = 0;
            _instanceid = null;
            _reasontype = null;

        }
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public int FlowId
		{
			get { return _flowid; }
			set { _flowid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Description
		{
			get { return _description; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Description", value, value.ToString());
				
				_description = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Bu
		{
			get { return _bu; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Bu", value, value.ToString());
				
				_bu = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
        public string PointType
		{
			get { return _pointtype; }
			set	
			{
				if( value!= null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for PointType", value, value.ToString());
				
				_pointtype = value;
			}
		}

        /// <summary>
        /// 
        /// </summary>		
        public string PointUseRangeType
        {
            get { return _pointuserangetype; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for PointUseRangeType", value, value.ToString());

                _pointuserangetype = value;
            }
        }
			
		/// <summary>
		/// 
		/// </summary>		
        public string PointUseRange
		{
			get { return _pointuserange; }
			set	
			{
                _pointuserange = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_status = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CreateBy
		{
			get { return _createby; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for CreateBy", value, value.ToString());
				
				_createby = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateTime
		{
			get { return _createtime; }
			set { _createtime = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ModifyBy
		{
			get { return _modifyby; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ModifyBy", value, value.ToString());
				
				_modifyby = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? ModifyDate
		{
			get { return _modifydate; }
			set { _modifydate = value; }
		}

        /// <summary>
        /// 
        /// </summary>		
        public string HtmlStr
        {
            get { return _htmlstr; }
            set
            {
                _htmlstr = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Remark1
        {
            get { return _remark1; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Remark1", value, value.ToString());

                _remark1 = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string FlowNo
        {
            get { return _flowno; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for FlowNo", value, value.ToString());

                _flowno = value;
            }
        }

        public int UseRangeCondition
        {
            get { return _userangecondition; }
            set { _userangecondition = value; }
        }

        public int MarketType
        {
            get { return _markettype; }
            set { _markettype = value; }
        }
       
        public Guid? Instanceid
        {
            get { return _instanceid; }
            set { _instanceid = value; }
        }

        public string ReasonType
        {
            get { return _reasontype; }
            set
            {
                if (value != null && value.Length > 10)
                    throw new ArgumentOutOfRangeException("Invalid value for ReasonType", value, value.ToString());

                _reasontype = value;
            }
        }
        

        #endregion
    }
}
