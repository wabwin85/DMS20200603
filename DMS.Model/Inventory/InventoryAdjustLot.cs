/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : InventoryAdjustLot
 * Created Time: 2016/5/30 16:33:44
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
    /// <summary>
    ///	InventoryAdjustLot
    /// </summary>
    [Serializable]
    public class InventoryAdjustLot : BaseModel
    {
        #region Private Members 12

        private Guid _iad_id;
        private Guid _id;
        private double _lotqty;
        private Guid? _lot_id;
        private Guid? _whm_id;
        private string _lotnumber;
        private DateTime? _expireddate;
        private Guid? _prh_id;
        private decimal? _unitprice;
        private Guid? _dma_id;
        private Guid? _qrlot_id;
        private string _qrlotnumber;
        private string _ltm_qrcode;
        private string _ltm_lot;
        private string _lot_dom;
        private string _erplinenbr;
        private string _erpnbr;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public InventoryAdjustLot()
        {
            _iad_id = Guid.Empty;
            _id = Guid.Empty;
            _lotqty = 0;
            _lot_id = null;
            _whm_id = null;
            _lotnumber = null;
            _expireddate = null;
            _prh_id = null;
            _unitprice = null;
            _dma_id = null;
            _qrlot_id = null;
            _qrlotnumber = null;
            _ltm_qrcode = null;
            _ltm_lot = null;
            _lot_dom = null;
            _erplinenbr = "";
            _erpnbr="";
    }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 库存调整明细
        /// </summary>		
        public Guid IadId
        {
            get { return _iad_id; }
            set { _iad_id = value; }
        }

        /// <summary>
        /// 主键
        /// </summary>		
        public Guid Id
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 数量
        /// </summary>		
        public double LotQty
        {
            get { return _lotqty; }
            set { _lotqty = value; }
        }

        /// <summary>
        /// 批次
        /// </summary>		
        public Guid? LotId
        {
            get { return _lot_id; }
            set { _lot_id = value; }
        }

        /// <summary>
        /// 仓库
        /// </summary>		
        public Guid? WhmId
        {
            get { return _whm_id; }
            set { _whm_id = value; }
        }
        /// <summary>
        /// IAL_LTM_QRCode
        /// </summary>		
        public string LotQRCode
        {
            get { return _ltm_qrcode; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for LotQRCode", value, value.ToString());

                _ltm_qrcode = value;
            }
        }
        public string DOM
        {
            get { return _lot_dom; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for DOM", value, value.ToString());

                _lot_dom = value;
            }
        }
        /// <summary>
        /// IAL_LTM_Lot
        /// </summary>		
        public string LtmLot
        {
            get { return _ltm_lot; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for LtmLot", value, value.ToString());

                _ltm_lot = value;
            }
        }

        /// <summary>
        /// IAL_LotNumber
        /// </summary>		
        public string LotNumber
        {
            get { return _lotnumber; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for LotNumber", value, value.ToString());

                _lotnumber = value;
            }
        }

        /// <summary>
        /// IAL_ExpiredDate
        /// </summary>		
        public DateTime? ExpiredDate
        {
            get { return _expireddate; }
            set { _expireddate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? PrhId
        {
            get { return _prh_id; }
            set { _prh_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public decimal? UnitPrice
        {
            get { return _unitprice; }
            set { _unitprice = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? DmaId
        {
            get { return _dma_id; }
            set { _dma_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? QrLotId
        {
            get { return _qrlot_id; }
            set { _qrlot_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string QrLotNumber
        {
            get { return _qrlotnumber; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for QrLotNumber", value, value.ToString());

                _qrlotnumber = value;
            }
        }

        public string ERPLineNbr
        {
            get { return _erplinenbr; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for ERPLineNbr", value, value.ToString());

                _erplinenbr = value;
            }
        }
        public string ERPNbr
        {
            get { return _erpnbr; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for ERPNbr", value, value.ToString());

                _erpnbr = value;
            }
        }

        #endregion





    }
}
