/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : EnterpriseAuthentication
 * Created Time: 2018/1/5 16:52:08
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Signature.Model
{
	/// <summary>
	///	EnterpriseAuthentication
	/// </summary>
	[Serializable]
	public class EnterpriseAuthentication
	{
		#region Private Members 27
		
		private Guid _id; 
		private Guid? _dma_id; 
		private Guid? _parent_dma_id; 
		private string _dealername; 
		private string _accountuid; 
		private string _name; 
		private string _orgcode; 
		private string _usccode; 
		private string _regcode; 
		private string _legalname; 
		private string _legalidno;
        private int? _legalarea;
		private int? _isactive; 
		private string _status; 
		private string _serviceid; 
		private int? _topaycount;
        private string _cardno;
        private string _bank;
        private string _subbank;
        private Guid? _createuser;
        private string _createusername;
        private DateTime? _createdate;
        private Guid? _updateuser;
        private string _updateusername;
        private DateTime? _updatedate;
        private string _remark1; 
		private string _remark2; 
		private string _remark3; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public EnterpriseAuthentication()
		{
			_id = Guid.Empty; 
			_dma_id = null;
			_parent_dma_id = null;
			_dealername = null; 
			_accountuid = null; 
			_name = null; 
			_orgcode = null; 
			_usccode = null; 
			_regcode = null; 
			_legalname = null; 
			_legalidno = null;
            _legalarea = null;
            _isactive = null;
			_status = null; 
			_serviceid = null; 
			_topaycount = null;
            _cardno = null;
            _bank = null;
            _subbank = null;
            _createuser = null;
            _createusername = null;
            _createdate = null;
            _updateuser = null;
            _updateusername = null;
            _updatedate = null;
            _remark1 = null; 
			_remark2 = null; 
			_remark3 = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? DmaId
		{
			get { return _dma_id; }
			set { _dma_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? ParentDmaId
		{
			get { return _parent_dma_id; }
			set { _parent_dma_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string DealerName
		{
			get { return _dealername; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for DealerName", value, value.ToString());
				
				_dealername = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string AccountUid
		{
			get { return _accountuid; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for AccountUid", value, value.ToString());
				
				_accountuid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Name
		{
			get { return _name; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				
				_name = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string OrgCode
		{
			get { return _orgcode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for OrgCode", value, value.ToString());
				
				_orgcode = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UscCode
		{
			get { return _usccode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for UscCode", value, value.ToString());
				
				_usccode = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string RegCode
		{
			get { return _regcode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for RegCode", value, value.ToString());
				
				_regcode = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string LegalName
		{
			get { return _legalname; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for LegalName", value, value.ToString());
				
				_legalname = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string LegalIdNo
		{
			get { return _legalidno; }
			set	
			{
				if( value!= null && value.Length > 25)
					throw new ArgumentOutOfRangeException("Invalid value for LegalIdNo", value, value.ToString());
				
				_legalidno = value;
			}
		}

        /// <summary>
        /// 
        /// </summary>		
        public int? LegalArea
        {
            get { return _legalarea; }
            set { _legalarea = value; }
        }
        
        /// <summary>
        /// 
        /// </summary>		
        public int? IsActive
		{
			get { return _isactive; }
			set { _isactive = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_status = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ServiceId
		{
			get { return _serviceid; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ServiceId", value, value.ToString());
				
				_serviceid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int? ToPayCount
		{
			get { return _topaycount; }
			set { _topaycount = value; }
		}

        /// <summary>
		/// 
		/// </summary>		
		public string CardNo
        {
            get { return _cardno; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for CardNo", value, value.ToString());

                _cardno = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Bank
        {
            get { return _bank; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Bank", value, value.ToString());

                _bank = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string SubBank
        {
            get { return _subbank; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for SubBank", value, value.ToString());

                _subbank = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? CreateUser
        {
            get { return _createuser; }
            set { _createuser = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CreateUserName
        {
            get { return _createusername; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for CreateUserName", value, value.ToString());

                _createusername = value;
            }
        }

        /// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateDate
        {
            get { return _createdate; }
            set { _createdate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public Guid? UpdateUser
        {
            get { return _updateuser; }
            set { _updateuser = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string UpdateUserName
        {
            get { return _updateusername; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for UpdateUserName", value, value.ToString());

                _updateusername = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime? UpdateDate
        {
            get { return _updatedate; }
            set { _updatedate = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Remark1
		{
			get { return _remark1; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for Remark1", value, value.ToString());
				
				_remark1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Remark2
		{
			get { return _remark2; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for Remark2", value, value.ToString());
				
				_remark2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Remark3
		{
			get { return _remark3; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for Remark3", value, value.ToString());
				
				_remark3 = value;
			}
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
