/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : QueryInventory
 * Created Time: 2009-8-7 8:53:53 PM
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	QueryInventory
	/// </summary>
	[Serializable]
	public class QueryInventory : BaseModel
	{
		#region Private Members
		
		private string _cfnchinesename; 
		private string _customerfacenbr; 
		private bool _implant; 
		private string _productlinename; 
		private string _upn; 
		private string _productname; 
		private string _warehousename; 
		private string _lotnumber; 
		private DateTime _expireddate; 
		private double _onhandqty; 
		private double _onhandquantity; 
		private float _sapunitprice; 
		private string _dealername;
        private string _unitofmeasure;
        private string _expireddatestring;
        private decimal _onhandqtyDecimal;
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public QueryInventory()
		{
			_cfnchinesename = null; 
			_customerfacenbr = null; 
			_implant = false; 
			_productlinename = null; 
			_upn = null; 
			_productname = null; 
			_warehousename = null; 
			_lotnumber = null; 
			_expireddate = new DateTime(); 
			_onhandqty = new double(); 
			_onhandquantity = new double(); 
			_sapunitprice = 0; 
			_dealername = null;
            _unitofmeasure = null;
            _expireddatestring = null;
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public string CFNChineseName
		{
			get { return _cfnchinesename; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for ChineseName", value, value.ToString());
				
				_cfnchinesename = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CustomerFaceNbr
		{
			get { return _customerfacenbr; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for CustomerFaceNbr", value, value.ToString());
				
				_customerfacenbr = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public bool Implant
		{
			get { return _implant; }
			set { _implant = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ProductLineName
		{
			get { return _productlinename; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ProductLineName", value, value.ToString());
				
				_productlinename = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Upn
		{
			get { return _upn; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Upn", value, value.ToString());
				
				_upn = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ProductName
		{
			get { return _productname; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for ProductName", value, value.ToString());
				
				_productname = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string WarehouseName
		{
			get { return _warehousename; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for WarehouseName", value, value.ToString());
				
				_warehousename = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string LotNumber
		{
			get { return _lotnumber; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for LotNumber", value, value.ToString());
				
				_lotnumber = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime ExpiredDate
		{
			get { return _expireddate; }
			set { _expireddate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public double OnHandQty
		{
			get { return _onhandqty; }
			set { _onhandqty = value; }
		}

        /// <summary>
        /// 
        /// </summary>		
        public decimal OnHandQtyDecimal 
        {
            get { return Convert.ToDecimal(_onhandqty); }
            set { _onhandqtyDecimal = value; }
        }
			
		/// <summary>
		/// 
		/// </summary>		
		public double OnHandQuantity
		{
			get { return _onhandquantity; }
			set { _onhandquantity = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public float SapUnitPrice
		{
			get { return _sapunitprice; }
			set { _sapunitprice = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string DealerName
		{
			get { return _dealername; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for DealerName", value, value.ToString());
				
				_dealername = value;
			}
		}

        /// <summary>
        /// 
        /// </summary>		
        public string UnitOfMeasure
        {
            get { return _unitofmeasure; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for UnitOfMeasure", value, value.ToString());

                _unitofmeasure = value;
            }
        }

        public string ExpiredDateString
        {
            get { return _expireddatestring; }
            set
            {
                _expireddatestring = value;
            }
        }
	
		
		#endregion 
		
		
		
		
		
	}
}
