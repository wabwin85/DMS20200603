/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : InterfaceHospitalSalesFort2
 * Created Time: 2016/12/14 18:47:26
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	InterfaceHospitalSalesFort2
	/// </summary>
	[Serializable]
	public class InterfaceHospitalSalesFort2 
	{
		#region Private Members 21
		
		private Guid _id; 
		private string _distributorid; 
		private string _hospitalcode; 
		private string _type; 
		private DateTime? _saledate; 
		private string _departments; 
		private string _remark; 
		private string _invoiceno; 
		private string _invoicetitle; 
		private DateTime? _invoicedate; 
		private string _articlenumber; 
		private string _lotnumber; 
		private string _qrcode; 
		private decimal? _unitprice; 
		private decimal? _lotqty; 
		private string _warehousename; 
		private int _linenbr; 
		private string _filename; 
		private DateTime _importdate; 
		private string _clientid; 
		private string _batchnbr; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public InterfaceHospitalSalesFort2()
		{
			_id = Guid.Empty; 
			_distributorid = null; 
			_hospitalcode = null; 
			_type = null; 
			_saledate = null;
			_departments = null; 
			_remark = null; 
			_invoiceno = null; 
			_invoicetitle = null; 
			_invoicedate = null;
			_articlenumber = null; 
			_lotnumber = null; 
			_qrcode = null; 
			_unitprice = null;
			_lotqty = null;
			_warehousename = null; 
			_linenbr = 0; 
			_filename = null; 
			_importdate = new DateTime(); 
			_clientid = null; 
			_batchnbr = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Distributorid
		{
			get { return _distributorid; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Distributorid", value, value.ToString());
				
				_distributorid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string HospitalCode
		{
			get { return _hospitalcode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for HospitalCode", value, value.ToString());
				
				_hospitalcode = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Type
		{
			get { return _type; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Type", value, value.ToString());
				
				_type = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? SaleDate
		{
			get { return _saledate; }
			set { _saledate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Departments
		{
			get { return _departments; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Departments", value, value.ToString());
				
				_departments = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_remark = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string InvoiceNo
		{
			get { return _invoiceno; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for InvoiceNo", value, value.ToString());
				
				_invoiceno = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string InvoiceTitle
		{
			get { return _invoicetitle; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for InvoiceTitle", value, value.ToString());
				
				_invoicetitle = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? InvoiceDate
		{
			get { return _invoicedate; }
			set { _invoicedate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ArticleNumber
		{
			get { return _articlenumber; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for ArticleNumber", value, value.ToString());
				
				_articlenumber = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string LotNumber
		{
			get { return _lotnumber; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for LotNumber", value, value.ToString());
				
				_lotnumber = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string QrCode
		{
			get { return _qrcode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for QrCode", value, value.ToString());
				
				_qrcode = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public decimal? UnitPrice
		{
			get { return _unitprice; }
			set { _unitprice = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public decimal? LotQty
		{
			get { return _lotqty; }
			set { _lotqty = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string WarehouseName
		{
			get { return _warehousename; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for WarehouseName", value, value.ToString());
				
				_warehousename = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int LineNbr
		{
			get { return _linenbr; }
			set { _linenbr = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string FileName
		{
			get { return _filename; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for FileName", value, value.ToString());
				
				_filename = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime ImportDate
		{
			get { return _importdate; }
			set { _importdate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Clientid
		{
			get { return _clientid; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Clientid", value, value.ToString());
				
				_clientid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string BatchNbr
		{
			get { return _batchnbr; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for BatchNbr", value, value.ToString());
				
				_batchnbr = value;
			}
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
