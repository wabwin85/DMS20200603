/*
 * Ibatis.Net for Data Mapper, and Generated by MyGeneration
 * 
 * NameSpace   : DMS.Model 
 * ClassName   : EndoScoreCardInit
 * Created Time: 2014/10/9 12:09:32
 *
 ******* Copyright (C) 2009/2010 - GrapeCity **********
 *
******************************************************/

using System;

namespace DMS.Model
{
	/// <summary>
	///	EndoScoreCardInit
	/// </summary>
	[Serializable]
	public class EndoScoreCardInit : BaseModel
	{
		#region Private Members 18
		
		private Guid _id; 
		private Guid _user; 
		private DateTime _uploaddate; 
		private int _linenbr; 
		private string _filename; 
		private bool _errorflag; 
		private string _errordescription; 
		private string _dealername;
        private string _no;
		private string _year; 
		private string _quarter; 
		private string _score1;
        private string _score2; 
		private Guid? _dmaid;
        private string _remark;
		private string _dealername_errmsg;
        private string _no_errmsg;
		private string _quarter_errmsg; 
		private string _score1_errmsg; 
		private string _score2_errmsg; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public EndoScoreCardInit()
		{
			_id = Guid.Empty; 
			_user = Guid.Empty; 
			_uploaddate = new DateTime(); 
			_linenbr = 0; 
			_filename = null; 
			_errorflag = false; 
			_errordescription = null; 
			_dealername = null;
            _no = null;
			_year = null; 
			_quarter = null; 
			_score1 = null;
			_score2 = null;
			_dmaid = null;
            _remark = null;
			_dealername_errmsg = null;
            _no_errmsg = null;
			_quarter_errmsg = null; 
			_score1_errmsg = null; 
			_score2_errmsg = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid Id
		{
			get { return _id; }
			set { _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid User
		{
			get { return _user; }
			set { _user = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime UploadDate
		{
			get { return _uploaddate; }
			set { _uploaddate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int LineNbr
		{
			get { return _linenbr; }
			set { _linenbr = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string FileName
		{
			get { return _filename; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for FileName", value, value.ToString());

                _filename = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public bool ErrorFlag
		{
			get { return _errorflag; }
			set { _errorflag = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ErrorDescription
		{
			get { return _errordescription; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for ErrorDescription", value, value.ToString());
				
				_errordescription = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string DealerName
		{
			get { return _dealername; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for DealerName", value, value.ToString());
				
				_dealername = value;
			}
		}

        /// <summary>
        /// 
        /// </summary>		
        public string No
        {
            get { return _no; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for No", value, value.ToString());

                _no = value;
            }
        }
			
		/// <summary>
		/// 
		/// </summary>		
		public string Year
		{
			get { return _year; }
			set	
			{
				if( value!= null && value.Length > 4)
					throw new ArgumentOutOfRangeException("Invalid value for Year", value, value.ToString());
				
				_year = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Quarter
		{
			get { return _quarter; }
			set	
			{
				if( value!= null && value.Length > 2)
					throw new ArgumentOutOfRangeException("Invalid value for Quarter", value, value.ToString());
				
				_quarter = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Score1
		{
            get { return _score1; }
            set
            {
                if (value != null && value.Length > 10)
                    throw new ArgumentOutOfRangeException("Invalid value for Score1", value, value.ToString());

                _score1 = value;
            }
		}
			
		/// <summary>
		/// 
		/// </summary>		
        public string Score2
        {
            get { return _score2; }
            set
            {
                if (value != null && value.Length > 10)
                    throw new ArgumentOutOfRangeException("Invalid value for Score2", value, value.ToString());

                _score2 = value;
            }
        }
			
		/// <summary>
		/// 
		/// </summary>		
		public Guid? Dmaid
		{
			get { return _dmaid; }
			set { _dmaid = value; }
		}

        /// <summary>
        /// 
        /// </summary>	
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (value != null && value.Length > 300)
                    throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());

                _remark = value;
            }
        }
			
		/// <summary>
		/// 
		/// </summary>		
		public string DealerNameErrMsg
		{
			get { return _dealername_errmsg; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for DealerNameErrMsg", value, value.ToString());
				
				_dealername_errmsg = value;
			}
		}

        /// <summary>
        /// 
        /// </summary>		
        public string NoErrMsg
        {
            get { return _no_errmsg; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for NoErrMsg", value, value.ToString());

                _no_errmsg = value;
            }
        }
			
		/// <summary>
		/// 
		/// </summary>		
		public string QuarterErrMsg
		{
			get { return _quarter_errmsg; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for QuarterErrMsg", value, value.ToString());
				
				_quarter_errmsg = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Score1ErrMsg
		{
			get { return _score1_errmsg; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Score1ErrMsg", value, value.ToString());
				
				_score1_errmsg = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Score2ErrMsg
		{
			get { return _score2_errmsg; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Score2ErrMsg", value, value.ToString());
				
				_score2_errmsg = value;
			}
		}
			
		
	
		
		#endregion 
		
		
		
		
		
	}
}
